
F303-ELECTROMAID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800cbb0  0800cbb0  0001cbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d050  0800d050  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d050  0800d050  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d050  0800d050  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d050  0800d050  0001d050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d054  0800d054  0001d054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c10  200001e4  0800d23c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008df4  0800d23c  00028df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232cf  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000432a  00000000  00000000  000434e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001870  00000000  00000000  00047810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  00049080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000047e4  00000000  00000000  0004a760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016c45  00000000  00000000  0004ef44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc48e  00000000  00000000  00065b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00132017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007004  00000000  00000000  00132108  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000c3c  00000000  00000000  0013910c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb98 	.word	0x0800cb98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800cb98 	.word	0x0800cb98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <DWT_Init+0x38>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10e      	bne.n	8000c76 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <DWT_Init+0x38>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <DWT_Init+0x38>)
 8000c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c62:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <DWT_Init+0x3c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <DWT_Init+0x3c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <DWT_Init+0x3c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6013      	str	r3, [r2, #0]
    }
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000edf0 	.word	0xe000edf0
 8000c84:	e0001000 	.word	0xe0001000

08000c88 <module_init>:
void StartADC2Task(void *argument);
void StartADC3Task(void *argument);
void StartADC4Task(void *argument);

/* USER CODE BEGIN PFP */
void module_init(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	module[0].GPIOPin = D1_Pin;
 8000c8e:	4b59      	ldr	r3, [pc, #356]	; (8000df4 <module_init+0x16c>)
 8000c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	module[1].GPIOPin = D2_Pin;
 8000c98:	4b56      	ldr	r3, [pc, #344]	; (8000df4 <module_init+0x16c>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	module[2].GPIOPin = D3_Pin;
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <module_init+0x16c>)
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	module[3].GPIOPin = D4_Pin;
 8000caa:	4b52      	ldr	r3, [pc, #328]	; (8000df4 <module_init+0x16c>)
 8000cac:	2240      	movs	r2, #64	; 0x40
 8000cae:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
	module[4].GPIOPin = D5_Pin;
 8000cb2:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <module_init+0x16c>)
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	module[5].GPIOPin = D6_Pin;
 8000cba:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <module_init+0x16c>)
 8000cbc:	2210      	movs	r2, #16
 8000cbe:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
	module[6].GPIOPin = D7_Pin;
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <module_init+0x16c>)
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	module[7].GPIOPin = D8_Pin;
 8000cca:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <module_init+0x16c>)
 8000ccc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cd0:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	module[8].GPIOPin = D9_Pin;
 8000cd4:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <module_init+0x16c>)
 8000cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cda:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	module[9].GPIOPin = D10_Pin;
 8000cde:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <module_init+0x16c>)
 8000ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	module[0].GPIOPort = D1_GPIO_Port;
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <module_init+0x16c>)
 8000cea:	4a43      	ldr	r2, [pc, #268]	; (8000df8 <module_init+0x170>)
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
	module[1].GPIOPort = D2_GPIO_Port;
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <module_init+0x16c>)
 8000cf0:	4a41      	ldr	r2, [pc, #260]	; (8000df8 <module_init+0x170>)
 8000cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	module[2].GPIOPort = D3_GPIO_Port;
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <module_init+0x16c>)
 8000cf8:	4a3f      	ldr	r2, [pc, #252]	; (8000df8 <module_init+0x170>)
 8000cfa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	module[3].GPIOPort = D4_GPIO_Port;
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <module_init+0x16c>)
 8000d00:	4a3d      	ldr	r2, [pc, #244]	; (8000df8 <module_init+0x170>)
 8000d02:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	module[4].GPIOPort = D5_GPIO_Port;
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <module_init+0x16c>)
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <module_init+0x170>)
 8000d0a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	module[5].GPIOPort = D6_GPIO_Port;
 8000d0e:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <module_init+0x16c>)
 8000d10:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <module_init+0x170>)
 8000d12:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	module[6].GPIOPort = D7_GPIO_Port;
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <module_init+0x16c>)
 8000d18:	4a37      	ldr	r2, [pc, #220]	; (8000df8 <module_init+0x170>)
 8000d1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	module[7].GPIOPort = D8_GPIO_Port;
 8000d1e:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <module_init+0x16c>)
 8000d20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d24:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	module[8].GPIOPort = D9_GPIO_Port;
 8000d28:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <module_init+0x16c>)
 8000d2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d2e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	module[9].GPIOPort = D10_GPIO_Port;
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <module_init+0x16c>)
 8000d34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d38:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec


	for(int i = 0; i < 10; i++){
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	e050      	b.n	8000de4 <module_init+0x15c>
		sprintf((char*)module[i].data_send, "#A%d", i);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	224c      	movs	r2, #76	; 0x4c
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	3308      	adds	r3, #8
 8000d4c:	4a29      	ldr	r2, [pc, #164]	; (8000df4 <module_init+0x16c>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	3301      	adds	r3, #1
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4929      	ldr	r1, [pc, #164]	; (8000dfc <module_init+0x174>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00a faf0 	bl	800b33c <siprintf>
		module[i].data_send[7] = 'S';
 8000d5c:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <module_init+0x16c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	214c      	movs	r1, #76	; 0x4c
 8000d62:	fb01 f303 	mul.w	r3, r1, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	3310      	adds	r3, #16
 8000d6a:	2253      	movs	r2, #83	; 0x53
 8000d6c:	701a      	strb	r2, [r3, #0]

		module[i].status = false;
 8000d6e:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <module_init+0x16c>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	214c      	movs	r1, #76	; 0x4c
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
		module[i].aktif = true;
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <module_init+0x16c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	214c      	movs	r1, #76	; 0x4c
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3308      	adds	r3, #8
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
		module[i].midPoint = 0;
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <module_init+0x16c>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	214c      	movs	r1, #76	; 0x4c
 8000d98:	fb01 f303 	mul.w	r3, r1, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3348      	adds	r3, #72	; 0x48
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
		module[i].midPointSet = false;
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <module_init+0x16c>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	214c      	movs	r1, #76	; 0x4c
 8000dac:	fb01 f303 	mul.w	r3, r1, r3
 8000db0:	4413      	add	r3, r2
 8000db2:	3346      	adds	r3, #70	; 0x46
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

		arm_biquad_cascade_df1_init_f32(&module[i].filter_inst, 1, filter_coeff, module[i].pState);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	224c      	movs	r2, #76	; 0x4c
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	3310      	adds	r3, #16
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <module_init+0x16c>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	1d18      	adds	r0, r3, #4
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	224c      	movs	r2, #76	; 0x4c
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	3320      	adds	r3, #32
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <module_init+0x16c>)
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <module_init+0x178>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	f009 fd0b 	bl	800a7f4 <arm_biquad_cascade_df1_init_f32>
	for(int i = 0; i < 10; i++){
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3301      	adds	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	ddab      	ble.n	8000d42 <module_init+0xba>

	}
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20002f80 	.word	0x20002f80
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	0800cc44 	.word	0x0800cc44
 8000e00:	0800cda0 	.word	0x0800cda0

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f001 fd4c 	bl	80028a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f8da 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 fc40 	bl	8001694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e14:	f000 fbfc 	bl	8001610 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e18:	f000 f930 	bl	800107c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e1c:	f000 fb98 	bl	8001550 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000e20:	f000 f9c6 	bl	80011b0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000e24:	f000 fa4c 	bl	80012c0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000e28:	f000 fae6 	bl	80013f8 <MX_ADC4_Init>
  MX_USART3_UART_Init();
 8000e2c:	f000 fbc0 	bl	80015b0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000e30:	f000 fb40 	bl	80014b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_Delay(2000);
 8000e34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e38:	f001 fd6a 	bl	8002910 <HAL_Delay>

  module_init();
 8000e3c:	f7ff ff24 	bl	8000c88 <module_init>
  DWT_Init();
 8000e40:	f7ff ff02 	bl	8000c48 <DWT_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e44:	483a      	ldr	r0, [pc, #232]	; (8000f30 <main+0x12c>)
 8000e46:	f004 fda3 	bl	8005990 <HAL_TIM_Base_Start_IT>

  arm_biquad_cascade_df1_init_f32(&filter_voltMeter, 1, filter_coeff, pStateVoltMeter);
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <main+0x130>)
 8000e4c:	4a3a      	ldr	r2, [pc, #232]	; (8000f38 <main+0x134>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	483a      	ldr	r0, [pc, #232]	; (8000f3c <main+0x138>)
 8000e52:	f009 fccf 	bl	800a7f4 <arm_biquad_cascade_df1_init_f32>

  strSize = sprintf((char*)buffer, "Test123\r\n");
 8000e56:	4a3a      	ldr	r2, [pc, #232]	; (8000f40 <main+0x13c>)
 8000e58:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <main+0x140>)
 8000e5a:	cb03      	ldmia	r3!, {r0, r1}
 8000e5c:	6010      	str	r0, [r2, #0]
 8000e5e:	6051      	str	r1, [r2, #4]
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	8113      	strh	r3, [r2, #8]
 8000e64:	2309      	movs	r3, #9
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <main+0x144>)
 8000e6a:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <main+0x144>)
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	4933      	ldr	r1, [pc, #204]	; (8000f40 <main+0x13c>)
 8000e74:	4835      	ldr	r0, [pc, #212]	; (8000f4c <main+0x148>)
 8000e76:	f005 fa0b 	bl	8006290 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <main+0x144>)
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	2364      	movs	r3, #100	; 0x64
 8000e80:	492f      	ldr	r1, [pc, #188]	; (8000f40 <main+0x13c>)
 8000e82:	4833      	ldr	r0, [pc, #204]	; (8000f50 <main+0x14c>)
 8000e84:	f005 fa04 	bl	8006290 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e88:	f006 fab4 	bl	80073f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ADC1Task */
  ADC1TaskHandle = osThreadNew(StartADC1Task, NULL, &ADC1Task_attributes);
 8000e8c:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <main+0x150>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4831      	ldr	r0, [pc, #196]	; (8000f58 <main+0x154>)
 8000e92:	f006 fb17 	bl	80074c4 <osThreadNew>
 8000e96:	4602      	mov	r2, r0
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <main+0x158>)
 8000e9a:	601a      	str	r2, [r3, #0]

  /* creation of sendPowerTask */
  sendPowerTaskHandle = osThreadNew(StartSendPowerTask, NULL, &sendPowerTask_attributes);
 8000e9c:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <main+0x15c>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4830      	ldr	r0, [pc, #192]	; (8000f64 <main+0x160>)
 8000ea2:	f006 fb0f 	bl	80074c4 <osThreadNew>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <main+0x164>)
 8000eaa:	601a      	str	r2, [r3, #0]

  /* creation of processDataTask */
  processDataTaskHandle = osThreadNew(StartProcessDataTask, NULL, &processDataTask_attributes);
 8000eac:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <main+0x168>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	482f      	ldr	r0, [pc, #188]	; (8000f70 <main+0x16c>)
 8000eb2:	f006 fb07 	bl	80074c4 <osThreadNew>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <main+0x170>)
 8000eba:	601a      	str	r2, [r3, #0]

  /* creation of ADC2Task */
  ADC2TaskHandle = osThreadNew(StartADC2Task, NULL, &ADC2Task_attributes);
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <main+0x174>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	482e      	ldr	r0, [pc, #184]	; (8000f7c <main+0x178>)
 8000ec2:	f006 faff 	bl	80074c4 <osThreadNew>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <main+0x17c>)
 8000eca:	601a      	str	r2, [r3, #0]

  /* creation of ADC3Task */
  ADC3TaskHandle = osThreadNew(StartADC3Task, NULL, &ADC3Task_attributes);
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <main+0x180>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	482d      	ldr	r0, [pc, #180]	; (8000f88 <main+0x184>)
 8000ed2:	f006 faf7 	bl	80074c4 <osThreadNew>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <main+0x188>)
 8000eda:	601a      	str	r2, [r3, #0]

  /* creation of ADC4Task */
  ADC4TaskHandle = osThreadNew(StartADC4Task, NULL, &ADC4Task_attributes);
 8000edc:	4a2c      	ldr	r2, [pc, #176]	; (8000f90 <main+0x18c>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	482c      	ldr	r0, [pc, #176]	; (8000f94 <main+0x190>)
 8000ee2:	f006 faef 	bl	80074c4 <osThreadNew>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <main+0x194>)
 8000eea:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ADC1Event */
  ADC1EventHandle = osEventFlagsNew(&ADC1Event_attributes);
 8000eec:	482b      	ldr	r0, [pc, #172]	; (8000f9c <main+0x198>)
 8000eee:	f006 fbc1 	bl	8007674 <osEventFlagsNew>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <main+0x19c>)
 8000ef6:	601a      	str	r2, [r3, #0]

  /* creation of ADC2Event */
  ADC2EventHandle = osEventFlagsNew(&ADC2Event_attributes);
 8000ef8:	482a      	ldr	r0, [pc, #168]	; (8000fa4 <main+0x1a0>)
 8000efa:	f006 fbbb 	bl	8007674 <osEventFlagsNew>
 8000efe:	4602      	mov	r2, r0
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <main+0x1a4>)
 8000f02:	601a      	str	r2, [r3, #0]

  /* creation of ADC3Event */
  ADC3EventHandle = osEventFlagsNew(&ADC3Event_attributes);
 8000f04:	4829      	ldr	r0, [pc, #164]	; (8000fac <main+0x1a8>)
 8000f06:	f006 fbb5 	bl	8007674 <osEventFlagsNew>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <main+0x1ac>)
 8000f0e:	601a      	str	r2, [r3, #0]

  /* creation of ADC4Event */
  ADC4EventHandle = osEventFlagsNew(&ADC4Event_attributes);
 8000f10:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <main+0x1b0>)
 8000f12:	f006 fbaf 	bl	8007674 <osEventFlagsNew>
 8000f16:	4602      	mov	r2, r0
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <main+0x1b4>)
 8000f1a:	601a      	str	r2, [r3, #0]

  /* creation of UARTReceiveEvent */
  UARTReceiveEventHandle = osEventFlagsNew(&UARTReceiveEvent_attributes);
 8000f1c:	4827      	ldr	r0, [pc, #156]	; (8000fbc <main+0x1b8>)
 8000f1e:	f006 fba9 	bl	8007674 <osEventFlagsNew>
 8000f22:	4602      	mov	r2, r0
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <main+0x1bc>)
 8000f26:	601a      	str	r2, [r3, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f28:	f006 fa98 	bl	800745c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x128>
 8000f2e:	bf00      	nop
 8000f30:	20008534 	.word	0x20008534
 8000f34:	2000419c 	.word	0x2000419c
 8000f38:	0800cda0 	.word	0x0800cda0
 8000f3c:	2000327c 	.word	0x2000327c
 8000f40:	200040d4 	.word	0x200040d4
 8000f44:	0800cc4c 	.word	0x0800cc4c
 8000f48:	20008c90 	.word	0x20008c90
 8000f4c:	20004050 	.word	0x20004050
 8000f50:	20002ea8 	.word	0x20002ea8
 8000f54:	0800cc78 	.word	0x0800cc78
 8000f58:	080018c9 	.word	0x080018c9
 8000f5c:	20008624 	.word	0x20008624
 8000f60:	0800cc9c 	.word	0x0800cc9c
 8000f64:	08001af9 	.word	0x08001af9
 8000f68:	200032d8 	.word	0x200032d8
 8000f6c:	0800ccc0 	.word	0x0800ccc0
 8000f70:	08001ba1 	.word	0x08001ba1
 8000f74:	2000861c 	.word	0x2000861c
 8000f78:	0800cce4 	.word	0x0800cce4
 8000f7c:	08001c69 	.word	0x08001c69
 8000f80:	200027f4 	.word	0x200027f4
 8000f84:	0800cd08 	.word	0x0800cd08
 8000f88:	08001ea9 	.word	0x08001ea9
 8000f8c:	20003278 	.word	0x20003278
 8000f90:	0800cd2c 	.word	0x0800cd2c
 8000f94:	080020e5 	.word	0x080020e5
 8000f98:	20008618 	.word	0x20008618
 8000f9c:	0800cd50 	.word	0x0800cd50
 8000fa0:	200032d0 	.word	0x200032d0
 8000fa4:	0800cd60 	.word	0x0800cd60
 8000fa8:	20008d5c 	.word	0x20008d5c
 8000fac:	0800cd70 	.word	0x0800cd70
 8000fb0:	20008614 	.word	0x20008614
 8000fb4:	0800cd80 	.word	0x0800cd80
 8000fb8:	200032cc 	.word	0x200032cc
 8000fbc:	0800cd90 	.word	0x0800cd90
 8000fc0:	200032d4 	.word	0x200032d4

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b09e      	sub	sp, #120	; 0x78
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fce:	2228      	movs	r2, #40	; 0x28
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 fd4d 	bl	800aa72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	223c      	movs	r2, #60	; 0x3c
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f009 fd3f 	bl	800aa72 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001010:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001014:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800101a:	4618      	mov	r0, r3
 800101c:	f003 f940 	bl	80042a0 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001026:	f001 f883 	bl	8002130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2302      	movs	r3, #2
 8001030:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001040:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001044:	2102      	movs	r1, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f832 	bl	80050b0 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001052:	f001 f86d 	bl	8002130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8001056:	2305      	movs	r3, #5
 8001058:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fa8b 	bl	8005580 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001070:	f001 f85e 	bl	8002130 <Error_Handler>
  }
}
 8001074:	bf00      	nop
 8001076:	3778      	adds	r7, #120	; 0x78
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800109e:	4b43      	ldr	r3, [pc, #268]	; (80011ac <MX_ADC1_Init+0x130>)
 80010a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <MX_ADC1_Init+0x130>)
 80010a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <MX_ADC1_Init+0x130>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <MX_ADC1_Init+0x130>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ba:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <MX_ADC1_Init+0x130>)
 80010bc:	2201      	movs	r2, #1
 80010be:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <MX_ADC1_Init+0x130>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c8:	4b38      	ldr	r3, [pc, #224]	; (80011ac <MX_ADC1_Init+0x130>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <MX_ADC1_Init+0x130>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <MX_ADC1_Init+0x130>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <MX_ADC1_Init+0x130>)
 80010dc:	2204      	movs	r2, #4
 80010de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010e0:	4b32      	ldr	r3, [pc, #200]	; (80011ac <MX_ADC1_Init+0x130>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <MX_ADC1_Init+0x130>)
 80010ea:	2208      	movs	r2, #8
 80010ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_ADC1_Init+0x130>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <MX_ADC1_Init+0x130>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fa:	482c      	ldr	r0, [pc, #176]	; (80011ac <MX_ADC1_Init+0x130>)
 80010fc:	f001 fc34 	bl	8002968 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001106:	f001 f813 	bl	8002130 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4825      	ldr	r0, [pc, #148]	; (80011ac <MX_ADC1_Init+0x130>)
 8001116:	f002 fa0f 	bl	8003538 <HAL_ADCEx_MultiModeConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001120:	f001 f806 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001124:	2301      	movs	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001128:	2301      	movs	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001130:	2306      	movs	r3, #6
 8001132:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <MX_ADC1_Init+0x130>)
 8001142:	f001 ff0d 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800114c:	f000 fff0 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001150:	2302      	movs	r3, #2
 8001152:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001154:	2302      	movs	r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4813      	ldr	r0, [pc, #76]	; (80011ac <MX_ADC1_Init+0x130>)
 800115e:	f001 feff 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001168:	f000 ffe2 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116c:	2303      	movs	r3, #3
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001170:	2303      	movs	r3, #3
 8001172:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_ADC1_Init+0x130>)
 800117a:	f001 fef1 	bl	8002f60 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001184:	f000 ffd4 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001188:	2304      	movs	r3, #4
 800118a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800118c:	2304      	movs	r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_ADC1_Init+0x130>)
 8001196:	f001 fee3 	bl	8002f60 <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80011a0:	f000 ffc6 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20003fac 	.word	0x20003fac

080011b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <MX_ADC2_Init+0x10c>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011cc:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011dc:	2201      	movs	r2, #1
 80011de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <MX_ADC2_Init+0x108>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MX_ADC2_Init+0x108>)
 8001202:	2204      	movs	r2, #4
 8001204:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <MX_ADC2_Init+0x108>)
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_ADC2_Init+0x108>)
 8001210:	2208      	movs	r2, #8
 8001212:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_ADC2_Init+0x108>)
 8001216:	2200      	movs	r2, #0
 8001218:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_ADC2_Init+0x108>)
 800121c:	2200      	movs	r2, #0
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001220:	4825      	ldr	r0, [pc, #148]	; (80012b8 <MX_ADC2_Init+0x108>)
 8001222:	f001 fba1 	bl	8002968 <HAL_ADC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800122c:	f000 ff80 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001230:	2301      	movs	r3, #1
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001234:	2301      	movs	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 800123c:	2306      	movs	r3, #6
 800123e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	481a      	ldr	r0, [pc, #104]	; (80012b8 <MX_ADC2_Init+0x108>)
 800124e:	f001 fe87 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001258:	f000 ff6a 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800125c:	2302      	movs	r3, #2
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001260:	2302      	movs	r3, #2
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_ADC2_Init+0x108>)
 800126a:	f001 fe79 	bl	8002f60 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001274:	f000 ff5c 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001278:	2303      	movs	r3, #3
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800127c:	2303      	movs	r3, #3
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_ADC2_Init+0x108>)
 8001286:	f001 fe6b 	bl	8002f60 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001290:	f000 ff4e 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001294:	2304      	movs	r3, #4
 8001296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001298:	2304      	movs	r3, #4
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_ADC2_Init+0x108>)
 80012a2:	f001 fe5d 	bl	8002f60 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80012ac:	f000 ff40 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20002f2c 	.word	0x20002f2c
 80012bc:	50000100 	.word	0x50000100

080012c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80012e2:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <MX_ADC3_Init+0x130>)
 80012e4:	4a43      	ldr	r2, [pc, #268]	; (80013f4 <MX_ADC3_Init+0x134>)
 80012e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012e8:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <MX_ADC3_Init+0x130>)
 80012ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <MX_ADC3_Init+0x130>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012f6:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <MX_ADC3_Init+0x130>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80012fc:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <MX_ADC3_Init+0x130>)
 80012fe:	2201      	movs	r2, #1
 8001300:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130a:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <MX_ADC3_Init+0x130>)
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001312:	2201      	movs	r2, #1
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 800131c:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <MX_ADC3_Init+0x130>)
 800131e:	2204      	movs	r2, #4
 8001320:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <MX_ADC3_Init+0x130>)
 800132c:	2208      	movs	r2, #8
 800132e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001332:	2200      	movs	r2, #0
 8001334:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800133c:	482c      	ldr	r0, [pc, #176]	; (80013f0 <MX_ADC3_Init+0x130>)
 800133e:	f001 fb13 	bl	8002968 <HAL_ADC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 fef2 	bl	8002130 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4826      	ldr	r0, [pc, #152]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001358:	f002 f8ee 	bl	8003538 <HAL_ADCEx_MultiModeConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8001362:	f000 fee5 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001366:	230c      	movs	r3, #12
 8001368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800136a:	2301      	movs	r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001372:	2306      	movs	r3, #6
 8001374:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	481b      	ldr	r0, [pc, #108]	; (80013f0 <MX_ADC3_Init+0x130>)
 8001384:	f001 fdec 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 800138e:	f000 fecf 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001392:	2301      	movs	r3, #1
 8001394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001396:	2302      	movs	r3, #2
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4814      	ldr	r0, [pc, #80]	; (80013f0 <MX_ADC3_Init+0x130>)
 80013a0:	f001 fdde 	bl	8002f60 <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 80013aa:	f000 fec1 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013ae:	230c      	movs	r3, #12
 80013b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013b2:	2303      	movs	r3, #3
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_ADC3_Init+0x130>)
 80013bc:	f001 fdd0 	bl	8002f60 <HAL_ADC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC3_Init+0x10a>
  {
    Error_Handler();
 80013c6:	f000 feb3 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013ce:	2304      	movs	r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_ADC3_Init+0x130>)
 80013d8:	f001 fdc2 	bl	8002f60 <HAL_ADC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC3_Init+0x126>
  {
    Error_Handler();
 80013e2:	f000 fea5 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20003ffc 	.word	0x20003ffc
 80013f4:	50000400 	.word	0x50000400

080013f8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001410:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <MX_ADC4_Init+0xb8>)
 8001412:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001416:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800141a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <MX_ADC4_Init+0xb4>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_ADC4_Init+0xb4>)
 800142a:	2201      	movs	r2, #1
 800142c:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_ADC4_Init+0xb4>)
 800143e:	2201      	movs	r2, #1
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_ADC4_Init+0xb4>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001458:	2208      	movs	r2, #8
 800145a:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_ADC4_Init+0xb4>)
 800145e:	2200      	movs	r2, #0
 8001460:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001464:	2200      	movs	r2, #0
 8001466:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <MX_ADC4_Init+0xb4>)
 800146a:	f001 fa7d 	bl	8002968 <HAL_ADC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8001474:	f000 fe5c 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001478:	2303      	movs	r3, #3
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800147c:	2301      	movs	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001484:	2305      	movs	r3, #5
 8001486:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_ADC4_Init+0xb4>)
 8001496:	f001 fd63 	bl	8002f60 <HAL_ADC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 80014a0:	f000 fe46 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20008580 	.word	0x20008580
 80014b0:	50000500 	.word	0x50000500

080014b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_TIM2_Init+0x98>)
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_TIM2_Init+0x98>)
 80014dc:	2247      	movs	r2, #71	; 0x47
 80014de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_TIM2_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <MX_TIM2_Init+0x98>)
 80014e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_TIM2_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_TIM2_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fa:	4814      	ldr	r0, [pc, #80]	; (800154c <MX_TIM2_Init+0x98>)
 80014fc:	f004 f9f0 	bl	80058e0 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001506:	f000 fe13 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_TIM2_Init+0x98>)
 8001518:	f004 fbc3 	bl	8005ca2 <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001522:	f000 fe05 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <MX_TIM2_Init+0x98>)
 8001534:	f004 fdc0 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800153e:	f000 fdf7 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20008534 	.word	0x20008534

08001550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_USART1_UART_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001594:	f004 fe2e 	bl	80061f4 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800159e:	f000 fdc7 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20004050 	.word	0x20004050
 80015ac:	40013800 	.word	0x40013800

080015b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <MX_USART3_UART_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015bc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80015c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015f4:	f004 fdfe 	bl	80061f4 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 fd97 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20002ea8 	.word	0x20002ea8
 800160c:	40004800 	.word	0x40004800

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_DMA_Init+0x80>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <MX_DMA_Init+0x80>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6153      	str	r3, [r2, #20]
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_DMA_Init+0x80>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_DMA_Init+0x80>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a17      	ldr	r2, [pc, #92]	; (8001690 <MX_DMA_Init+0x80>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6153      	str	r3, [r2, #20]
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_DMA_Init+0x80>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2106      	movs	r1, #6
 800164a:	200b      	movs	r0, #11
 800164c:	f002 fa42 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001650:	200b      	movs	r0, #11
 8001652:	f002 fa5b 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 6, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2106      	movs	r1, #6
 800165a:	2038      	movs	r0, #56	; 0x38
 800165c:	f002 fa3a 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001660:	2038      	movs	r0, #56	; 0x38
 8001662:	f002 fa53 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 6, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2106      	movs	r1, #6
 800166a:	2039      	movs	r0, #57	; 0x39
 800166c:	f002 fa32 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001670:	2039      	movs	r0, #57	; 0x39
 8001672:	f002 fa4b 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 6, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2106      	movs	r1, #6
 800167a:	203c      	movs	r0, #60	; 0x3c
 800167c:	f002 fa2a 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001680:	203c      	movs	r0, #60	; 0x3c
 8001682:	f002 fa43 	bl	8003b0c <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a29      	ldr	r2, [pc, #164]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b4:	6153      	str	r3, [r2, #20]
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a23      	ldr	r2, [pc, #140]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6153      	str	r3, [r2, #20]
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D10_Pin|D9_Pin|D8_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f002 fdb8 	bl	8004270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_GPIO_Init+0xc4>)
 8001708:	f002 fdb2 	bl	8004270 <HAL_GPIO_WritePin>
                          |D3_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D10_Pin D9_Pin D8_Pin */
  GPIO_InitStruct.Pin = D10_Pin|D9_Pin|D8_Pin;
 800170c:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001716:	2302      	movs	r3, #2
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f002 fc28 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin D4_Pin
                           D3_Pin D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin
 800172c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8001730:	60fb      	str	r3, [r7, #12]
                          |D3_Pin|D2_Pin|D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001736:	2302      	movs	r3, #2
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_GPIO_Init+0xc4>)
 8001746:	f002 fc19 	bl	8003f7c <HAL_GPIO_Init>

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400

0800175c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176c:	d106      	bne.n	800177c <HAL_ADC_ConvCpltCallback+0x20>
		osEventFlagsSet(ADC1EventHandle, 1);
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_ADC_ConvCpltCallback+0x70>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f005 ffcf 	bl	8007718 <osEventFlagsSet>
	} else if(hadc->Instance == ADC3){
		osEventFlagsSet(ADC3EventHandle, 1);
	} else if(hadc->Instance == ADC4){
		osEventFlagsSet(ADC4EventHandle, 1);
	}
}
 800177a:	e022      	b.n	80017c2 <HAL_ADC_ConvCpltCallback+0x66>
	} else if(hadc->Instance == ADC2){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x74>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d106      	bne.n	8001794 <HAL_ADC_ConvCpltCallback+0x38>
		osEventFlagsSet(ADC2EventHandle, 1);
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x78>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f005 ffc3 	bl	8007718 <osEventFlagsSet>
}
 8001792:	e016      	b.n	80017c2 <HAL_ADC_ConvCpltCallback+0x66>
	} else if(hadc->Instance == ADC3){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <HAL_ADC_ConvCpltCallback+0x7c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d106      	bne.n	80017ac <HAL_ADC_ConvCpltCallback+0x50>
		osEventFlagsSet(ADC3EventHandle, 1);
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_ADC_ConvCpltCallback+0x80>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 ffb7 	bl	8007718 <osEventFlagsSet>
}
 80017aa:	e00a      	b.n	80017c2 <HAL_ADC_ConvCpltCallback+0x66>
	} else if(hadc->Instance == ADC4){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d105      	bne.n	80017c2 <HAL_ADC_ConvCpltCallback+0x66>
		osEventFlagsSet(ADC4EventHandle, 1);
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_ADC_ConvCpltCallback+0x88>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2101      	movs	r1, #1
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 ffab 	bl	8007718 <osEventFlagsSet>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200032d0 	.word	0x200032d0
 80017d0:	50000100 	.word	0x50000100
 80017d4:	20008d5c 	.word	0x20008d5c
 80017d8:	50000400 	.word	0x50000400
 80017dc:	20008614 	.word	0x20008614
 80017e0:	50000500 	.word	0x50000500
 80017e4:	200032cc 	.word	0x200032cc

080017e8 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
		} else if(hadc->Instance == ADC3){
			adc3State = 1;
		} else if(hadc->Instance == ADC4){
			adc4State = 1;
		}*/
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <HAL_UART_RxCpltCallback+0xa8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d146      	bne.n	800189c <HAL_UART_RxCpltCallback+0xa0>
		static int length;
		static bool captureSerial;
		static bool stringComplete;
		static uint16_t rxChar;

		rxChar = USART3->RDR;
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_UART_RxCpltCallback+0xa8>)
 8001810:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_UART_RxCpltCallback+0xac>)
 8001816:	801a      	strh	r2, [r3, #0]

		if(rxChar == '#' && !captureSerial){
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_UART_RxCpltCallback+0xac>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	2b23      	cmp	r3, #35	; 0x23
 800181e:	d10a      	bne.n	8001836 <HAL_UART_RxCpltCallback+0x3a>
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_UART_RxCpltCallback+0xb0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	f083 0301 	eor.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_UART_RxCpltCallback+0x3a>
			captureSerial = true;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_UART_RxCpltCallback+0xb0>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e00a      	b.n	800184c <HAL_UART_RxCpltCallback+0x50>
		} else if(rxChar == 'S' && captureSerial){
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_UART_RxCpltCallback+0xac>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	2b53      	cmp	r3, #83	; 0x53
 800183c:	d106      	bne.n	800184c <HAL_UART_RxCpltCallback+0x50>
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_UART_RxCpltCallback+0xb0>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_UART_RxCpltCallback+0x50>
			stringComplete = true;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_UART_RxCpltCallback+0xb4>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
		}

		if(captureSerial){
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_UART_RxCpltCallback+0xb0>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00b      	beq.n	800186c <HAL_UART_RxCpltCallback+0x70>
			data[length] = rxChar;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_UART_RxCpltCallback+0xac>)
 8001856:	881a      	ldrh	r2, [r3, #0]
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_UART_RxCpltCallback+0xb8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <HAL_UART_RxCpltCallback+0xbc>)
 8001860:	54d1      	strb	r1, [r2, r3]
			length++;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_UART_RxCpltCallback+0xb8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_UART_RxCpltCallback+0xb8>)
 800186a:	6013      	str	r3, [r2, #0]
		}

		if(stringComplete){
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_UART_RxCpltCallback+0xb4>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <HAL_UART_RxCpltCallback+0x96>
			captureSerial = false;
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_UART_RxCpltCallback+0xb0>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
		    stringComplete = false;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_UART_RxCpltCallback+0xb4>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
		    length = 0;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_UART_RxCpltCallback+0xb8>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
		    osEventFlagsSet(UARTReceiveEventHandle, 1);
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_UART_RxCpltCallback+0xc0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2101      	movs	r1, #1
 800188c:	4618      	mov	r0, r3
 800188e:	f005 ff43 	bl	8007718 <osEventFlagsSet>
		}
		HAL_UART_Receive_IT(&huart3, dma_rx_buf, 1);
 8001892:	2201      	movs	r2, #1
 8001894:	490a      	ldr	r1, [pc, #40]	; (80018c0 <HAL_UART_RxCpltCallback+0xc4>)
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <HAL_UART_RxCpltCallback+0xc8>)
 8001898:	f004 fdea 	bl	8006470 <HAL_UART_Receive_IT>
	    for(i=0,pos=start; i<length; ++i,++pos)
	    {
	        data[i] = dma_rx_buf[pos];
	    }*/
	}
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40004800 	.word	0x40004800
 80018a8:	200002ca 	.word	0x200002ca
 80018ac:	200002cc 	.word	0x200002cc
 80018b0:	200002cd 	.word	0x200002cd
 80018b4:	200002d0 	.word	0x200002d0
 80018b8:	20000200 	.word	0x20000200
 80018bc:	200032d4 	.word	0x200032d4
 80018c0:	20008c94 	.word	0x20008c94
 80018c4:	20002ea8 	.word	0x20002ea8

080018c8 <StartADC1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartADC1Task */
void StartADC1Task(void *argument)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Buffer, FILTER_BLOCK_SIZE * 2 * 4);
 80018d0:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 80018d4:	497e      	ldr	r1, [pc, #504]	; (8001ad0 <StartADC1Task+0x208>)
 80018d6:	487f      	ldr	r0, [pc, #508]	; (8001ad4 <StartADC1Task+0x20c>)
 80018d8:	f001 fa26 	bl	8002d28 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(ADC1EventHandle, 1, osFlagsWaitAny, osWaitForever);
 80018dc:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <StartADC1Task+0x210>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	f005 ffb2 	bl	8007850 <osEventFlagsWait>
	  for(int i = 0; i < 4; i++){
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e0da      	b.n	8001aa8 <StartADC1Task+0x1e0>
		for(int j = 0; j < FILTER_BLOCK_SIZE * 2; j++){
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	e02b      	b.n	8001950 <StartADC1Task+0x88>
			filter_input_adc1[j] = (float)(((float)adc1Buffer[i + (4 * j)] - 2080) / (float)4095) * 3.30;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009a      	lsls	r2, r3, #2
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	4a73      	ldr	r2, [pc, #460]	; (8001ad0 <StartADC1Task+0x208>)
 8001902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001906:	b29b      	uxth	r3, r3
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001910:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001adc <StartADC1Task+0x214>
 8001914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001918:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001ae0 <StartADC1Task+0x218>
 800191c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001920:	ee16 0a90 	vmov	r0, s13
 8001924:	f7fe fe10 	bl	8000548 <__aeabi_f2d>
 8001928:	a367      	add	r3, pc, #412	; (adr r3, 8001ac8 <StartADC1Task+0x200>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fe63 	bl	80005f8 <__aeabi_dmul>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f7ff f935 	bl	8000ba8 <__aeabi_d2f>
 800193e:	4601      	mov	r1, r0
 8001940:	4a68      	ldr	r2, [pc, #416]	; (8001ae4 <StartADC1Task+0x21c>)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	6019      	str	r1, [r3, #0]
		for(int j = 0; j < FILTER_BLOCK_SIZE * 2; j++){
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8001956:	dbcf      	blt.n	80018f8 <StartADC1Task+0x30>
		}

		arm_biquad_cascade_df1_f32(&module[i].filter_inst, filter_input_adc1, filter_output_adc1, FILTER_BLOCK_SIZE * 2);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	224c      	movs	r2, #76	; 0x4c
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	3310      	adds	r3, #16
 8001962:	4a61      	ldr	r2, [pc, #388]	; (8001ae8 <StartADC1Task+0x220>)
 8001964:	4413      	add	r3, r2
 8001966:	1d18      	adds	r0, r3, #4
 8001968:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800196c:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <StartADC1Task+0x224>)
 800196e:	495d      	ldr	r1, [pc, #372]	; (8001ae4 <StartADC1Task+0x21c>)
 8001970:	f008 ff4c 	bl	800a80c <arm_biquad_cascade_df1_f32>
		arm_rms_f32(filter_output_adc1, FILTER_BLOCK_SIZE * 2, &module[i].rms.f);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	224c      	movs	r2, #76	; 0x4c
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <StartADC1Task+0x220>)
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	461a      	mov	r2, r3
 8001986:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800198a:	4858      	ldr	r0, [pc, #352]	; (8001aec <StartADC1Task+0x224>)
 800198c:	f008 fece 	bl	800a72c <arm_rms_f32>
		module[i].totalAmp += module[i].rms.f;
 8001990:	4a55      	ldr	r2, [pc, #340]	; (8001ae8 <StartADC1Task+0x220>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	214c      	movs	r1, #76	; 0x4c
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	3334      	adds	r3, #52	; 0x34
 800199e:	ed93 7a00 	vldr	s14, [r3]
 80019a2:	4a51      	ldr	r2, [pc, #324]	; (8001ae8 <StartADC1Task+0x220>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	214c      	movs	r1, #76	; 0x4c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	333c      	adds	r3, #60	; 0x3c
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	4a4b      	ldr	r2, [pc, #300]	; (8001ae8 <StartADC1Task+0x220>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	214c      	movs	r1, #76	; 0x4c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3334      	adds	r3, #52	; 0x34
 80019c6:	edc3 7a00 	vstr	s15, [r3]
		module[i].samples++;
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <StartADC1Task+0x220>)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	214c      	movs	r1, #76	; 0x4c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3338      	adds	r3, #56	; 0x38
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	4942      	ldr	r1, [pc, #264]	; (8001ae8 <StartADC1Task+0x220>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	204c      	movs	r0, #76	; 0x4c
 80019e2:	fb00 f303 	mul.w	r3, r0, r3
 80019e6:	440b      	add	r3, r1
 80019e8:	3338      	adds	r3, #56	; 0x38
 80019ea:	601a      	str	r2, [r3, #0]
		module[i].Amp.f = module[i].totalAmp / module[i].samples;
 80019ec:	4a3e      	ldr	r2, [pc, #248]	; (8001ae8 <StartADC1Task+0x220>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	214c      	movs	r1, #76	; 0x4c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3334      	adds	r3, #52	; 0x34
 80019fa:	edd3 6a00 	vldr	s13, [r3]
 80019fe:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <StartADC1Task+0x220>)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	214c      	movs	r1, #76	; 0x4c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3338      	adds	r3, #56	; 0x38
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1a:	4a33      	ldr	r2, [pc, #204]	; (8001ae8 <StartADC1Task+0x220>)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	214c      	movs	r1, #76	; 0x4c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3330      	adds	r3, #48	; 0x30
 8001a28:	edc3 7a00 	vstr	s15, [r3]
		if(module[i].status == false || module[i].aktif == false){
 8001a2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ae8 <StartADC1Task+0x220>)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	214c      	movs	r1, #76	; 0x4c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3301      	adds	r3, #1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <StartADC1Task+0x198>
 8001a46:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <StartADC1Task+0x220>)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	214c      	movs	r1, #76	; 0x4c
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3308      	adds	r3, #8
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f083 0301 	eor.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00a      	beq.n	8001a76 <StartADC1Task+0x1ae>
			module[i].Power.f = 0;
 8001a60:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <StartADC1Task+0x220>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	214c      	movs	r1, #76	; 0x4c
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e015      	b.n	8001aa2 <StartADC1Task+0x1da>
		}else{
			module[i].Power.f = (module[i].Amp.f * 220.0);
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <StartADC1Task+0x220>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	214c      	movs	r1, #76	; 0x4c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3330      	adds	r3, #48	; 0x30
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001af0 <StartADC1Task+0x228>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <StartADC1Task+0x220>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	214c      	movs	r1, #76	; 0x4c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < 4; i++){
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	f77f af21 	ble.w	80018f2 <StartADC1Task+0x2a>
		}
	  }
	  adc1State = 0;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <StartADC1Task+0x22c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	  osEventFlagsClear(ADC1EventHandle, 1);
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <StartADC1Task+0x210>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f005 fe83 	bl	80077c8 <osEventFlagsClear>
	  osEventFlagsWait(ADC1EventHandle, 1, osFlagsWaitAny, osWaitForever);
 8001ac2:	e70b      	b.n	80018dc <StartADC1Task+0x14>
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	66666666 	.word	0x66666666
 8001acc:	400a6666 	.word	0x400a6666
 8001ad0:	20005b90 	.word	0x20005b90
 8001ad4:	20003fac 	.word	0x20003fac
 8001ad8:	200032d0 	.word	0x200032d0
 8001adc:	45020000 	.word	0x45020000
 8001ae0:	457ff000 	.word	0x457ff000
 8001ae4:	20005528 	.word	0x20005528
 8001ae8:	20002f80 	.word	0x20002f80
 8001aec:	20003944 	.word	0x20003944
 8001af0:	435c0000 	.word	0x435c0000
 8001af4:	200002c8 	.word	0x200002c8

08001af8 <StartSendPowerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendPowerTask */
void StartSendPowerTask(void *argument)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendPowerTask */
  /* Infinite loop */
  for(;;)
  {
	  for(int i = 0; i < 10; i++){
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e038      	b.n	8001b78 <StartSendPowerTask+0x80>
		memcpy(module[i].data_send + 3, module[i].Power.ui8, 4);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	224c      	movs	r2, #76	; 0x4c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	3308      	adds	r3, #8
 8001b10:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <StartSendPowerTask+0x9c>)
 8001b12:	4413      	add	r3, r2
 8001b14:	3301      	adds	r3, #1
 8001b16:	3303      	adds	r3, #3
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	214c      	movs	r1, #76	; 0x4c
 8001b1c:	fb01 f202 	mul.w	r2, r1, r2
 8001b20:	491c      	ldr	r1, [pc, #112]	; (8001b94 <StartSendPowerTask+0x9c>)
 8001b22:	440a      	add	r2, r1
 8001b24:	3204      	adds	r2, #4
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	601a      	str	r2, [r3, #0]
		memcpy(buffer + (i * 8), module[i].data_send, 8);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <StartSendPowerTask+0xa0>)
 8001b32:	18d0      	adds	r0, r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	224c      	movs	r2, #76	; 0x4c
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	3308      	adds	r3, #8
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <StartSendPowerTask+0x9c>)
 8001b40:	4413      	add	r3, r2
 8001b42:	3301      	adds	r3, #1
 8001b44:	2208      	movs	r2, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	f008 ff88 	bl	800aa5c <memcpy>
		module[i].totalAmp = 0;
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <StartSendPowerTask+0x9c>)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	214c      	movs	r1, #76	; 0x4c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3334      	adds	r3, #52	; 0x34
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
		module[i].samples = 0;
 8001b60:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <StartSendPowerTask+0x9c>)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	214c      	movs	r1, #76	; 0x4c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3338      	adds	r3, #56	; 0x38
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 10; i++){
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	ddc3      	ble.n	8001b06 <StartSendPowerTask+0xe>
		//HAL_UART_Transmit_IT(&huart3, module[i].data_send, 8);
	  }
	  HAL_UART_Transmit_IT(&huart3, buffer, 80);
 8001b7e:	2250      	movs	r2, #80	; 0x50
 8001b80:	4905      	ldr	r1, [pc, #20]	; (8001b98 <StartSendPowerTask+0xa0>)
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <StartSendPowerTask+0xa4>)
 8001b84:	f004 fc18 	bl	80063b8 <HAL_UART_Transmit_IT>
	  osDelay(1000);
 8001b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b8c:	f005 fd44 	bl	8007618 <osDelay>
	  for(int i = 0; i < 10; i++){
 8001b90:	e7b6      	b.n	8001b00 <StartSendPowerTask+0x8>
 8001b92:	bf00      	nop
 8001b94:	20002f80 	.word	0x20002f80
 8001b98:	200040d4 	.word	0x200040d4
 8001b9c:	20002ea8 	.word	0x20002ea8

08001ba0 <StartProcessDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessDataTask */
void StartProcessDataTask(void *argument)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart3, dma_rx_buf, DMA_BUF_SIZE);
	//__HAL_UART_CLEAR_IDLEFLAG(&huart3);
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);

	//__HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
	HAL_UART_Receive_IT(&huart3, dma_rx_buf, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4929      	ldr	r1, [pc, #164]	; (8001c50 <StartProcessDataTask+0xb0>)
 8001bac:	4829      	ldr	r0, [pc, #164]	; (8001c54 <StartProcessDataTask+0xb4>)
 8001bae:	f004 fc5f 	bl	8006470 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(UARTReceiveEventHandle, 1, osFlagsWaitAny, osWaitForever);
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <StartProcessDataTask+0xb8>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	f005 fe47 	bl	8007850 <osEventFlagsWait>
	if(data[0] == '#' && data[4] == 'S'){
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b23      	cmp	r3, #35	; 0x23
 8001bc8:	d13b      	bne.n	8001c42 <StartProcessDataTask+0xa2>
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001bcc:	791b      	ldrb	r3, [r3, #4]
 8001bce:	2b53      	cmp	r3, #83	; 0x53
 8001bd0:	d137      	bne.n	8001c42 <StartProcessDataTask+0xa2>
		if(data[1] == 'D'){
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	2b44      	cmp	r3, #68	; 0x44
 8001bd8:	d133      	bne.n	8001c42 <StartProcessDataTask+0xa2>
			module[data[2] - 48].status = data[3];
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001bdc:	78da      	ldrb	r2, [r3, #3]
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001be0:	789b      	ldrb	r3, [r3, #2]
 8001be2:	3b30      	subs	r3, #48	; 0x30
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2201      	movne	r2, #1
 8001bea:	2200      	moveq	r2, #0
 8001bec:	b2d0      	uxtb	r0, r2
 8001bee:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <StartProcessDataTask+0xc0>)
 8001bf0:	214c      	movs	r1, #76	; 0x4c
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(module[data[2] - 48].GPIOPort, module[data[2] - 48].GPIOPin, module[data[2] - 48].status);
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	3b30      	subs	r3, #48	; 0x30
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <StartProcessDataTask+0xc0>)
 8001c06:	214c      	movs	r1, #76	; 0x4c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3340      	adds	r3, #64	; 0x40
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	3b30      	subs	r3, #48	; 0x30
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <StartProcessDataTask+0xc0>)
 8001c1a:	214c      	movs	r1, #76	; 0x4c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3344      	adds	r3, #68	; 0x44
 8001c24:	881c      	ldrh	r4, [r3, #0]
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <StartProcessDataTask+0xbc>)
 8001c28:	789b      	ldrb	r3, [r3, #2]
 8001c2a:	3b30      	subs	r3, #48	; 0x30
 8001c2c:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <StartProcessDataTask+0xc0>)
 8001c2e:	214c      	movs	r1, #76	; 0x4c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3301      	adds	r3, #1
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	f002 fb17 	bl	8004270 <HAL_GPIO_WritePin>
			//module[data[2] - 48].aktif = data[3];
			//HAL_UART_Transmit_IT(&huart3, (uint8_t*)"#RECVS", 6);
		}

	}
    osEventFlagsClear(UARTReceiveEventHandle, 1);
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <StartProcessDataTask+0xb8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2101      	movs	r1, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 fdbd 	bl	80077c8 <osEventFlagsClear>
	osEventFlagsWait(UARTReceiveEventHandle, 1, osFlagsWaitAny, osWaitForever);
 8001c4e:	e7b0      	b.n	8001bb2 <StartProcessDataTask+0x12>
 8001c50:	20008c94 	.word	0x20008c94
 8001c54:	20002ea8 	.word	0x20002ea8
 8001c58:	200032d4 	.word	0x200032d4
 8001c5c:	20000200 	.word	0x20000200
 8001c60:	20002f80 	.word	0x20002f80
 8001c64:	00000000 	.word	0x00000000

08001c68 <StartADC2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC2Task */
void StartADC2Task(void *argument)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC2Task */
	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2Buffer, FILTER_BLOCK_SIZE * 2 * 4);
 8001c70:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8001c74:	4982      	ldr	r1, [pc, #520]	; (8001e80 <StartADC2Task+0x218>)
 8001c76:	4883      	ldr	r0, [pc, #524]	; (8001e84 <StartADC2Task+0x21c>)
 8001c78:	f001 f856 	bl	8002d28 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	 osEventFlagsWait(ADC2EventHandle, 1, osFlagsWaitAny, osWaitForever);
 8001c7c:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <StartADC2Task+0x220>)
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	2200      	movs	r2, #0
 8001c86:	2101      	movs	r1, #1
 8001c88:	f005 fde2 	bl	8007850 <osEventFlagsWait>
	 for(int i = 0; i < 4; i++){
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e0e7      	b.n	8001e62 <StartADC2Task+0x1fa>
		for(int j = 0; j < FILTER_BLOCK_SIZE * 2; j++){
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	e02b      	b.n	8001cf0 <StartADC2Task+0x88>
		//adcBuffer[j] = adc1Buffer[i + (4 * j)];
		filter_input_adc2[j] = (float)(((float)adc2Buffer[i + (4 * j)] - (float)2080) / (float)4095) * 3.30;
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	009a      	lsls	r2, r3, #2
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a77      	ldr	r2, [pc, #476]	; (8001e80 <StartADC2Task+0x218>)
 8001ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb0:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001e8c <StartADC2Task+0x224>
 8001cb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cb8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001e90 <StartADC2Task+0x228>
 8001cbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cc0:	ee16 0a90 	vmov	r0, s13
 8001cc4:	f7fe fc40 	bl	8000548 <__aeabi_f2d>
 8001cc8:	a36b      	add	r3, pc, #428	; (adr r3, 8001e78 <StartADC2Task+0x210>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc93 	bl	80005f8 <__aeabi_dmul>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4621      	mov	r1, r4
 8001cda:	f7fe ff65 	bl	8000ba8 <__aeabi_d2f>
 8001cde:	4601      	mov	r1, r0
 8001ce0:	4a6c      	ldr	r2, [pc, #432]	; (8001e94 <StartADC2Task+0x22c>)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	6019      	str	r1, [r3, #0]
		for(int j = 0; j < FILTER_BLOCK_SIZE * 2; j++){
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3301      	adds	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8001cf6:	dbcf      	blt.n	8001c98 <StartADC2Task+0x30>
		}

		arm_biquad_cascade_df1_f32(&module[i + 4].filter_inst, filter_input_adc2, filter_output_adc2, FILTER_BLOCK_SIZE * 2);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	224c      	movs	r2, #76	; 0x4c
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	3310      	adds	r3, #16
 8001d04:	4a64      	ldr	r2, [pc, #400]	; (8001e98 <StartADC2Task+0x230>)
 8001d06:	4413      	add	r3, r2
 8001d08:	1d18      	adds	r0, r3, #4
 8001d0a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8001d0e:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <StartADC2Task+0x234>)
 8001d10:	4960      	ldr	r1, [pc, #384]	; (8001e94 <StartADC2Task+0x22c>)
 8001d12:	f008 fd7b 	bl	800a80c <arm_biquad_cascade_df1_f32>
		arm_rms_f32(filter_output_adc2, FILTER_BLOCK_SIZE * 2, &module[i + 4].rms.f);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	224c      	movs	r2, #76	; 0x4c
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	3338      	adds	r3, #56	; 0x38
 8001d22:	4a5d      	ldr	r2, [pc, #372]	; (8001e98 <StartADC2Task+0x230>)
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8001d2e:	485b      	ldr	r0, [pc, #364]	; (8001e9c <StartADC2Task+0x234>)
 8001d30:	f008 fcfc 	bl	800a72c <arm_rms_f32>
		module[i + 4].totalAmp += module[i + 4].rms.f;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <StartADC2Task+0x230>)
 8001d3a:	214c      	movs	r1, #76	; 0x4c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3334      	adds	r3, #52	; 0x34
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	4a52      	ldr	r2, [pc, #328]	; (8001e98 <StartADC2Task+0x230>)
 8001d4e:	214c      	movs	r1, #76	; 0x4c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	333c      	adds	r3, #60	; 0x3c
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d64:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <StartADC2Task+0x230>)
 8001d66:	214c      	movs	r1, #76	; 0x4c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3334      	adds	r3, #52	; 0x34
 8001d70:	edc3 7a00 	vstr	s15, [r3]
		module[i + 4].samples++;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4947      	ldr	r1, [pc, #284]	; (8001e98 <StartADC2Task+0x230>)
 8001d7a:	224c      	movs	r2, #76	; 0x4c
 8001d7c:	fb02 f203 	mul.w	r2, r2, r3
 8001d80:	440a      	add	r2, r1
 8001d82:	3238      	adds	r2, #56	; 0x38
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	3201      	adds	r2, #1
 8001d88:	4943      	ldr	r1, [pc, #268]	; (8001e98 <StartADC2Task+0x230>)
 8001d8a:	204c      	movs	r0, #76	; 0x4c
 8001d8c:	fb00 f303 	mul.w	r3, r0, r3
 8001d90:	440b      	add	r3, r1
 8001d92:	3338      	adds	r3, #56	; 0x38
 8001d94:	601a      	str	r2, [r3, #0]
		module[i + 4].Amp.f = module[i + 4].totalAmp / module[i + 4].samples;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	4a3f      	ldr	r2, [pc, #252]	; (8001e98 <StartADC2Task+0x230>)
 8001d9c:	214c      	movs	r1, #76	; 0x4c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3334      	adds	r3, #52	; 0x34
 8001da6:	edd3 6a00 	vldr	s13, [r3]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <StartADC2Task+0x230>)
 8001db0:	214c      	movs	r1, #76	; 0x4c
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	3338      	adds	r3, #56	; 0x38
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dcc:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <StartADC2Task+0x230>)
 8001dce:	214c      	movs	r1, #76	; 0x4c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3330      	adds	r3, #48	; 0x30
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
		if(module[i + 4].status == false || module[i + 4].aktif == false){
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3304      	adds	r3, #4
 8001de0:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <StartADC2Task+0x230>)
 8001de2:	214c      	movs	r1, #76	; 0x4c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3301      	adds	r3, #1
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	f083 0301 	eor.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10d      	bne.n	8001e14 <StartADC2Task+0x1ac>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <StartADC2Task+0x230>)
 8001dfe:	214c      	movs	r1, #76	; 0x4c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3308      	adds	r3, #8
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	f083 0301 	eor.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <StartADC2Task+0x1c4>
			module[i + 4].Power.f = 0;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3304      	adds	r3, #4
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <StartADC2Task+0x230>)
 8001e1a:	214c      	movs	r1, #76	; 0x4c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e017      	b.n	8001e5c <StartADC2Task+0x1f4>
		} else{
			module[i + 4].Power.f = (module[i + 4].Amp.f * 220.0);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <StartADC2Task+0x230>)
 8001e32:	214c      	movs	r1, #76	; 0x4c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3330      	adds	r3, #48	; 0x30
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3304      	adds	r3, #4
 8001e44:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ea0 <StartADC2Task+0x238>
 8001e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <StartADC2Task+0x230>)
 8001e4e:	214c      	movs	r1, #76	; 0x4c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	edc3 7a00 	vstr	s15, [r3]
	 for(int i = 0; i < 4; i++){
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	f77f af14 	ble.w	8001c92 <StartADC2Task+0x2a>
		}
	}
	osEventFlagsClear(ADC2EventHandle, 1);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <StartADC2Task+0x220>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 fca9 	bl	80077c8 <osEventFlagsClear>
	 osEventFlagsWait(ADC2EventHandle, 1, osFlagsWaitAny, osWaitForever);
 8001e76:	e701      	b.n	8001c7c <StartADC2Task+0x14>
 8001e78:	66666666 	.word	0x66666666
 8001e7c:	400a6666 	.word	0x400a6666
 8001e80:	20006860 	.word	0x20006860
 8001e84:	20002f2c 	.word	0x20002f2c
 8001e88:	20008d5c 	.word	0x20008d5c
 8001e8c:	45020000 	.word	0x45020000
 8001e90:	457ff000 	.word	0x457ff000
 8001e94:	20007b98 	.word	0x20007b98
 8001e98:	20002f80 	.word	0x20002f80
 8001e9c:	200027fc 	.word	0x200027fc
 8001ea0:	435c0000 	.word	0x435c0000
 8001ea4:	00000000 	.word	0x00000000

08001ea8 <StartADC3Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC3Task */
void StartADC3Task(void *argument)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC3Task */
	  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Buffer, FILTER_BLOCK_SIZE * 2 * 4);
 8001eb0:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8001eb4:	4982      	ldr	r1, [pc, #520]	; (80020c0 <StartADC3Task+0x218>)
 8001eb6:	4883      	ldr	r0, [pc, #524]	; (80020c4 <StartADC3Task+0x21c>)
 8001eb8:	f000 ff36 	bl	8002d28 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	 osEventFlagsWait(ADC3EventHandle, 1, osFlagsWaitAny, osWaitForever);
 8001ebc:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <StartADC3Task+0x220>)
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	f005 fcc2 	bl	8007850 <osEventFlagsWait>
	 for(int i = 0; i < 2; i++){
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e0e7      	b.n	80020a2 <StartADC3Task+0x1fa>
		for(int j = 0; j < FILTER_BLOCK_SIZE * 2; j++){
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	e02b      	b.n	8001f30 <StartADC3Task+0x88>
			//adcBuffer[j] = adc1Buffer[i + (4 * j)];
			filter_input_adc3[j] = (float)(((float)adc3Buffer[i + (4 * j)] - (float)2080) / (float)4095) * 3.30;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	009a      	lsls	r2, r3, #2
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a77      	ldr	r2, [pc, #476]	; (80020c0 <StartADC3Task+0x218>)
 8001ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef0:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80020cc <StartADC3Task+0x224>
 8001ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ef8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80020d0 <StartADC3Task+0x228>
 8001efc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f00:	ee16 0a90 	vmov	r0, s13
 8001f04:	f7fe fb20 	bl	8000548 <__aeabi_f2d>
 8001f08:	a36b      	add	r3, pc, #428	; (adr r3, 80020b8 <StartADC3Task+0x210>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb73 	bl	80005f8 <__aeabi_dmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	4618      	mov	r0, r3
 8001f18:	4621      	mov	r1, r4
 8001f1a:	f7fe fe45 	bl	8000ba8 <__aeabi_d2f>
 8001f1e:	4601      	mov	r1, r0
 8001f20:	4a6c      	ldr	r2, [pc, #432]	; (80020d4 <StartADC3Task+0x22c>)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	6019      	str	r1, [r3, #0]
		for(int j = 0; j < FILTER_BLOCK_SIZE * 2; j++){
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8001f36:	dbcf      	blt.n	8001ed8 <StartADC3Task+0x30>
		}

		arm_biquad_cascade_df1_f32(&module[i + 8].filter_inst, filter_input_adc3, filter_output_adc3, FILTER_BLOCK_SIZE * 2);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	224c      	movs	r2, #76	; 0x4c
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	3310      	adds	r3, #16
 8001f44:	4a64      	ldr	r2, [pc, #400]	; (80020d8 <StartADC3Task+0x230>)
 8001f46:	4413      	add	r3, r2
 8001f48:	1d18      	adds	r0, r3, #4
 8001f4a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8001f4e:	4a63      	ldr	r2, [pc, #396]	; (80020dc <StartADC3Task+0x234>)
 8001f50:	4960      	ldr	r1, [pc, #384]	; (80020d4 <StartADC3Task+0x22c>)
 8001f52:	f008 fc5b 	bl	800a80c <arm_biquad_cascade_df1_f32>
		arm_rms_f32(filter_output_adc3, FILTER_BLOCK_SIZE * 2, &module[i + 8].rms.f);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	224c      	movs	r2, #76	; 0x4c
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	3338      	adds	r3, #56	; 0x38
 8001f62:	4a5d      	ldr	r2, [pc, #372]	; (80020d8 <StartADC3Task+0x230>)
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8001f6e:	485b      	ldr	r0, [pc, #364]	; (80020dc <StartADC3Task+0x234>)
 8001f70:	f008 fbdc 	bl	800a72c <arm_rms_f32>
		module[i + 8].totalAmp += module[i + 8].rms.f;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3308      	adds	r3, #8
 8001f78:	4a57      	ldr	r2, [pc, #348]	; (80020d8 <StartADC3Task+0x230>)
 8001f7a:	214c      	movs	r1, #76	; 0x4c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3334      	adds	r3, #52	; 0x34
 8001f84:	ed93 7a00 	vldr	s14, [r3]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	4a52      	ldr	r2, [pc, #328]	; (80020d8 <StartADC3Task+0x230>)
 8001f8e:	214c      	movs	r1, #76	; 0x4c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	333c      	adds	r3, #60	; 0x3c
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	; (80020d8 <StartADC3Task+0x230>)
 8001fa6:	214c      	movs	r1, #76	; 0x4c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3334      	adds	r3, #52	; 0x34
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
		module[i + 8].samples++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	4947      	ldr	r1, [pc, #284]	; (80020d8 <StartADC3Task+0x230>)
 8001fba:	224c      	movs	r2, #76	; 0x4c
 8001fbc:	fb02 f203 	mul.w	r2, r2, r3
 8001fc0:	440a      	add	r2, r1
 8001fc2:	3238      	adds	r2, #56	; 0x38
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	3201      	adds	r2, #1
 8001fc8:	4943      	ldr	r1, [pc, #268]	; (80020d8 <StartADC3Task+0x230>)
 8001fca:	204c      	movs	r0, #76	; 0x4c
 8001fcc:	fb00 f303 	mul.w	r3, r0, r3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3338      	adds	r3, #56	; 0x38
 8001fd4:	601a      	str	r2, [r3, #0]
		module[i + 8].Amp.f = module[i + 8].totalAmp / module[i + 8].samples;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <StartADC3Task+0x230>)
 8001fdc:	214c      	movs	r1, #76	; 0x4c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3334      	adds	r3, #52	; 0x34
 8001fe6:	edd3 6a00 	vldr	s13, [r3]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3308      	adds	r3, #8
 8001fee:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <StartADC3Task+0x230>)
 8001ff0:	214c      	movs	r1, #76	; 0x4c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3338      	adds	r3, #56	; 0x38
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3308      	adds	r3, #8
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	4a32      	ldr	r2, [pc, #200]	; (80020d8 <StartADC3Task+0x230>)
 800200e:	214c      	movs	r1, #76	; 0x4c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3330      	adds	r3, #48	; 0x30
 8002018:	edc3 7a00 	vstr	s15, [r3]
		if(module[i + 8].status == false || module[i + 8].aktif == false){
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3308      	adds	r3, #8
 8002020:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <StartADC3Task+0x230>)
 8002022:	214c      	movs	r1, #76	; 0x4c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3301      	adds	r3, #1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10d      	bne.n	8002054 <StartADC3Task+0x1ac>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3308      	adds	r3, #8
 800203c:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <StartADC3Task+0x230>)
 800203e:	214c      	movs	r1, #76	; 0x4c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3308      	adds	r3, #8
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <StartADC3Task+0x1c4>
			module[i + 8].Power.f = 0;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3308      	adds	r3, #8
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <StartADC3Task+0x230>)
 800205a:	214c      	movs	r1, #76	; 0x4c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e017      	b.n	800209c <StartADC3Task+0x1f4>
		} else{
			module[i + 8].Power.f = (module[i + 8].Amp.f * 220.0);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3308      	adds	r3, #8
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <StartADC3Task+0x230>)
 8002072:	214c      	movs	r1, #76	; 0x4c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3330      	adds	r3, #48	; 0x30
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3308      	adds	r3, #8
 8002084:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80020e0 <StartADC3Task+0x238>
 8002088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <StartADC3Task+0x230>)
 800208e:	214c      	movs	r1, #76	; 0x4c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3304      	adds	r3, #4
 8002098:	edc3 7a00 	vstr	s15, [r3]
	 for(int i = 0; i < 2; i++){
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3301      	adds	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f77f af14 	ble.w	8001ed2 <StartADC3Task+0x2a>
		}
	}
	osEventFlagsClear(ADC3EventHandle, 1);
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <StartADC3Task+0x220>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f005 fb89 	bl	80077c8 <osEventFlagsClear>
	 osEventFlagsWait(ADC3EventHandle, 1, osFlagsWaitAny, osWaitForever);
 80020b6:	e701      	b.n	8001ebc <StartADC3Task+0x14>
 80020b8:	66666666 	.word	0x66666666
 80020bc:	400a6666 	.word	0x400a6666
 80020c0:	20004858 	.word	0x20004858
 80020c4:	20003ffc 	.word	0x20003ffc
 80020c8:	20008614 	.word	0x20008614
 80020cc:	45020000 	.word	0x45020000
 80020d0:	457ff000 	.word	0x457ff000
 80020d4:	20008628 	.word	0x20008628
 80020d8:	20002f80 	.word	0x20002f80
 80020dc:	200032dc 	.word	0x200032dc
 80020e0:	435c0000 	.word	0x435c0000

080020e4 <StartADC4Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC4Task */
void StartADC4Task(void *argument)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC4Task */
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4Buffer, FILTER_BLOCK_SIZE * 2);
 80020ec:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <StartADC4Task+0x20>)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <StartADC4Task+0x24>)
 80020f4:	f000 fe18 	bl	8002d28 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
    osDelay(osWaitForever);
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f005 fa8c 	bl	8007618 <osDelay>
 8002100:	e7fa      	b.n	80020f8 <StartADC4Task+0x14>
 8002102:	bf00      	nop
 8002104:	20008200 	.word	0x20008200
 8002108:	20008580 	.word	0x20008580

0800210c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800211e:	f000 fbd7 	bl	80028d0 <HAL_IncTick>
		hdma_usart3_rx.XferCpltCallback(&hdma_usart3_rx);
	}
	if(dma_uart_rx.timer) --dma_uart_rx.timer;
  }*/
  /* USER CODE END Callback 1 */
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40001400 	.word	0x40001400

08002130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_MspInit+0x4c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_MspInit+0x4c>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6193      	str	r3, [r2, #24]
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_MspInit+0x4c>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_MspInit+0x4c>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_MspInit+0x4c>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_MspInit+0x4c>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	210f      	movs	r1, #15
 800217a:	f06f 0001 	mvn.w	r0, #1
 800217e:	f001 fca9 	bl	8003ad4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b090      	sub	sp, #64	; 0x40
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b0:	d156      	bne.n	8002260 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021b2:	4b87      	ldr	r3, [pc, #540]	; (80023d0 <HAL_ADC_MspInit+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a85      	ldr	r2, [pc, #532]	; (80023d0 <HAL_ADC_MspInit+0x240>)
 80021ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021bc:	4b84      	ldr	r3, [pc, #528]	; (80023d0 <HAL_ADC_MspInit+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10b      	bne.n	80021dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021c4:	4b83      	ldr	r3, [pc, #524]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	4a82      	ldr	r2, [pc, #520]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6153      	str	r3, [r2, #20]
 80021d0:	4b80      	ldr	r3, [pc, #512]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4a7c      	ldr	r2, [pc, #496]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80021e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e6:	6153      	str	r3, [r2, #20]
 80021e8:	4b7a      	ldr	r3, [pc, #488]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin|A4_Pin;
 80021f4:	230f      	movs	r3, #15
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f8:	2303      	movs	r3, #3
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002204:	4619      	mov	r1, r3
 8002206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220a:	f001 feb7 	bl	8003f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800220e:	4b72      	ldr	r3, [pc, #456]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002210:	4a72      	ldr	r2, [pc, #456]	; (80023dc <HAL_ADC_MspInit+0x24c>)
 8002212:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002214:	4b70      	ldr	r3, [pc, #448]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002216:	2200      	movs	r2, #0
 8002218:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800221a:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002220:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002226:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800222e:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002234:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002236:	4b68      	ldr	r3, [pc, #416]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002238:	2220      	movs	r2, #32
 800223a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800223c:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002242:	4865      	ldr	r0, [pc, #404]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002244:	f001 fc70 	bl	8003b28 <HAL_DMA_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800224e:	f7ff ff6f 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a60      	ldr	r2, [pc, #384]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
 8002258:	4a5f      	ldr	r2, [pc, #380]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800225e:	e12a      	b.n	80024b6 <HAL_ADC_MspInit+0x326>
  else if(hadc->Instance==ADC2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_ADC_MspInit+0x250>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d156      	bne.n	8002318 <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800226a:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_ADC_MspInit+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	4a57      	ldr	r2, [pc, #348]	; (80023d0 <HAL_ADC_MspInit+0x240>)
 8002272:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002274:	4b56      	ldr	r3, [pc, #344]	; (80023d0 <HAL_ADC_MspInit+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10b      	bne.n	8002294 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4a54      	ldr	r2, [pc, #336]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	6153      	str	r3, [r2, #20]
 8002288:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b4f      	ldr	r3, [pc, #316]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800229a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229e:	6153      	str	r3, [r2, #20]
 80022a0:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = A5_Pin|A6_Pin|A7_Pin|A8_Pin;
 80022ac:	23f0      	movs	r3, #240	; 0xf0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b0:	2303      	movs	r3, #3
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c2:	f001 fe5b 	bl	8003f7c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022c8:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_ADC_MspInit+0x258>)
 80022ca:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022cc:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d2:	4b44      	ldr	r3, [pc, #272]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80022d8:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022f0:	2220      	movs	r2, #32
 80022f2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80022f4:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80022fa:	483a      	ldr	r0, [pc, #232]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 80022fc:	f001 fc14 	bl	8003b28 <HAL_DMA_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8002306:	f7ff ff13 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
 8002310:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_ADC_MspInit+0x254>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002316:	e0ce      	b.n	80024b6 <HAL_ADC_MspInit+0x326>
  else if(hadc->Instance==ADC3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a33      	ldr	r2, [pc, #204]	; (80023ec <HAL_ADC_MspInit+0x25c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d16e      	bne.n	8002400 <HAL_ADC_MspInit+0x270>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8002322:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_ADC_MspInit+0x260>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_ADC_MspInit+0x260>)
 800232a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_ADC_MspInit+0x260>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10b      	bne.n	800234c <HAL_ADC_MspInit+0x1bc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800233a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233e:	6153      	str	r3, [r2, #20]
 8002340:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002356:	6153      	str	r3, [r2, #20]
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = A9_Pin|A10_Pin;
 8002364:	2303      	movs	r3, #3
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002368:	2303      	movs	r3, #3
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002374:	4619      	mov	r1, r3
 8002376:	481f      	ldr	r0, [pc, #124]	; (80023f4 <HAL_ADC_MspInit+0x264>)
 8002378:	f001 fe00 	bl	8003f7c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 800237e:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_ADC_MspInit+0x26c>)
 8002380:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800238e:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 8002396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800239a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 800239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 80023a6:	2220      	movs	r2, #32
 80023a8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80023b0:	4811      	ldr	r0, [pc, #68]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 80023b2:	f001 fbb9 	bl	8003b28 <HAL_DMA_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_ADC_MspInit+0x230>
      Error_Handler();
 80023bc:	f7ff feb8 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
 80023c6:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_ADC_MspInit+0x268>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6253      	str	r3, [r2, #36]	; 0x24
}
 80023cc:	e073      	b.n	80024b6 <HAL_ADC_MspInit+0x326>
 80023ce:	bf00      	nop
 80023d0:	200002d4 	.word	0x200002d4
 80023d4:	40021000 	.word	0x40021000
 80023d8:	200041ac 	.word	0x200041ac
 80023dc:	40020008 	.word	0x40020008
 80023e0:	50000100 	.word	0x50000100
 80023e4:	200085d0 	.word	0x200085d0
 80023e8:	40020408 	.word	0x40020408
 80023ec:	50000400 	.word	0x50000400
 80023f0:	200002d8 	.word	0x200002d8
 80023f4:	48000400 	.word	0x48000400
 80023f8:	20003288 	.word	0x20003288
 80023fc:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <HAL_ADC_MspInit+0x330>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d155      	bne.n	80024b6 <HAL_ADC_MspInit+0x326>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800240a:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <HAL_ADC_MspInit+0x334>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <HAL_ADC_MspInit+0x334>)
 8002412:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_ADC_MspInit+0x334>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d10b      	bne.n	8002434 <HAL_ADC_MspInit+0x2a4>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_ADC_MspInit+0x338>)
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <HAL_ADC_MspInit+0x338>)
 8002422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002426:	6153      	str	r3, [r2, #20]
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_ADC_MspInit+0x338>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_ADC_MspInit+0x338>)
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <HAL_ADC_MspInit+0x338>)
 800243a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243e:	6153      	str	r3, [r2, #20]
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_ADC_MspInit+0x338>)
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AnalogV_Pin;
 800244c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002452:	2303      	movs	r3, #3
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AnalogV_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245e:	4619      	mov	r1, r3
 8002460:	481a      	ldr	r0, [pc, #104]	; (80024cc <HAL_ADC_MspInit+0x33c>)
 8002462:	f001 fd8b 	bl	8003f7c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 8002468:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_ADC_MspInit+0x344>)
 800246a:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 800246e:	2200      	movs	r2, #0
 8002470:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 8002480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002484:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 8002488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 8002490:	2220      	movs	r2, #32
 8002492:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800249a:	480d      	ldr	r0, [pc, #52]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 800249c:	f001 fb44 	bl	8003b28 <HAL_DMA_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_ADC_MspInit+0x31a>
      Error_Handler();
 80024a6:	f7ff fe43 	bl	8002130 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_ADC_MspInit+0x340>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80024b6:	bf00      	nop
 80024b8:	3740      	adds	r7, #64	; 0x40
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	50000500 	.word	0x50000500
 80024c4:	200002d8 	.word	0x200002d8
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	20002e64 	.word	0x20002e64
 80024d4:	4002041c 	.word	0x4002041c

080024d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e8:	d113      	bne.n	8002512 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_TIM_Base_MspInit+0x44>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a0b      	ldr	r2, [pc, #44]	; (800251c <HAL_TIM_Base_MspInit+0x44>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_TIM_Base_MspInit+0x44>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	201c      	movs	r0, #28
 8002508:	f001 fae4 	bl	8003ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800250c:	201c      	movs	r0, #28
 800250e:	f001 fafd 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a33      	ldr	r2, [pc, #204]	; (800260c <HAL_UART_MspInit+0xec>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12a      	bne.n	8002598 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002542:	4b33      	ldr	r3, [pc, #204]	; (8002610 <HAL_UART_MspInit+0xf0>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a32      	ldr	r2, [pc, #200]	; (8002610 <HAL_UART_MspInit+0xf0>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_UART_MspInit+0xf0>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_UART_MspInit+0xf0>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <HAL_UART_MspInit+0xf0>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	6153      	str	r3, [r2, #20]
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_UART_MspInit+0xf0>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002572:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002584:	2307      	movs	r3, #7
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002592:	f001 fcf3 	bl	8003f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002596:	e035      	b.n	8002604 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_UART_MspInit+0xf4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d130      	bne.n	8002604 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_UART_MspInit+0xf0>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <HAL_UART_MspInit+0xf0>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <HAL_UART_MspInit+0xf0>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_UART_MspInit+0xf0>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_UART_MspInit+0xf0>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6153      	str	r3, [r2, #20]
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_UART_MspInit+0xf0>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025dc:	2302      	movs	r3, #2
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025e4:	2307      	movs	r3, #7
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	480a      	ldr	r0, [pc, #40]	; (8002618 <HAL_UART_MspInit+0xf8>)
 80025f0:	f001 fcc4 	bl	8003f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2106      	movs	r1, #6
 80025f8:	2027      	movs	r0, #39	; 0x27
 80025fa:	f001 fa6b 	bl	8003ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025fe:	2027      	movs	r0, #39	; 0x27
 8002600:	f001 fa84 	bl	8003b0c <HAL_NVIC_EnableIRQ>
}
 8002604:	bf00      	nop
 8002606:	3730      	adds	r7, #48	; 0x30
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40013800 	.word	0x40013800
 8002610:	40021000 	.word	0x40021000
 8002614:	40004800 	.word	0x40004800
 8002618:	48000400 	.word	0x48000400

0800261c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	2037      	movs	r0, #55	; 0x37
 8002632:	f001 fa4f 	bl	8003ad4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002636:	2037      	movs	r0, #55	; 0x37
 8002638:	f001 fa68 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_InitTick+0xa0>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_InitTick+0xa0>)
 8002642:	f043 0320 	orr.w	r3, r3, #32
 8002646:	61d3      	str	r3, [r2, #28]
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_InitTick+0xa0>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002654:	f107 0210 	add.w	r2, r7, #16
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f002 ff5c 	bl	800551c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002664:	f002 ff16 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8002668:	4603      	mov	r3, r0
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_InitTick+0xa4>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9b      	lsrs	r3, r3, #18
 8002678:	3b01      	subs	r3, #1
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_InitTick+0xa8>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_InitTick+0xac>)
 8002680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_InitTick+0xa8>)
 8002684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002688:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_InitTick+0xa8>)
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_InitTick+0xa8>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_InitTick+0xa8>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <HAL_InitTick+0xa8>)
 800269e:	f003 f91f 	bl	80058e0 <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80026a8:	4806      	ldr	r0, [pc, #24]	; (80026c4 <HAL_InitTick+0xa8>)
 80026aa:	f003 f971 	bl	8005990 <HAL_TIM_Base_Start_IT>
 80026ae:	4603      	mov	r3, r0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3730      	adds	r7, #48	; 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	431bde83 	.word	0x431bde83
 80026c4:	20008d60 	.word	0x20008d60
 80026c8:	40001400 	.word	0x40001400

080026cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_UART_Transmit(&huart3, (uint8_t*)"#FAULTS", 7, 1000);
 80026e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e4:	2207      	movs	r2, #7
 80026e6:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HardFault_Handler+0x1c>)
 80026e8:	4804      	ldr	r0, [pc, #16]	; (80026fc <HardFault_Handler+0x20>)
 80026ea:	f003 fdd1 	bl	8006290 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80026ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026f2:	f000 f90d 	bl	8002910 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)"#FAULTS", 7, 1000);
 80026f6:	e7f3      	b.n	80026e0 <HardFault_Handler+0x4>
 80026f8:	0800cc58 	.word	0x0800cc58
 80026fc:	20002ea8 	.word	0x20002ea8

08002700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <MemManage_Handler+0x4>

08002706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <BusFault_Handler+0x4>

0800270c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <UsageFault_Handler+0x4>

08002712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <DMA1_Channel1_IRQHandler+0x10>)
 8002726:	f001 fb1c 	bl	8003d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200041ac 	.word	0x200041ac

08002734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <TIM2_IRQHandler+0x10>)
 800273a:	f003 f993 	bl	8005a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20008534 	.word	0x20008534

08002748 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart3, USART_ISR_RXNE) != RESET){
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <USART3_IRQHandler+0x24>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b20      	cmp	r3, #32
 8002758:	d102      	bne.n	8002760 <USART3_IRQHandler+0x18>
		//__HAL_UART_CLEAR_IDLEFLAG(&huart3);
		HAL_UART_RxCpltCallback(&huart3);
 800275a:	4804      	ldr	r0, [pc, #16]	; (800276c <USART3_IRQHandler+0x24>)
 800275c:	f7ff f84e 	bl	80017fc <HAL_UART_RxCpltCallback>
		//dma_uart_rx.timer = DMA_TIMEOUT_MS;
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <USART3_IRQHandler+0x24>)
 8002762:	f003 fec3 	bl	80064ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //__HAL_UART_CLEAR_IDLEFLAG(&huart3);
  /* USER CODE END USART3_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20002ea8 	.word	0x20002ea8

08002770 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <TIM7_IRQHandler+0x10>)
 8002776:	f003 f975 	bl	8005a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20008d60 	.word	0x20008d60

08002784 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <DMA2_Channel1_IRQHandler+0x10>)
 800278a:	f001 faea 	bl	8003d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200085d0 	.word	0x200085d0

08002798 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA2_Channel2_IRQHandler+0x10>)
 800279e:	f001 fae0 	bl	8003d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20002e64 	.word	0x20002e64

080027ac <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA2_Channel5_IRQHandler+0x10>)
 80027b2:	f001 fad6 	bl	8003d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20003288 	.word	0x20003288

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f008 f90a 	bl	800aa08 <__errno>
 80027f4:	4602      	mov	r2, r0
 80027f6:	230c      	movs	r3, #12
 80027f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000a000 	.word	0x2000a000
 8002820:	00000400 	.word	0x00000400
 8002824:	200002dc 	.word	0x200002dc
 8002828:	20008df8 	.word	0x20008df8

0800282c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <SystemInit+0x20>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <SystemInit+0x20>)
 8002838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800283c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002888 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <LoopForever+0x6>)
  ldr r1, =_edata
 8002856:	490e      	ldr	r1, [pc, #56]	; (8002890 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <LoopForever+0xe>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800285c:	e002      	b.n	8002864 <LoopCopyDataInit>

0800285e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002862:	3304      	adds	r3, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002868:	d3f9      	bcc.n	800285e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <LoopForever+0x12>)
  ldr r4, =_ebss
 800286c:	4c0b      	ldr	r4, [pc, #44]	; (800289c <LoopForever+0x16>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002870:	e001      	b.n	8002876 <LoopFillZerobss>

08002872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002874:	3204      	adds	r2, #4

08002876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002878:	d3fb      	bcc.n	8002872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800287a:	f7ff ffd7 	bl	800282c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287e:	f008 f8c9 	bl	800aa14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002882:	f7fe fabf 	bl	8000e04 <main>

08002886 <LoopForever>:

LoopForever:
    b LoopForever
 8002886:	e7fe      	b.n	8002886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002888:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002890:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002894:	0800d058 	.word	0x0800d058
  ldr r2, =_sbss
 8002898:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800289c:	20008df4 	.word	0x20008df4

080028a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028a0:	e7fe      	b.n	80028a0 <ADC1_2_IRQHandler>
	...

080028a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_Init+0x28>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_Init+0x28>)
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f001 f902 	bl	8003abe <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7ff feae 	bl	800261c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c0:	f7ff fc3e 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_IncTick+0x20>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x24>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_IncTick+0x24>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20008dac 	.word	0x20008dac

080028f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_GetTick+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20008dac 	.word	0x20008dac

08002910 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff ffee 	bl	80028f8 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d005      	beq.n	8002936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_Delay+0x40>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002936:	bf00      	nop
 8002938:	f7ff ffde 	bl	80028f8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d8f7      	bhi.n	8002938 <HAL_Delay+0x28>
  {
  }
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000008 	.word	0x20000008

08002954 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b09a      	sub	sp, #104	; 0x68
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e1c9      	b.n	8002d1c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d176      	bne.n	8002a88 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d152      	bne.n	8002a48 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fbe7 	bl	8002190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d13b      	bne.n	8002a48 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 ff67 	bl	80038a4 <ADC_Disable>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d12f      	bne.n	8002a48 <HAL_ADC_Init+0xe0>
 80029e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d12b      	bne.n	8002a48 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029f8:	f023 0302 	bic.w	r3, r3, #2
 80029fc:	f043 0202 	orr.w	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a12:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a22:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a24:	4b86      	ldr	r3, [pc, #536]	; (8002c40 <HAL_ADC_Init+0x2d8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a86      	ldr	r2, [pc, #536]	; (8002c44 <HAL_ADC_Init+0x2dc>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9a      	lsrs	r2, r3, #18
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a3a:	e002      	b.n	8002a42 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a64:	d110      	bne.n	8002a88 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f023 0312 	bic.w	r3, r3, #18
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 8136 	bne.w	8002d02 <HAL_ADC_Init+0x39a>
 8002a96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 8131 	bne.w	8002d02 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8129 	bne.w	8002d02 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ab8:	f043 0202 	orr.w	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_Init+0x16c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5e      	ldr	r2, [pc, #376]	; (8002c48 <HAL_ADC_Init+0x2e0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_Init+0x170>
 8002ad4:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_ADC_Init+0x2e4>)
 8002ad6:	e000      	b.n	8002ada <HAL_ADC_Init+0x172>
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_ADC_Init+0x2e8>)
 8002ada:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae4:	d102      	bne.n	8002aec <HAL_ADC_Init+0x184>
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_ADC_Init+0x2e0>)
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e01a      	b.n	8002b22 <HAL_ADC_Init+0x1ba>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a55      	ldr	r2, [pc, #340]	; (8002c48 <HAL_ADC_Init+0x2e0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d103      	bne.n	8002afe <HAL_ADC_Init+0x196>
 8002af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e011      	b.n	8002b22 <HAL_ADC_Init+0x1ba>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a54      	ldr	r2, [pc, #336]	; (8002c54 <HAL_ADC_Init+0x2ec>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <HAL_ADC_Init+0x1a6>
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_ADC_Init+0x2f0>)
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e009      	b.n	8002b22 <HAL_ADC_Init+0x1ba>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <HAL_ADC_Init+0x2f0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <HAL_ADC_Init+0x1b6>
 8002b18:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <HAL_ADC_Init+0x2ec>)
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e001      	b.n	8002b22 <HAL_ADC_Init+0x1ba>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_ADC_Init+0x1da>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x1da>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_Init+0x1dc>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d11c      	bne.n	8002b82 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d010      	beq.n	8002b70 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_ADC_Init+0x202>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Init+0x202>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_ADC_Init+0x204>
 8002b6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7e5b      	ldrb	r3, [r3, #25]
 8002b86:	035b      	lsls	r3, r3, #13
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b8c:	2a01      	cmp	r2, #1
 8002b8e:	d002      	beq.n	8002b96 <HAL_ADC_Init+0x22e>
 8002b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b94:	e000      	b.n	8002b98 <HAL_ADC_Init+0x230>
 8002b96:	2200      	movs	r2, #0
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d11b      	bne.n	8002bee <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7e5b      	ldrb	r3, [r3, #25]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	045a      	lsls	r2, r3, #17
 8002bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	663b      	str	r3, [r7, #96]	; 0x60
 8002bd0:	e00d      	b.n	8002bee <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d03a      	beq.n	8002c6c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <HAL_ADC_Init+0x2ec>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_Init+0x2a2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_ADC_Init+0x2f0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d128      	bne.n	8002c5c <HAL_ADC_Init+0x2f4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002c12:	d012      	beq.n	8002c3a <HAL_ADC_Init+0x2d2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1c:	d00a      	beq.n	8002c34 <HAL_ADC_Init+0x2cc>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002c26:	d002      	beq.n	8002c2e <HAL_ADC_Init+0x2c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	e018      	b.n	8002c60 <HAL_ADC_Init+0x2f8>
 8002c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c32:	e015      	b.n	8002c60 <HAL_ADC_Init+0x2f8>
 8002c34:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002c38:	e012      	b.n	8002c60 <HAL_ADC_Init+0x2f8>
 8002c3a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002c3e:	e00f      	b.n	8002c60 <HAL_ADC_Init+0x2f8>
 8002c40:	20000000 	.word	0x20000000
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	50000100 	.word	0x50000100
 8002c4c:	50000300 	.word	0x50000300
 8002c50:	50000700 	.word	0x50000700
 8002c54:	50000400 	.word	0x50000400
 8002c58:	50000500 	.word	0x50000500
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c64:	4313      	orrs	r3, r2
 8002c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d114      	bne.n	8002ca4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c88:	f023 0302 	bic.w	r3, r3, #2
 8002c8c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7e1b      	ldrb	r3, [r3, #24]
 8002c92:	039a      	lsls	r2, r3, #14
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_ADC_Init+0x3bc>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f023 010f 	bic.w	r1, r3, #15
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	1e5a      	subs	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd8:	e007      	b.n	8002cea <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 020f 	bic.w	r2, r2, #15
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f023 0303 	bic.w	r3, r3, #3
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8002d00:	e00a      	b.n	8002d18 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f023 0312 	bic.w	r3, r3, #18
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002d18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3768      	adds	r7, #104	; 0x68
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fff0c007 	.word	0xfff0c007

08002d28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80f7 	bne.w	8002f36 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_Start_DMA+0x2e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0f2      	b.n	8002f3c <HAL_ADC_Start_DMA+0x214>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d66:	d004      	beq.n	8002d72 <HAL_ADC_Start_DMA+0x4a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a75      	ldr	r2, [pc, #468]	; (8002f44 <HAL_ADC_Start_DMA+0x21c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d109      	bne.n	8002d86 <HAL_ADC_Start_DMA+0x5e>
 8002d72:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <HAL_ADC_Start_DMA+0x220>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e008      	b.n	8002d98 <HAL_ADC_Start_DMA+0x70>
 8002d86:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <HAL_ADC_Start_DMA+0x224>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80c5 	beq.w	8002f28 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fd22 	bl	80037e8 <ADC_Enable>
 8002da4:	4603      	mov	r3, r0
 8002da6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 80b7 	bne.w	8002f1e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dcc:	d004      	beq.n	8002dd8 <HAL_ADC_Start_DMA+0xb0>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5c      	ldr	r2, [pc, #368]	; (8002f44 <HAL_ADC_Start_DMA+0x21c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d106      	bne.n	8002de6 <HAL_ADC_Start_DMA+0xbe>
 8002dd8:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_ADC_Start_DMA+0x220>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_ADC_Start_DMA+0xde>
 8002de4:	e005      	b.n	8002df2 <HAL_ADC_Start_DMA+0xca>
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_ADC_Start_DMA+0x224>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_ADC_Start_DMA+0xde>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADC_Start_DMA+0xde>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_ADC_Start_DMA+0x228>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d115      	bne.n	8002e32 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d036      	beq.n	8002e8e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e30:	e02d      	b.n	8002e8e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e46:	d004      	beq.n	8002e52 <HAL_ADC_Start_DMA+0x12a>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a3d      	ldr	r2, [pc, #244]	; (8002f44 <HAL_ADC_Start_DMA+0x21c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10a      	bne.n	8002e68 <HAL_ADC_Start_DMA+0x140>
 8002e52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e008      	b.n	8002e7a <HAL_ADC_Start_DMA+0x152>
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_ADC_Start_DMA+0x228>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9a:	d106      	bne.n	8002eaa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	f023 0206 	bic.w	r2, r3, #6
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ea8:	e002      	b.n	8002eb0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	4a25      	ldr	r2, [pc, #148]	; (8002f54 <HAL_ADC_Start_DMA+0x22c>)
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_ADC_Start_DMA+0x230>)
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	4a23      	ldr	r2, [pc, #140]	; (8002f5c <HAL_ADC_Start_DMA+0x234>)
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	221c      	movs	r2, #28
 8002ed6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0210 	orr.w	r2, r2, #16
 8002ee6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3340      	adds	r3, #64	; 0x40
 8002f02:	4619      	mov	r1, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f000 fe55 	bl	8003bb6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0204 	orr.w	r2, r2, #4
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	e00d      	b.n	8002f3a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f26:	e008      	b.n	8002f3a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f34:	e001      	b.n	8002f3a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	50000100 	.word	0x50000100
 8002f48:	50000300 	.word	0x50000300
 8002f4c:	50000700 	.word	0x50000700
 8002f50:	50000400 	.word	0x50000400
 8002f54:	0800371d 	.word	0x0800371d
 8002f58:	08003797 	.word	0x08003797
 8002f5c:	080037b3 	.word	0x080037b3

08002f60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b09b      	sub	sp, #108	; 0x6c
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x22>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e2cb      	b.n	800351a <HAL_ADC_ConfigChannel+0x5ba>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f040 82af 	bne.w	80034f8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d81c      	bhi.n	8002fdc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	231f      	movs	r3, #31
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	4019      	ands	r1, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fda:	e063      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	d81e      	bhi.n	8003022 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	3b1e      	subs	r3, #30
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4019      	ands	r1, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	3b1e      	subs	r3, #30
 8003014:	fa00 f203 	lsl.w	r2, r0, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	; 0x34
 8003020:	e040      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b0e      	cmp	r3, #14
 8003028:	d81e      	bhi.n	8003068 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	3b3c      	subs	r3, #60	; 0x3c
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	4019      	ands	r1, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	3b3c      	subs	r3, #60	; 0x3c
 800305a:	fa00 f203 	lsl.w	r2, r0, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	639a      	str	r2, [r3, #56]	; 0x38
 8003066:	e01d      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	3b5a      	subs	r3, #90	; 0x5a
 800307c:	221f      	movs	r2, #31
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	4019      	ands	r1, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	3b5a      	subs	r3, #90	; 0x5a
 8003098:	fa00 f203 	lsl.w	r2, r0, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 80e5 	bne.w	800327e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b09      	cmp	r3, #9
 80030ba:	d91c      	bls.n	80030f6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6999      	ldr	r1, [r3, #24]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	3b1e      	subs	r3, #30
 80030ce:	2207      	movs	r2, #7
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	4019      	ands	r1, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6898      	ldr	r0, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	3b1e      	subs	r3, #30
 80030e8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	619a      	str	r2, [r3, #24]
 80030f4:	e019      	b.n	800312a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6959      	ldr	r1, [r3, #20]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	2207      	movs	r2, #7
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	4019      	ands	r1, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6898      	ldr	r0, [r3, #8]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	fa00 f203 	lsl.w	r2, r0, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	3b01      	subs	r3, #1
 8003148:	2b03      	cmp	r3, #3
 800314a:	d84f      	bhi.n	80031ec <HAL_ADC_ConfigChannel+0x28c>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <HAL_ADC_ConfigChannel+0x1f4>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003165 	.word	0x08003165
 8003158:	08003187 	.word	0x08003187
 800315c:	080031a9 	.word	0x080031a9
 8003160:	080031cb 	.word	0x080031cb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800316a:	4b9f      	ldr	r3, [pc, #636]	; (80033e8 <HAL_ADC_ConfigChannel+0x488>)
 800316c:	4013      	ands	r3, r2
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	0691      	lsls	r1, r2, #26
 8003174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003176:	430a      	orrs	r2, r1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003182:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003184:	e07e      	b.n	8003284 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800318c:	4b96      	ldr	r3, [pc, #600]	; (80033e8 <HAL_ADC_ConfigChannel+0x488>)
 800318e:	4013      	ands	r3, r2
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	0691      	lsls	r1, r2, #26
 8003196:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003198:	430a      	orrs	r2, r1
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031a4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031a6:	e06d      	b.n	8003284 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031ae:	4b8e      	ldr	r3, [pc, #568]	; (80033e8 <HAL_ADC_ConfigChannel+0x488>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	0691      	lsls	r1, r2, #26
 80031b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031ba:	430a      	orrs	r2, r1
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031c6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031c8:	e05c      	b.n	8003284 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031d0:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_ADC_ConfigChannel+0x488>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	0691      	lsls	r1, r2, #26
 80031da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031dc:	430a      	orrs	r2, r1
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031e8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031ea:	e04b      	b.n	8003284 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	069b      	lsls	r3, r3, #26
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d107      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800320e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	069b      	lsls	r3, r3, #26
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003232:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	069b      	lsls	r3, r3, #26
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003256:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	069b      	lsls	r3, r3, #26
 8003268:	429a      	cmp	r2, r3
 800326a:	d10a      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800327a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800327c:	e001      	b.n	8003282 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003282:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d108      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x344>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x344>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x346>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 8131 	bne.w	800350e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d00f      	beq.n	80032d4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80032d2:	e049      	b.n	8003368 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b09      	cmp	r3, #9
 80032f4:	d91c      	bls.n	8003330 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6999      	ldr	r1, [r3, #24]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	3b1b      	subs	r3, #27
 8003308:	2207      	movs	r2, #7
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	4019      	ands	r1, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6898      	ldr	r0, [r3, #8]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	3b1b      	subs	r3, #27
 8003322:	fa00 f203 	lsl.w	r2, r0, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	619a      	str	r2, [r3, #24]
 800332e:	e01b      	b.n	8003368 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6959      	ldr	r1, [r3, #20]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	2207      	movs	r2, #7
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	4019      	ands	r1, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6898      	ldr	r0, [r3, #8]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	fa00 f203 	lsl.w	r2, r0, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003370:	d004      	beq.n	800337c <HAL_ADC_ConfigChannel+0x41c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_ADC_ConfigChannel+0x48c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x420>
 800337c:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <HAL_ADC_ConfigChannel+0x490>)
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x422>
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <HAL_ADC_ConfigChannel+0x494>)
 8003382:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b10      	cmp	r3, #16
 800338a:	d105      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800338c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800339c:	2b11      	cmp	r3, #17
 800339e:	d105      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033b0:	2b12      	cmp	r3, #18
 80033b2:	f040 80ac 	bne.w	800350e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80033b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 80a5 	bne.w	800350e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033cc:	d102      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x474>
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_ADC_ConfigChannel+0x48c>)
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e023      	b.n	800341c <HAL_ADC_ConfigChannel+0x4bc>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_ADC_ConfigChannel+0x48c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10c      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x498>
 80033de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e01a      	b.n	800341c <HAL_ADC_ConfigChannel+0x4bc>
 80033e6:	bf00      	nop
 80033e8:	83fff000 	.word	0x83fff000
 80033ec:	50000100 	.word	0x50000100
 80033f0:	50000300 	.word	0x50000300
 80033f4:	50000700 	.word	0x50000700
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4a      	ldr	r2, [pc, #296]	; (8003528 <HAL_ADC_ConfigChannel+0x5c8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d102      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x4a8>
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_ADC_ConfigChannel+0x5cc>)
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e009      	b.n	800341c <HAL_ADC_ConfigChannel+0x4bc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a47      	ldr	r2, [pc, #284]	; (800352c <HAL_ADC_ConfigChannel+0x5cc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d102      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x4b8>
 8003412:	4b45      	ldr	r3, [pc, #276]	; (8003528 <HAL_ADC_ConfigChannel+0x5c8>)
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e001      	b.n	800341c <HAL_ADC_ConfigChannel+0x4bc>
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d108      	bne.n	800343c <HAL_ADC_ConfigChannel+0x4dc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x4dc>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_ADC_ConfigChannel+0x4de>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d150      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003442:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x504>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x504>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_ADC_ConfigChannel+0x506>
 8003464:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13c      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b10      	cmp	r3, #16
 8003470:	d11d      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x54e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800347a:	d118      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003486:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003488:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_ADC_ConfigChannel+0x5d0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a29      	ldr	r2, [pc, #164]	; (8003534 <HAL_ADC_ConfigChannel+0x5d4>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9a      	lsrs	r2, r3, #18
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800349e:	e002      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f9      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034ac:	e02e      	b.n	800350c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b11      	cmp	r3, #17
 80034b4:	d10b      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x56e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034be:	d106      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80034c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034cc:	e01e      	b.n	800350c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b12      	cmp	r3, #18
 80034d4:	d11a      	bne.n	800350c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034e2:	e013      	b.n	800350c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034f6:	e00a      	b.n	800350e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800350a:	e000      	b.n	800350e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800350c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003516:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800351a:	4618      	mov	r0, r3
 800351c:	376c      	adds	r7, #108	; 0x6c
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	50000400 	.word	0x50000400
 800352c:	50000500 	.word	0x50000500
 8003530:	20000000 	.word	0x20000000
 8003534:	431bde83 	.word	0x431bde83

08003538 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003538:	b480      	push	{r7}
 800353a:	b099      	sub	sp, #100	; 0x64
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003550:	d102      	bne.n	8003558 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003552:	4b6d      	ldr	r3, [pc, #436]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	e01a      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6a      	ldr	r2, [pc, #424]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d103      	bne.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	e011      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a67      	ldr	r2, [pc, #412]	; (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	e009      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a64      	ldr	r2, [pc, #400]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003584:	4b61      	ldr	r3, [pc, #388]	; (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	e001      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b0      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0a9      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 808d 	bne.w	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8086 	bne.w	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d4:	d004      	beq.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035e0:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80035e2:	e000      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035e4:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80035e6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d040      	beq.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003602:	035b      	lsls	r3, r3, #13
 8003604:	430b      	orrs	r3, r1
 8003606:	431a      	orrs	r2, r3
 8003608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800360a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d108      	bne.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d15c      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800364e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003650:	2b00      	cmp	r3, #0
 8003652:	d14b      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800365c:	f023 030f 	bic.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	6811      	ldr	r1, [r2, #0]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	430a      	orrs	r2, r1
 800366a:	431a      	orrs	r2, r3
 800366c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003670:	e03c      	b.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800367a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800367c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d108      	bne.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d123      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80036c0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d112      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80036c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036ce:	f023 030f 	bic.w	r3, r3, #15
 80036d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036d6:	e009      	b.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80036ea:	e000      	b.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ec:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80036fa:	4618      	mov	r0, r3
 80036fc:	3764      	adds	r7, #100	; 0x64
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	50000100 	.word	0x50000100
 800370c:	50000400 	.word	0x50000400
 8003710:	50000500 	.word	0x50000500
 8003714:	50000300 	.word	0x50000300
 8003718:	50000700 	.word	0x50000700

0800371c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003732:	2b00      	cmp	r3, #0
 8003734:	d126      	bne.n	8003784 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800374c:	2b00      	cmp	r3, #0
 800374e:	d115      	bne.n	800377c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003754:	2b00      	cmp	r3, #0
 8003756:	d111      	bne.n	800377c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fd ffed 	bl	800175c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003782:	e004      	b.n	800378e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7fe f81f 	bl	80017e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff f8bb 	bl	8002954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <ADC_Enable+0x2c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <ADC_Enable+0x2c>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <ADC_Enable+0x2e>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d13c      	bne.n	8003894 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <ADC_Enable+0xb8>)
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e028      	b.n	8003896 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003854:	f7ff f850 	bl	80028f8 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800385a:	e014      	b.n	8003886 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800385c:	f7ff f84c 	bl	80028f8 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d90d      	bls.n	8003886 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d1e3      	bne.n	800385c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	8000003f 	.word	0x8000003f

080038a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <ADC_Disable+0x2c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <ADC_Disable+0x2c>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <ADC_Disable+0x2e>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d040      	beq.n	8003958 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030d 	and.w	r3, r3, #13
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10f      	bne.n	8003904 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0202 	orr.w	r2, r2, #2
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2203      	movs	r2, #3
 80038fa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80038fc:	f7fe fffc 	bl	80028f8 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003902:	e022      	b.n	800394a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e01c      	b.n	800395a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003920:	f7fe ffea 	bl	80028f8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d90d      	bls.n	800394a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0210 	orr.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e007      	b.n	800395a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d0e3      	beq.n	8003920 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	; (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff ff4c 	bl	8003964 <__NVIC_SetPriorityGrouping>
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae6:	f7ff ff61 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003aea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f7ff ffb1 	bl	8003a58 <NVIC_EncodePriority>
 8003af6:	4602      	mov	r2, r0
 8003af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff80 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b04:	bf00      	nop
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff54 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e037      	b.n	8003bae <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b54:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b7 	bl	8003f04 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}  
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_DMA_Start_IT+0x20>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e04a      	b.n	8003c6c <HAL_DMA_Start_IT+0xb6>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d13a      	bne.n	8003c5e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f94b 	bl	8003ea8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 020e 	orr.w	r2, r2, #14
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e00f      	b.n	8003c4c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 020a 	orr.w	r2, r2, #10
 8003c3a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e005      	b.n	8003c6a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
 8003c68:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d008      	beq.n	8003c98 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e020      	b.n	8003cda <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 020e 	bic.w	r2, r2, #14
 8003ca6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d005      	beq.n	8003d08 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2204      	movs	r2, #4
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e027      	b.n	8003d58 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020e 	bic.w	r2, r2, #14
 8003d16:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f202 	lsl.w	r2, r1, r2
 8003d36:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
    } 
  }
  return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2204      	movs	r2, #4
 8003d80:	409a      	lsls	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d024      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x72>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01f      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d107      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0204 	bic.w	r2, r2, #4
 8003db0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2104      	movs	r1, #4
 8003dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003dd2:	e065      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2202      	movs	r2, #2
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02c      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xdc>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d027      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 020a 	bic.w	r2, r2, #10
 8003e0a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e22:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d035      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003e3c:	e030      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2208      	movs	r2, #8
 8003e44:	409a      	lsls	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d028      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 020e 	bic.w	r2, r2, #14
 8003e66:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	2101      	movs	r1, #1
 8003e72:	fa01 f202 	lsl.w	r2, r1, r2
 8003e76:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
    }
  }
}  
 8003e9e:	e7ff      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x13e>
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d108      	bne.n	8003ee8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ee6:	e007      	b.n	8003ef8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <DMA_CalcBaseAndBitshift+0x60>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d80f      	bhi.n	8003f38 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <DMA_CalcBaseAndBitshift+0x64>)
 8003f20:	4413      	add	r3, r2
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <DMA_CalcBaseAndBitshift+0x68>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	009a      	lsls	r2, r3, #2
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <DMA_CalcBaseAndBitshift+0x6c>)
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003f36:	e00e      	b.n	8003f56 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <DMA_CalcBaseAndBitshift+0x70>)
 8003f40:	4413      	add	r3, r2
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <DMA_CalcBaseAndBitshift+0x68>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	009a      	lsls	r2, r3, #2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <DMA_CalcBaseAndBitshift+0x74>)
 8003f54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40020407 	.word	0x40020407
 8003f68:	bffdfff8 	.word	0xbffdfff8
 8003f6c:	cccccccd 	.word	0xcccccccd
 8003f70:	40020000 	.word	0x40020000
 8003f74:	bffdfbf8 	.word	0xbffdfbf8
 8003f78:	40020400 	.word	0x40020400

08003f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8a:	e154      	b.n	8004236 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8146 	beq.w	8004230 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d00b      	beq.n	8003fc4 <HAL_GPIO_Init+0x48>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d007      	beq.n	8003fc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fb8:	2b11      	cmp	r3, #17
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b12      	cmp	r3, #18
 8003fc2:	d130      	bne.n	8004026 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	f003 0201 	and.w	r2, r3, #1
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2203      	movs	r2, #3
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0xea>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b12      	cmp	r3, #18
 8004064:	d123      	bne.n	80040ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	220f      	movs	r2, #15
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	08da      	lsrs	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3208      	adds	r2, #8
 80040a8:	6939      	ldr	r1, [r7, #16]
 80040aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2203      	movs	r2, #3
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 0203 	and.w	r2, r3, #3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80a0 	beq.w	8004230 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f0:	4b58      	ldr	r3, [pc, #352]	; (8004254 <HAL_GPIO_Init+0x2d8>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4a57      	ldr	r2, [pc, #348]	; (8004254 <HAL_GPIO_Init+0x2d8>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6193      	str	r3, [r2, #24]
 80040fc:	4b55      	ldr	r3, [pc, #340]	; (8004254 <HAL_GPIO_Init+0x2d8>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004108:	4a53      	ldr	r2, [pc, #332]	; (8004258 <HAL_GPIO_Init+0x2dc>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	3302      	adds	r3, #2
 8004110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	220f      	movs	r2, #15
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4013      	ands	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004132:	d019      	beq.n	8004168 <HAL_GPIO_Init+0x1ec>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a49      	ldr	r2, [pc, #292]	; (800425c <HAL_GPIO_Init+0x2e0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_GPIO_Init+0x1e8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a48      	ldr	r2, [pc, #288]	; (8004260 <HAL_GPIO_Init+0x2e4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00d      	beq.n	8004160 <HAL_GPIO_Init+0x1e4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a47      	ldr	r2, [pc, #284]	; (8004264 <HAL_GPIO_Init+0x2e8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <HAL_GPIO_Init+0x1e0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a46      	ldr	r2, [pc, #280]	; (8004268 <HAL_GPIO_Init+0x2ec>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <HAL_GPIO_Init+0x1dc>
 8004154:	2304      	movs	r3, #4
 8004156:	e008      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 8004158:	2305      	movs	r3, #5
 800415a:	e006      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 800415c:	2303      	movs	r3, #3
 800415e:	e004      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 8004160:	2302      	movs	r3, #2
 8004162:	e002      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 8004168:	2300      	movs	r3, #0
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	f002 0203 	and.w	r2, r2, #3
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	4093      	lsls	r3, r2
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800417a:	4937      	ldr	r1, [pc, #220]	; (8004258 <HAL_GPIO_Init+0x2dc>)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004188:	4b38      	ldr	r3, [pc, #224]	; (800426c <HAL_GPIO_Init+0x2f0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43db      	mvns	r3, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80041ac:	4a2f      	ldr	r2, [pc, #188]	; (800426c <HAL_GPIO_Init+0x2f0>)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041b2:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_GPIO_Init+0x2f0>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80041d6:	4a25      	ldr	r2, [pc, #148]	; (800426c <HAL_GPIO_Init+0x2f0>)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041dc:	4b23      	ldr	r3, [pc, #140]	; (800426c <HAL_GPIO_Init+0x2f0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004200:	4a1a      	ldr	r2, [pc, #104]	; (800426c <HAL_GPIO_Init+0x2f0>)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004206:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_GPIO_Init+0x2f0>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	43db      	mvns	r3, r3
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_GPIO_Init+0x2f0>)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f aea3 	bne.w	8003f8c <HAL_GPIO_Init+0x10>
  }
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	40010000 	.word	0x40010000
 800425c:	48000400 	.word	0x48000400
 8004260:	48000800 	.word	0x48000800
 8004264:	48000c00 	.word	0x48000c00
 8004268:	48001000 	.word	0x48001000
 800426c:	40010400 	.word	0x40010400

08004270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]
 800427c:	4613      	mov	r3, r2
 800427e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004280:	787b      	ldrb	r3, [r7, #1]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004286:	887a      	ldrh	r2, [r7, #2]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800428c:	e002      	b.n	8004294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800428e:	887a      	ldrh	r2, [r7, #2]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ac:	1d3b      	adds	r3, r7, #4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f000 bef4 	b.w	80050a2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 816a 	beq.w	800459e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042ca:	4bb3      	ldr	r3, [pc, #716]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d00c      	beq.n	80042f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042d6:	4bb0      	ldr	r3, [pc, #704]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d159      	bne.n	8004396 <HAL_RCC_OscConfig+0xf6>
 80042e2:	4bad      	ldr	r3, [pc, #692]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d152      	bne.n	8004396 <HAL_RCC_OscConfig+0xf6>
 80042f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004304:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	fab3 f383 	clz	r3, r3
 800430c:	b2db      	uxtb	r3, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d102      	bne.n	8004322 <HAL_RCC_OscConfig+0x82>
 800431c:	4b9e      	ldr	r3, [pc, #632]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	e015      	b.n	800434e <HAL_RCC_OscConfig+0xae>
 8004322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004326:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800433a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800433e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800434a:	4b93      	ldr	r3, [pc, #588]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004352:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004356:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800435a:	fa92 f2a2 	rbit	r2, r2
 800435e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004362:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004366:	fab2 f282 	clz	r2, r2
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	f042 0220 	orr.w	r2, r2, #32
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	f002 021f 	and.w	r2, r2, #31
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f202 	lsl.w	r2, r1, r2
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 810c 	beq.w	800459c <HAL_RCC_OscConfig+0x2fc>
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 8106 	bne.w	800459c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f000 be86 	b.w	80050a2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x110>
 80043a2:	4b7d      	ldr	r3, [pc, #500]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7c      	ldr	r2, [pc, #496]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e030      	b.n	8004412 <HAL_RCC_OscConfig+0x172>
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x134>
 80043ba:	4b77      	ldr	r3, [pc, #476]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a76      	ldr	r2, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b74      	ldr	r3, [pc, #464]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a73      	ldr	r2, [pc, #460]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e01e      	b.n	8004412 <HAL_RCC_OscConfig+0x172>
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_OscConfig+0x15a>
 80043e0:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a6c      	ldr	r2, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a69      	ldr	r2, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e00b      	b.n	8004412 <HAL_RCC_OscConfig+0x172>
 80043fa:	4b67      	ldr	r3, [pc, #412]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a66      	ldr	r2, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b64      	ldr	r3, [pc, #400]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a63      	ldr	r2, [pc, #396]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 800440c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	f023 020f 	bic.w	r2, r3, #15
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	495d      	ldr	r1, [pc, #372]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d059      	beq.n	80044e4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fe fa62 	bl	80028f8 <HAL_GetTick>
 8004434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443a:	f7fe fa5d 	bl	80028f8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d902      	bls.n	8004450 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	f000 be29 	b.w	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004454:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004464:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004468:	fab3 f383 	clz	r3, r3
 800446c:	b2db      	uxtb	r3, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <HAL_RCC_OscConfig+0x1e2>
 800447c:	4b46      	ldr	r3, [pc, #280]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	e015      	b.n	80044ae <HAL_RCC_OscConfig+0x20e>
 8004482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004486:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800449a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800449e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80044b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80044ba:	fa92 f2a2 	rbit	r2, r2
 80044be:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80044c2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80044c6:	fab2 f282 	clz	r2, r2
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	f042 0220 	orr.w	r2, r2, #32
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	f002 021f 	and.w	r2, r2, #31
 80044d6:	2101      	movs	r1, #1
 80044d8:	fa01 f202 	lsl.w	r2, r1, r2
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ab      	beq.n	800443a <HAL_RCC_OscConfig+0x19a>
 80044e2:	e05c      	b.n	800459e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fa08 	bl	80028f8 <HAL_GetTick>
 80044e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ec:	e00a      	b.n	8004504 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ee:	f7fe fa03 	bl	80028f8 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d902      	bls.n	8004504 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	f000 bdcf 	b.w	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004508:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004518:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_OscConfig+0x296>
 8004530:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x2c2>
 8004536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800453a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004542:	fa93 f3a3 	rbit	r3, r3
 8004546:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800454a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800454e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004552:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <HAL_RCC_OscConfig+0x2f8>)
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004566:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800456a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800456e:	fa92 f2a2 	rbit	r2, r2
 8004572:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004576:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800457a:	fab2 f282 	clz	r2, r2
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f042 0220 	orr.w	r2, r2, #32
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	f002 021f 	and.w	r2, r2, #31
 800458a:	2101      	movs	r1, #1
 800458c:	fa01 f202 	lsl.w	r2, r1, r2
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ab      	bne.n	80044ee <HAL_RCC_OscConfig+0x24e>
 8004596:	e002      	b.n	800459e <HAL_RCC_OscConfig+0x2fe>
 8004598:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 816f 	beq.w	800488c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045ae:	4bd0      	ldr	r3, [pc, #832]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045ba:	4bcd      	ldr	r3, [pc, #820]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d16c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x400>
 80045c6:	4bca      	ldr	r3, [pc, #808]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d166      	bne.n	80046a0 <HAL_RCC_OscConfig+0x400>
 80045d2:	2302      	movs	r3, #2
 80045d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80045e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_RCC_OscConfig+0x362>
 80045fc:	4bbc      	ldr	r3, [pc, #752]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	e013      	b.n	800462a <HAL_RCC_OscConfig+0x38a>
 8004602:	2302      	movs	r3, #2
 8004604:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004614:	2302      	movs	r3, #2
 8004616:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800461a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004626:	4bb2      	ldr	r3, [pc, #712]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2202      	movs	r2, #2
 800462c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004630:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004634:	fa92 f2a2 	rbit	r2, r2
 8004638:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800463c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004640:	fab2 f282 	clz	r2, r2
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	f042 0220 	orr.w	r2, r2, #32
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	f002 021f 	and.w	r2, r2, #31
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f202 	lsl.w	r2, r1, r2
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <HAL_RCC_OscConfig+0x3cc>
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d002      	beq.n	800466c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f000 bd1b 	b.w	80050a2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466c:	4ba0      	ldr	r3, [pc, #640]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004674:	1d3b      	adds	r3, r7, #4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	21f8      	movs	r1, #248	; 0xf8
 800467c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004684:	fa91 f1a1 	rbit	r1, r1
 8004688:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800468c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004690:	fab1 f181 	clz	r1, r1
 8004694:	b2c9      	uxtb	r1, r1
 8004696:	408b      	lsls	r3, r1
 8004698:	4995      	ldr	r1, [pc, #596]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	e0f5      	b.n	800488c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a0:	1d3b      	adds	r3, r7, #4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8085 	beq.w	80047b6 <HAL_RCC_OscConfig+0x516>
 80046ac:	2301      	movs	r3, #1
 80046ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80046be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	461a      	mov	r2, r3
 80046d4:	2301      	movs	r3, #1
 80046d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe f90e 	bl	80028f8 <HAL_GetTick>
 80046dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fe f909 	bl	80028f8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d902      	bls.n	80046f8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	f000 bcd5 	b.w	80050a2 <HAL_RCC_OscConfig+0xe02>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800470a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d102      	bne.n	8004728 <HAL_RCC_OscConfig+0x488>
 8004722:	4b73      	ldr	r3, [pc, #460]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	e013      	b.n	8004750 <HAL_RCC_OscConfig+0x4b0>
 8004728:	2302      	movs	r3, #2
 800472a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800473a:	2302      	movs	r3, #2
 800473c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004740:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004744:	fa93 f3a3 	rbit	r3, r3
 8004748:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800474c:	4b68      	ldr	r3, [pc, #416]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2202      	movs	r2, #2
 8004752:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004756:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800475a:	fa92 f2a2 	rbit	r2, r2
 800475e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004762:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004766:	fab2 f282 	clz	r2, r2
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	f042 0220 	orr.w	r2, r2, #32
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	f002 021f 	and.w	r2, r2, #31
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f202 	lsl.w	r2, r1, r2
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0af      	beq.n	80046e2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004782:	4b5b      	ldr	r3, [pc, #364]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	21f8      	movs	r1, #248	; 0xf8
 8004792:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800479a:	fa91 f1a1 	rbit	r1, r1
 800479e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80047a2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80047a6:	fab1 f181 	clz	r1, r1
 80047aa:	b2c9      	uxtb	r1, r1
 80047ac:	408b      	lsls	r3, r1
 80047ae:	4950      	ldr	r1, [pc, #320]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	600b      	str	r3, [r1, #0]
 80047b4:	e06a      	b.n	800488c <HAL_RCC_OscConfig+0x5ec>
 80047b6:	2301      	movs	r3, #1
 80047b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80047c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	461a      	mov	r2, r3
 80047de:	2300      	movs	r3, #0
 80047e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fe f889 	bl	80028f8 <HAL_GetTick>
 80047e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ec:	f7fe f884 	bl	80028f8 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d902      	bls.n	8004802 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	f000 bc50 	b.w	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004802:	2302      	movs	r3, #2
 8004804:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004818:	fab3 f383 	clz	r3, r3
 800481c:	b2db      	uxtb	r3, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d102      	bne.n	8004832 <HAL_RCC_OscConfig+0x592>
 800482c:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	e013      	b.n	800485a <HAL_RCC_OscConfig+0x5ba>
 8004832:	2302      	movs	r3, #2
 8004834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004844:	2302      	movs	r3, #2
 8004846:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800484a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_RCC_OscConfig+0x650>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2202      	movs	r2, #2
 800485c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004860:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004864:	fa92 f2a2 	rbit	r2, r2
 8004868:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800486c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004870:	fab2 f282 	clz	r2, r2
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	f042 0220 	orr.w	r2, r2, #32
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	f002 021f 	and.w	r2, r2, #31
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f202 	lsl.w	r2, r1, r2
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1af      	bne.n	80047ec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80da 	beq.w	8004a50 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800489c:	1d3b      	adds	r3, r7, #4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d069      	beq.n	800497a <HAL_RCC_OscConfig+0x6da>
 80048a6:	2301      	movs	r3, #1
 80048a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80048b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_OscConfig+0x654>)
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	461a      	mov	r2, r3
 80048cc:	2301      	movs	r3, #1
 80048ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d0:	f7fe f812 	bl	80028f8 <HAL_GetTick>
 80048d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d8:	e00e      	b.n	80048f8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048da:	f7fe f80d 	bl	80028f8 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d906      	bls.n	80048f8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e3d9      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	10908120 	.word	0x10908120
 80048f8:	2302      	movs	r3, #2
 80048fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800490a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800490e:	2202      	movs	r2, #2
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	fa93 f2a3 	rbit	r2, r3
 800491c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004926:	2202      	movs	r2, #2
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	fa93 f2a3 	rbit	r2, r3
 8004934:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004938:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	4ba5      	ldr	r3, [pc, #660]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 800493c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004942:	2102      	movs	r1, #2
 8004944:	6019      	str	r1, [r3, #0]
 8004946:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	fa93 f1a3 	rbit	r1, r3
 8004950:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004954:	6019      	str	r1, [r3, #0]
  return result;
 8004956:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0b0      	beq.n	80048da <HAL_RCC_OscConfig+0x63a>
 8004978:	e06a      	b.n	8004a50 <HAL_RCC_OscConfig+0x7b0>
 800497a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	fa93 f2a3 	rbit	r2, r3
 800498c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004990:	601a      	str	r2, [r3, #0]
  return result;
 8004992:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004996:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004998:	fab3 f383 	clz	r3, r3
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	4b8c      	ldr	r3, [pc, #560]	; (8004bd4 <HAL_RCC_OscConfig+0x934>)
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	461a      	mov	r2, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ac:	f7fd ffa4 	bl	80028f8 <HAL_GetTick>
 80049b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	e009      	b.n	80049ca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fd ff9f 	bl	80028f8 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e36b      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
 80049ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80049ce:	2202      	movs	r2, #2
 80049d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	fa93 f2a3 	rbit	r2, r3
 80049dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80049e6:	2202      	movs	r2, #2
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	fa93 f2a3 	rbit	r2, r3
 80049f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80049fe:	2202      	movs	r2, #2
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	fa93 f2a3 	rbit	r2, r3
 8004a0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004a10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a12:	4b6f      	ldr	r3, [pc, #444]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	6019      	str	r1, [r3, #0]
 8004a1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	fa93 f1a3 	rbit	r1, r3
 8004a28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a2c:	6019      	str	r1, [r3, #0]
  return result;
 8004a2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2101      	movs	r1, #1
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1b2      	bne.n	80049b6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8158 	beq.w	8004d10 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a66:	4b5a      	ldr	r3, [pc, #360]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d112      	bne.n	8004a98 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a72:	4b57      	ldr	r3, [pc, #348]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4a56      	ldr	r2, [pc, #344]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	61d3      	str	r3, [r2, #28]
 8004a7e:	4b54      	ldr	r3, [pc, #336]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004a86:	f107 0308 	add.w	r3, r7, #8
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <HAL_RCC_OscConfig+0x938>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11a      	bne.n	8004ada <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	; (8004bd8 <HAL_RCC_OscConfig+0x938>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a4b      	ldr	r2, [pc, #300]	; (8004bd8 <HAL_RCC_OscConfig+0x938>)
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab0:	f7fd ff22 	bl	80028f8 <HAL_GetTick>
 8004ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab8:	e009      	b.n	8004ace <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aba:	f7fd ff1d 	bl	80028f8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e2e9      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ace:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <HAL_RCC_OscConfig+0x938>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ef      	beq.n	8004aba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x852>
 8004ae4:	4b3a      	ldr	r3, [pc, #232]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4a39      	ldr	r2, [pc, #228]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6213      	str	r3, [r2, #32]
 8004af0:	e02f      	b.n	8004b52 <HAL_RCC_OscConfig+0x8b2>
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x876>
 8004afc:	4b34      	ldr	r3, [pc, #208]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4a33      	ldr	r2, [pc, #204]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6213      	str	r3, [r2, #32]
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4a30      	ldr	r2, [pc, #192]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	6213      	str	r3, [r2, #32]
 8004b14:	e01d      	b.n	8004b52 <HAL_RCC_OscConfig+0x8b2>
 8004b16:	1d3b      	adds	r3, r7, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCC_OscConfig+0x89a>
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	4a2a      	ldr	r2, [pc, #168]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b26:	f043 0304 	orr.w	r3, r3, #4
 8004b2a:	6213      	str	r3, [r2, #32]
 8004b2c:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6213      	str	r3, [r2, #32]
 8004b38:	e00b      	b.n	8004b52 <HAL_RCC_OscConfig+0x8b2>
 8004b3a:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	4a24      	ldr	r2, [pc, #144]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	6213      	str	r3, [r2, #32]
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d06b      	beq.n	8004c34 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5c:	f7fd fecc 	bl	80028f8 <HAL_GetTick>
 8004b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00b      	b.n	8004b7e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fd fec7 	bl	80028f8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e291      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004b7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b82:	2202      	movs	r2, #2
 8004b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	fa93 f2a3 	rbit	r2, r3
 8004b90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	fa93 f2a3 	rbit	r2, r3
 8004ba8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004bac:	601a      	str	r2, [r3, #0]
  return result;
 8004bae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004bb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	fab3 f383 	clz	r3, r3
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f043 0302 	orr.w	r3, r3, #2
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCC_OscConfig+0x93c>
 8004bc8:	4b01      	ldr	r3, [pc, #4]	; (8004bd0 <HAL_RCC_OscConfig+0x930>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	e014      	b.n	8004bf8 <HAL_RCC_OscConfig+0x958>
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	10908120 	.word	0x10908120
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004be0:	2202      	movs	r2, #2
 8004be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	fa93 f2a3 	rbit	r2, r3
 8004bee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	4bbb      	ldr	r3, [pc, #748]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	6011      	str	r1, [r2, #0]
 8004c00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	fa92 f1a2 	rbit	r1, r2
 8004c0a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004c0e:	6011      	str	r1, [r2, #0]
  return result;
 8004c10:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f002 021f 	and.w	r2, r2, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d099      	beq.n	8004b66 <HAL_RCC_OscConfig+0x8c6>
 8004c32:	e063      	b.n	8004cfc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c34:	f7fd fe60 	bl	80028f8 <HAL_GetTick>
 8004c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	e00b      	b.n	8004c56 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fd fe5b 	bl	80028f8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e225      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004c56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	fa93 f2a3 	rbit	r2, r3
 8004c68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c72:	2202      	movs	r2, #2
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	fa93 f2a3 	rbit	r2, r3
 8004c80:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c84:	601a      	str	r2, [r3, #0]
  return result;
 8004c86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d102      	bne.n	8004ca6 <HAL_RCC_OscConfig+0xa06>
 8004ca0:	4b90      	ldr	r3, [pc, #576]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	e00d      	b.n	8004cc2 <HAL_RCC_OscConfig+0xa22>
 8004ca6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004caa:	2202      	movs	r2, #2
 8004cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	fa93 f2a3 	rbit	r2, r3
 8004cb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	4b89      	ldr	r3, [pc, #548]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	6011      	str	r1, [r2, #0]
 8004cca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	fa92 f1a2 	rbit	r1, r2
 8004cd4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004cd8:	6011      	str	r1, [r2, #0]
  return result;
 8004cda:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	fab2 f282 	clz	r2, r2
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	f002 021f 	and.w	r2, r2, #31
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1a0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cfc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d04:	4b77      	ldr	r3, [pc, #476]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	4a76      	ldr	r2, [pc, #472]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d10:	1d3b      	adds	r3, r7, #4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 81c2 	beq.w	80050a0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d1c:	4b71      	ldr	r3, [pc, #452]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	f000 819c 	beq.w	8005062 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2a:	1d3b      	adds	r3, r7, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	f040 8114 	bne.w	8004f5e <HAL_RCC_OscConfig+0xcbe>
 8004d36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004d3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	fa93 f2a3 	rbit	r2, r3
 8004d4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004d4e:	601a      	str	r2, [r3, #0]
  return result;
 8004d50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004d54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	461a      	mov	r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fdc4 	bl	80028f8 <HAL_GetTick>
 8004d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d74:	e009      	b.n	8004d8a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d76:	f7fd fdbf 	bl	80028f8 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e18b      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004d8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	fa93 f2a3 	rbit	r2, r3
 8004d9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004da2:	601a      	str	r2, [r3, #0]
  return result;
 8004da4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004da8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xb24>
 8004dbe:	4b49      	ldr	r3, [pc, #292]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	e01b      	b.n	8004dfc <HAL_RCC_OscConfig+0xb5c>
 8004dc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	fa93 f2a3 	rbit	r2, r3
 8004dd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	fa93 f2a3 	rbit	r2, r3
 8004df2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004e00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e04:	6011      	str	r1, [r2, #0]
 8004e06:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	fa92 f1a2 	rbit	r1, r2
 8004e10:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004e14:	6011      	str	r1, [r2, #0]
  return result;
 8004e16:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	fab2 f282 	clz	r2, r2
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	f042 0220 	orr.w	r2, r2, #32
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	f002 021f 	and.w	r2, r2, #31
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d19e      	bne.n	8004d76 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e38:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e40:	1d3b      	adds	r3, r7, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e46:	1d3b      	adds	r3, r7, #4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	4925      	ldr	r1, [pc, #148]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
 8004e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	fa93 f2a3 	rbit	r2, r3
 8004e68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e6c:	601a      	str	r2, [r3, #0]
  return result;
 8004e6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e72:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	461a      	mov	r2, r3
 8004e86:	2301      	movs	r3, #1
 8004e88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8a:	f7fd fd35 	bl	80028f8 <HAL_GetTick>
 8004e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e92:	e009      	b.n	8004ea8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd fd30 	bl	80028f8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0fc      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004ea8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	fa93 f2a3 	rbit	r2, r3
 8004ebc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ec0:	601a      	str	r2, [r3, #0]
  return result;
 8004ec2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ec6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec8:	fab3 f383 	clz	r3, r3
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCC_OscConfig+0xc48>
 8004edc:	4b01      	ldr	r3, [pc, #4]	; (8004ee4 <HAL_RCC_OscConfig+0xc44>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	e01e      	b.n	8004f20 <HAL_RCC_OscConfig+0xc80>
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	fa93 f2a3 	rbit	r2, r3
 8004efc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	fa93 f2a3 	rbit	r2, r3
 8004f16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	4b63      	ldr	r3, [pc, #396]	; (80050ac <HAL_RCC_OscConfig+0xe0c>)
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004f24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f28:	6011      	str	r1, [r2, #0]
 8004f2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	fa92 f1a2 	rbit	r1, r2
 8004f34:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f38:	6011      	str	r1, [r2, #0]
  return result;
 8004f3a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	fab2 f282 	clz	r2, r2
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	f042 0220 	orr.w	r2, r2, #32
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	f002 021f 	and.w	r2, r2, #31
 8004f50:	2101      	movs	r1, #1
 8004f52:	fa01 f202 	lsl.w	r2, r1, r2
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d09b      	beq.n	8004e94 <HAL_RCC_OscConfig+0xbf4>
 8004f5c:	e0a0      	b.n	80050a0 <HAL_RCC_OscConfig+0xe00>
 8004f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	fa93 f2a3 	rbit	r2, r3
 8004f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f76:	601a      	str	r2, [r3, #0]
  return result;
 8004f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	fab3 f383 	clz	r3, r3
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fd fcb0 	bl	80028f8 <HAL_GetTick>
 8004f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9c:	e009      	b.n	8004fb2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fd fcab 	bl	80028f8 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e077      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
 8004fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fca:	601a      	str	r2, [r3, #0]
  return result;
 8004fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fd2:	fab3 f383 	clz	r3, r3
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d102      	bne.n	8004fec <HAL_RCC_OscConfig+0xd4c>
 8004fe6:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_RCC_OscConfig+0xe0c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	e01b      	b.n	8005024 <HAL_RCC_OscConfig+0xd84>
 8004fec:	f107 0320 	add.w	r3, r7, #32
 8004ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	f107 0320 	add.w	r3, r7, #32
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	fa93 f2a3 	rbit	r2, r3
 8005000:	f107 031c 	add.w	r3, r7, #28
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f107 0318 	add.w	r3, r7, #24
 800500a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	f107 0318 	add.w	r3, r7, #24
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	fa93 f2a3 	rbit	r2, r3
 800501a:	f107 0314 	add.w	r3, r7, #20
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	4b22      	ldr	r3, [pc, #136]	; (80050ac <HAL_RCC_OscConfig+0xe0c>)
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f107 0210 	add.w	r2, r7, #16
 8005028:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	f107 0210 	add.w	r2, r7, #16
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	fa92 f1a2 	rbit	r1, r2
 8005038:	f107 020c 	add.w	r2, r7, #12
 800503c:	6011      	str	r1, [r2, #0]
  return result;
 800503e:	f107 020c 	add.w	r2, r7, #12
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	fab2 f282 	clz	r2, r2
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	f042 0220 	orr.w	r2, r2, #32
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	f002 021f 	and.w	r2, r2, #31
 8005054:	2101      	movs	r1, #1
 8005056:	fa01 f202 	lsl.w	r2, r1, r2
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d19e      	bne.n	8004f9e <HAL_RCC_OscConfig+0xcfe>
 8005060:	e01e      	b.n	80050a0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005062:	1d3b      	adds	r3, r7, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e018      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <HAL_RCC_OscConfig+0xe0c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005078:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800507c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	429a      	cmp	r2, r3
 8005088:	d108      	bne.n	800509c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800508a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800508e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000

080050b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b09e      	sub	sp, #120	; 0x78
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e162      	b.n	800538e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c8:	4b90      	ldr	r3, [pc, #576]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d910      	bls.n	80050f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d6:	4b8d      	ldr	r3, [pc, #564]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f023 0207 	bic.w	r2, r3, #7
 80050de:	498b      	ldr	r1, [pc, #556]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e6:	4b89      	ldr	r3, [pc, #548]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e14a      	b.n	800538e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b82      	ldr	r3, [pc, #520]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	497f      	ldr	r1, [pc, #508]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80dc 	beq.w	80052dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d13c      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xf6>
 800512c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005130:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800513a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d102      	bne.n	8005156 <HAL_RCC_ClockConfig+0xa6>
 8005150:	4b6f      	ldr	r3, [pc, #444]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	e00f      	b.n	8005176 <HAL_RCC_ClockConfig+0xc6>
 8005156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800515a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	667b      	str	r3, [r7, #100]	; 0x64
 8005164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005168:	663b      	str	r3, [r7, #96]	; 0x60
 800516a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516c:	fa93 f3a3 	rbit	r3, r3
 8005170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005172:	4b67      	ldr	r3, [pc, #412]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800517a:	65ba      	str	r2, [r7, #88]	; 0x58
 800517c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800517e:	fa92 f2a2 	rbit	r2, r2
 8005182:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005186:	fab2 f282 	clz	r2, r2
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	f042 0220 	orr.w	r2, r2, #32
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	f002 021f 	and.w	r2, r2, #31
 8005196:	2101      	movs	r1, #1
 8005198:	fa01 f202 	lsl.w	r2, r1, r2
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d17b      	bne.n	800529a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0f3      	b.n	800538e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d13c      	bne.n	8005228 <HAL_RCC_ClockConfig+0x178>
 80051ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80051bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x128>
 80051d2:	4b4f      	ldr	r3, [pc, #316]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	e00f      	b.n	80051f8 <HAL_RCC_ClockConfig+0x148>
 80051d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e0:	fa93 f3a3 	rbit	r3, r3
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
 80051e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ea:	643b      	str	r3, [r7, #64]	; 0x40
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	fa93 f3a3 	rbit	r3, r3
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f4:	4b46      	ldr	r3, [pc, #280]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80051fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005200:	fa92 f2a2 	rbit	r2, r2
 8005204:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005208:	fab2 f282 	clz	r2, r2
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	f042 0220 	orr.w	r2, r2, #32
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	f002 021f 	and.w	r2, r2, #31
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d13a      	bne.n	800529a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0b2      	b.n	800538e <HAL_RCC_ClockConfig+0x2de>
 8005228:	2302      	movs	r3, #2
 800522a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_RCC_ClockConfig+0x1a0>
 800524a:	4b31      	ldr	r3, [pc, #196]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	e00d      	b.n	800526c <HAL_RCC_ClockConfig+0x1bc>
 8005250:	2302      	movs	r3, #2
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	fa93 f3a3 	rbit	r3, r3
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
 800525c:	2302      	movs	r3, #2
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2202      	movs	r2, #2
 800526e:	61ba      	str	r2, [r7, #24]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	fa92 f2a2 	rbit	r2, r2
 8005276:	617a      	str	r2, [r7, #20]
  return result;
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	fab2 f282 	clz	r2, r2
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	f042 0220 	orr.w	r2, r2, #32
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	f002 021f 	and.w	r2, r2, #31
 800528a:	2101      	movs	r1, #1
 800528c:	fa01 f202 	lsl.w	r2, r1, r2
 8005290:	4013      	ands	r3, r2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e079      	b.n	800538e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	491a      	ldr	r1, [pc, #104]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ac:	f7fd fb24 	bl	80028f8 <HAL_GetTick>
 80052b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fd fb20 	bl	80028f8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e061      	b.n	800538e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <HAL_RCC_ClockConfig+0x260>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 020c 	and.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1eb      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d214      	bcs.n	8005314 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	4906      	ldr	r1, [pc, #24]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b04      	ldr	r3, [pc, #16]	; (800530c <HAL_RCC_ClockConfig+0x25c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d005      	beq.n	8005314 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e040      	b.n	800538e <HAL_RCC_ClockConfig+0x2de>
 800530c:	40022000 	.word	0x40022000
 8005310:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005320:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <HAL_RCC_ClockConfig+0x2e8>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	491a      	ldr	r1, [pc, #104]	; (8005398 <HAL_RCC_ClockConfig+0x2e8>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800533e:	4b16      	ldr	r3, [pc, #88]	; (8005398 <HAL_RCC_ClockConfig+0x2e8>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4912      	ldr	r1, [pc, #72]	; (8005398 <HAL_RCC_ClockConfig+0x2e8>)
 800534e:	4313      	orrs	r3, r2
 8005350:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005352:	f000 f829 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8005356:	4601      	mov	r1, r0
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <HAL_RCC_ClockConfig+0x2e8>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005360:	22f0      	movs	r2, #240	; 0xf0
 8005362:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	fa92 f2a2 	rbit	r2, r2
 800536a:	60fa      	str	r2, [r7, #12]
  return result;
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	fab2 f282 	clz	r2, r2
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	40d3      	lsrs	r3, r2
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <HAL_RCC_ClockConfig+0x2ec>)
 8005378:	5cd3      	ldrb	r3, [r2, r3]
 800537a:	fa21 f303 	lsr.w	r3, r1, r3
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <HAL_RCC_ClockConfig+0x2f0>)
 8005380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_RCC_ClockConfig+0x2f4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fd f948 	bl	800261c <HAL_InitTick>
  
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3778      	adds	r7, #120	; 0x78
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	0800cdb4 	.word	0x0800cdb4
 80053a0:	20000000 	.word	0x20000000
 80053a4:	20000004 	.word	0x20000004

080053a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b08b      	sub	sp, #44	; 0x2c
 80053ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80053c2:	4b29      	ldr	r3, [pc, #164]	; (8005468 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d002      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x30>
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d003      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x36>
 80053d6:	e03c      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053d8:	4b24      	ldr	r3, [pc, #144]	; (800546c <HAL_RCC_GetSysClockFreq+0xc4>)
 80053da:	623b      	str	r3, [r7, #32]
      break;
 80053dc:	e03c      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80053e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80053e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	fa92 f2a2 	rbit	r2, r2
 80053f0:	607a      	str	r2, [r7, #4]
  return result;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	fab2 f282 	clz	r2, r2
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	40d3      	lsrs	r3, r2
 80053fc:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <HAL_RCC_GetSysClockFreq+0xc8>)
 80053fe:	5cd3      	ldrb	r3, [r2, r3]
 8005400:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005402:	4b19      	ldr	r3, [pc, #100]	; (8005468 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	220f      	movs	r2, #15
 800540c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	fa92 f2a2 	rbit	r2, r2
 8005414:	60fa      	str	r2, [r7, #12]
  return result;
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	fab2 f282 	clz	r2, r2
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	40d3      	lsrs	r3, r2
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005430:	4a0e      	ldr	r2, [pc, #56]	; (800546c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	fbb2 f2f3 	udiv	r2, r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
 8005440:	e004      	b.n	800544c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	623b      	str	r3, [r7, #32]
      break;
 8005450:	e002      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005454:	623b      	str	r3, [r7, #32]
      break;
 8005456:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005458:	6a3b      	ldr	r3, [r7, #32]
}
 800545a:	4618      	mov	r0, r3
 800545c:	372c      	adds	r7, #44	; 0x2c
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
 800546c:	007a1200 	.word	0x007a1200
 8005470:	0800cdcc 	.word	0x0800cdcc
 8005474:	0800cddc 	.word	0x0800cddc
 8005478:	003d0900 	.word	0x003d0900

0800547c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <HAL_RCC_GetHCLKFreq+0x14>)
 8005482:	681b      	ldr	r3, [r3, #0]
}
 8005484:	4618      	mov	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000000 	.word	0x20000000

08005494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800549a:	f7ff ffef 	bl	800547c <HAL_RCC_GetHCLKFreq>
 800549e:	4601      	mov	r1, r0
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80054ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	fa92 f2a2 	rbit	r2, r2
 80054b4:	603a      	str	r2, [r7, #0]
  return result;
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	fab2 f282 	clz	r2, r2
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	40d3      	lsrs	r3, r2
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000
 80054d4:	0800cdc4 	.word	0x0800cdc4

080054d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80054de:	f7ff ffcd 	bl	800547c <HAL_RCC_GetHCLKFreq>
 80054e2:	4601      	mov	r1, r0
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80054ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80054f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	fa92 f2a2 	rbit	r2, r2
 80054f8:	603a      	str	r2, [r7, #0]
  return result;
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	fab2 f282 	clz	r2, r2
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	40d3      	lsrs	r3, r2
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005506:	5cd3      	ldrb	r3, [r2, r3]
 8005508:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	0800cdc4 	.word	0x0800cdc4

0800551c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	220f      	movs	r2, #15
 800552a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 0203 	and.w	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005538:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005550:	4b09      	ldr	r3, [pc, #36]	; (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <HAL_RCC_GetClockConfig+0x60>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0207 	and.w	r2, r3, #7
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	601a      	str	r2, [r3, #0]
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	40022000 	.word	0x40022000

08005580 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b092      	sub	sp, #72	; 0x48
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80d4 	beq.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a4:	4b4e      	ldr	r3, [pc, #312]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10e      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	4b4b      	ldr	r3, [pc, #300]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	4a4a      	ldr	r2, [pc, #296]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ba:	61d3      	str	r3, [r2, #28]
 80055bc:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ce:	4b45      	ldr	r3, [pc, #276]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d118      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055da:	4b42      	ldr	r3, [pc, #264]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a41      	ldr	r2, [pc, #260]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e6:	f7fd f987 	bl	80028f8 <HAL_GetTick>
 80055ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ec:	e008      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ee:	f7fd f983 	bl	80028f8 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b64      	cmp	r3, #100	; 0x64
 80055fa:	d901      	bls.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e169      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800560c:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8084 	beq.w	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005628:	429a      	cmp	r2, r3
 800562a:	d07c      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800562c:	4b2c      	ldr	r3, [pc, #176]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005646:	fab3 f383 	clz	r3, r3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	461a      	mov	r2, r3
 8005656:	2301      	movs	r3, #1
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	fa93 f3a3 	rbit	r3, r3
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	461a      	mov	r2, r3
 800567a:	2300      	movs	r3, #0
 800567c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800567e:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d04b      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568e:	f7fd f933 	bl	80028f8 <HAL_GetTick>
 8005692:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005694:	e00a      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fd f92f 	bl	80028f8 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d901      	bls.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e113      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80056ac:	2302      	movs	r3, #2
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	fa93 f3a3 	rbit	r3, r3
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	2302      	movs	r3, #2
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	fa93 f3a3 	rbit	r3, r3
 80056c2:	61fb      	str	r3, [r7, #28]
  return result;
 80056c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c6:	fab3 f383 	clz	r3, r3
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d108      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056da:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	e00d      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40007000 	.word	0x40007000
 80056e8:	10908100 	.word	0x10908100
 80056ec:	2302      	movs	r3, #2
 80056ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	fa93 f3a3 	rbit	r3, r3
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	4b78      	ldr	r3, [pc, #480]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2202      	movs	r2, #2
 80056fe:	613a      	str	r2, [r7, #16]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	fa92 f2a2 	rbit	r2, r2
 8005706:	60fa      	str	r2, [r7, #12]
  return result;
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	fab2 f282 	clz	r2, r2
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	f002 021f 	and.w	r2, r2, #31
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f202 	lsl.w	r2, r1, r2
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0b7      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005726:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	496a      	ldr	r1, [pc, #424]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005740:	4b66      	ldr	r3, [pc, #408]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4a65      	ldr	r2, [pc, #404]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005758:	4b60      	ldr	r3, [pc, #384]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	f023 0203 	bic.w	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	495d      	ldr	r1, [pc, #372]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005776:	4b59      	ldr	r3, [pc, #356]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	4956      	ldr	r1, [pc, #344]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005784:	4313      	orrs	r3, r2
 8005786:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005794:	4b51      	ldr	r3, [pc, #324]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	494e      	ldr	r1, [pc, #312]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057b2:	4b4a      	ldr	r3, [pc, #296]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f023 0210 	bic.w	r2, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4947      	ldr	r1, [pc, #284]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80057d0:	4b42      	ldr	r3, [pc, #264]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	493f      	ldr	r1, [pc, #252]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f023 0220 	bic.w	r2, r3, #32
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	4938      	ldr	r1, [pc, #224]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800580c:	4b33      	ldr	r3, [pc, #204]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	4930      	ldr	r1, [pc, #192]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	4929      	ldr	r1, [pc, #164]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005838:	4313      	orrs	r3, r2
 800583a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005848:	4b24      	ldr	r3, [pc, #144]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4921      	ldr	r1, [pc, #132]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	491a      	ldr	r1, [pc, #104]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005874:	4313      	orrs	r3, r2
 8005876:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	4912      	ldr	r1, [pc, #72]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058a2:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	490b      	ldr	r1, [pc, #44]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	4903      	ldr	r1, [pc, #12]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3748      	adds	r7, #72	; 0x48
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000

080058e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e049      	b.n	8005986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc fde6 	bl	80024d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f000 faa0 	bl	8005e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d001      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e04a      	b.n	8005a3e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a21      	ldr	r2, [pc, #132]	; (8005a4c <HAL_TIM_Base_Start_IT+0xbc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d013      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <HAL_TIM_Base_Start_IT+0xc0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d115      	bne.n	8005a28 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d015      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0xaa>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d011      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a26:	e008      	b.n	8005a3a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e000      	b.n	8005a3c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	00010007 	.word	0x00010007

08005a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d122      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d11b      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0202 	mvn.w	r2, #2
 8005a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f9be 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9b0 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f9c1 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d122      	bne.n	8005b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d11b      	bne.n	8005b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0204 	mvn.w	r2, #4
 8005ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f994 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f986 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f997 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d122      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d11b      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0208 	mvn.w	r2, #8
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f96a 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f95c 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f96d 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d122      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d11b      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0210 	mvn.w	r2, #16
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2208      	movs	r2, #8
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f940 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f932 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f943 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d10e      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0201 	mvn.w	r2, #1
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc fa92 	bl	800210c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c00:	2b80      	cmp	r3, #128	; 0x80
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fadc 	bl	80061cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c22:	d10e      	bne.n	8005c42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d107      	bne.n	8005c42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 facf 	bl	80061e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d10e      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d107      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f8f1 	bl	8005e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d10e      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d107      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f06f 0220 	mvn.w	r2, #32
 8005c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fa8f 	bl	80061b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_TIM_ConfigClockSource+0x18>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e0a8      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0x16a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cdc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d067      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x124>
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d80b      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x70>
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d073      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x144>
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d802      	bhi.n	8005d08 <HAL_TIM_ConfigClockSource+0x66>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d06f      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d06:	e078      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d06c      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x144>
 8005d0c:	2b30      	cmp	r3, #48	; 0x30
 8005d0e:	d06a      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005d10:	e073      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d12:	2b70      	cmp	r3, #112	; 0x70
 8005d14:	d00d      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x90>
 8005d16:	2b70      	cmp	r3, #112	; 0x70
 8005d18:	d804      	bhi.n	8005d24 <HAL_TIM_ConfigClockSource+0x82>
 8005d1a:	2b50      	cmp	r3, #80	; 0x50
 8005d1c:	d033      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0xe4>
 8005d1e:	2b60      	cmp	r3, #96	; 0x60
 8005d20:	d041      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005d22:	e06a      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d066      	beq.n	8005df8 <HAL_TIM_ConfigClockSource+0x156>
 8005d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2e:	d017      	beq.n	8005d60 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005d30:	e063      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6899      	ldr	r1, [r3, #8]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f000 f999 	bl	8006078 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	609a      	str	r2, [r3, #8]
      break;
 8005d5e:	e04c      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6899      	ldr	r1, [r3, #8]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f000 f982 	bl	8006078 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d82:	609a      	str	r2, [r3, #8]
      break;
 8005d84:	e039      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f000 f8f6 	bl	8005f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2150      	movs	r1, #80	; 0x50
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f94f 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005da4:	e029      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f000 f915 	bl	8005fe2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2160      	movs	r1, #96	; 0x60
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f93f 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e019      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 f8d6 	bl	8005f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2140      	movs	r1, #64	; 0x40
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f92f 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005de4:	e009      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f000 f926 	bl	8006042 <TIM_ITRx_SetConfig>
        break;
 8005df6:	e000      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005df8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a3c      	ldr	r2, [pc, #240]	; (8005f68 <TIM_Base_SetConfig+0x104>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00f      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e82:	d00b      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a39      	ldr	r2, [pc, #228]	; (8005f6c <TIM_Base_SetConfig+0x108>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a38      	ldr	r2, [pc, #224]	; (8005f70 <TIM_Base_SetConfig+0x10c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a37      	ldr	r2, [pc, #220]	; (8005f74 <TIM_Base_SetConfig+0x110>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2d      	ldr	r2, [pc, #180]	; (8005f68 <TIM_Base_SetConfig+0x104>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01b      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d017      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <TIM_Base_SetConfig+0x108>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a29      	ldr	r2, [pc, #164]	; (8005f70 <TIM_Base_SetConfig+0x10c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a28      	ldr	r2, [pc, #160]	; (8005f74 <TIM_Base_SetConfig+0x110>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a27      	ldr	r2, [pc, #156]	; (8005f78 <TIM_Base_SetConfig+0x114>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a26      	ldr	r2, [pc, #152]	; (8005f7c <TIM_Base_SetConfig+0x118>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a25      	ldr	r2, [pc, #148]	; (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a10      	ldr	r2, [pc, #64]	; (8005f68 <TIM_Base_SetConfig+0x104>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <TIM_Base_SetConfig+0x110>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <TIM_Base_SetConfig+0x114>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d007      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a0f      	ldr	r2, [pc, #60]	; (8005f7c <TIM_Base_SetConfig+0x118>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a0e      	ldr	r2, [pc, #56]	; (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d103      	bne.n	8005f54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	615a      	str	r2, [r3, #20]
}
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0201 	bic.w	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 030a 	bic.w	r3, r3, #10
 8005fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	621a      	str	r2, [r3, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b087      	sub	sp, #28
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0210 	bic.w	r2, r3, #16
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800600c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	031b      	lsls	r3, r3, #12
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800601e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	f043 0307 	orr.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	431a      	orrs	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e063      	b.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800610a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006142:	d013      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a18      	ldr	r2, [pc, #96]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a17      	ldr	r2, [pc, #92]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d10c      	bne.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40013400 	.word	0x40013400
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40014000 	.word	0x40014000

080061b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e040      	b.n	8006288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fc f982 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	; 0x24
 8006220:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fb7a 	bl	800692c <UART_SetConfig>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e022      	b.n	8006288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fd40 	bl	8006cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800625e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800626e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fdc7 	bl	8006e14 <UART_CheckIdleState>
 8006286:	4603      	mov	r3, r0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	f040 8082 	bne.w	80063ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_UART_Transmit+0x26>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e07a      	b.n	80063b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Transmit+0x38>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e073      	b.n	80063b0 <HAL_UART_Transmit+0x120>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062de:	f7fc fb0b 	bl	80028f8 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d108      	bne.n	8006310 <HAL_UART_Transmit+0x80>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e003      	b.n	8006318 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006320:	e02d      	b.n	800637e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fdba 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e039      	b.n	80063b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	881a      	ldrh	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634e:	b292      	uxth	r2, r2
 8006350:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3302      	adds	r3, #2
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	e008      	b.n	800636c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	b292      	uxth	r2, r2
 8006364:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1cb      	bne.n	8006322 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2200      	movs	r2, #0
 8006392:	2140      	movs	r1, #64	; 0x40
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fd86 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e005      	b.n	80063b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d145      	bne.n	800645a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_UART_Transmit_IT+0x22>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e03e      	b.n	800645c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UART_Transmit_IT+0x34>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e037      	b.n	800645c <HAL_UART_Transmit_IT+0xa4>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2221      	movs	r2, #33	; 0x21
 800641c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006426:	d107      	bne.n	8006438 <HAL_UART_Transmit_IT+0x80>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d103      	bne.n	8006438 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a0d      	ldr	r2, [pc, #52]	; (8006468 <HAL_UART_Transmit_IT+0xb0>)
 8006434:	669a      	str	r2, [r3, #104]	; 0x68
 8006436:	e002      	b.n	800643e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a0c      	ldr	r2, [pc, #48]	; (800646c <HAL_UART_Transmit_IT+0xb4>)
 800643c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006454:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	e000      	b.n	800645c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
  }
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	0800718b 	.word	0x0800718b
 800646c:	08007117 	.word	0x08007117

08006470 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006482:	2b20      	cmp	r3, #32
 8006484:	d12c      	bne.n	80064e0 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_UART_Receive_IT+0x22>
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e025      	b.n	80064e2 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Receive_IT+0x34>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e01e      	b.n	80064e2 <HAL_UART_Receive_IT+0x72>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80064ce:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	461a      	mov	r2, r3
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fd62 	bl	8006fa0 <UART_Start_Receive_IT>
 80064dc:	4603      	mov	r3, r0
 80064de:	e000      	b.n	80064e2 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006512:	4013      	ands	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d113      	bne.n	8006544 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 81cd 	beq.w	80068d4 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
      }
      return;
 8006542:	e1c7      	b.n	80068d4 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80e3 	beq.w	8006712 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d105      	bne.n	8006562 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4ba5      	ldr	r3, [pc, #660]	; (80067f0 <HAL_UART_IRQHandler+0x304>)
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80d8 	beq.w	8006712 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <HAL_UART_IRQHandler+0xa2>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2201      	movs	r2, #1
 800657c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006584:	f043 0201 	orr.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d010      	beq.n	80065ba <HAL_UART_IRQHandler+0xce>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2202      	movs	r2, #2
 80065a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b0:	f043 0204 	orr.w	r2, r3, #4
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <HAL_UART_IRQHandler+0xfa>
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2204      	movs	r2, #4
 80065d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065dc:	f043 0202 	orr.w	r2, r3, #2
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2208      	movs	r2, #8
 800660a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006612:	f043 0208 	orr.w	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006622:	2b00      	cmp	r3, #0
 8006624:	d011      	beq.n	800664a <HAL_UART_IRQHandler+0x15e>
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00c      	beq.n	800664a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006640:	f043 0220 	orr.w	r2, r3, #32
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8141 	beq.w	80068d8 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00c      	beq.n	800667a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006680:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d004      	beq.n	800669a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006696:	2b00      	cmp	r3, #0
 8006698:	d031      	beq.n	80066fe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fcf6 	bl	800708c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d123      	bne.n	80066f6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d013      	beq.n	80066ee <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ca:	4a4a      	ldr	r2, [pc, #296]	; (80067f4 <HAL_UART_IRQHandler+0x308>)
 80066cc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fd fb07 	bl	8003ce6 <HAL_DMA_Abort_IT>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d017      	beq.n	800670e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80066e8:	4610      	mov	r0, r2
 80066ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	e00f      	b.n	800670e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f906 	bl	8006900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f4:	e00b      	b.n	800670e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f902 	bl	8006900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	e007      	b.n	800670e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8fe 	bl	8006900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800670c:	e0e4      	b.n	80068d8 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670e:	bf00      	nop
    return;
 8006710:	e0e2      	b.n	80068d8 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	2b01      	cmp	r3, #1
 8006718:	f040 80a7 	bne.w	800686a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80a1 	beq.w	800686a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 809b 	beq.w	800686a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2210      	movs	r2, #16
 800673a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d156      	bne.n	80067f8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006754:	893b      	ldrh	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80c0 	beq.w	80068dc <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006762:	893a      	ldrh	r2, [r7, #8]
 8006764:	429a      	cmp	r2, r3
 8006766:	f080 80b9 	bcs.w	80068dc <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	893a      	ldrh	r2, [r7, #8]
 800676e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	2b20      	cmp	r3, #32
 800677a:	d02a      	beq.n	80067d2 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800678a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067aa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0210 	bic.w	r2, r2, #16
 80067c6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fd fa51 	bl	8003c74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f894 	bl	8006914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067ec:	e076      	b.n	80068dc <HAL_UART_IRQHandler+0x3f0>
 80067ee:	bf00      	nop
 80067f0:	04000120 	.word	0x04000120
 80067f4:	080070eb 	.word	0x080070eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006804:	b29b      	uxth	r3, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d064      	beq.n	80068e0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8006816:	897b      	ldrh	r3, [r7, #10]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d061      	beq.n	80068e0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800682a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0201 	bic.w	r2, r2, #1
 800683a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0210 	bic.w	r2, r2, #16
 800685c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800685e:	897b      	ldrh	r3, [r7, #10]
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f856 	bl	8006914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006868:	e03a      	b.n	80068e0 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00d      	beq.n	8006890 <HAL_UART_IRQHandler+0x3a4>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fda9 	bl	80073e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800688e:	e02a      	b.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
    }
    return;
 80068b4:	e016      	b.n	80068e4 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fc9b 	bl	8007206 <UART_EndTransmit_IT>
    return;
 80068d0:	bf00      	nop
 80068d2:	e008      	b.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
      return;
 80068d4:	bf00      	nop
 80068d6:	e006      	b.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
    return;
 80068d8:	bf00      	nop
 80068da:	e004      	b.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
      return;
 80068dc:	bf00      	nop
 80068de:	e002      	b.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
      return;
 80068e0:	bf00      	nop
 80068e2:	e000      	b.n	80068e6 <HAL_UART_IRQHandler+0x3fa>
    return;
 80068e4:	bf00      	nop
  }

}
 80068e6:	3720      	adds	r7, #32
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800695a:	f023 030c 	bic.w	r3, r3, #12
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	430b      	orrs	r3, r1
 8006966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	430a      	orrs	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4aad      	ldr	r2, [pc, #692]	; (8006c5c <UART_SetConfig+0x330>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d121      	bne.n	80069f0 <UART_SetConfig+0xc4>
 80069ac:	4bac      	ldr	r3, [pc, #688]	; (8006c60 <UART_SetConfig+0x334>)
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d817      	bhi.n	80069e8 <UART_SetConfig+0xbc>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <UART_SetConfig+0x94>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	080069e3 	.word	0x080069e3
 80069cc:	080069d7 	.word	0x080069d7
 80069d0:	2301      	movs	r3, #1
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e0b2      	b.n	8006b3c <UART_SetConfig+0x210>
 80069d6:	2302      	movs	r3, #2
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e0af      	b.n	8006b3c <UART_SetConfig+0x210>
 80069dc:	2304      	movs	r3, #4
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e0ac      	b.n	8006b3c <UART_SetConfig+0x210>
 80069e2:	2308      	movs	r3, #8
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e0a9      	b.n	8006b3c <UART_SetConfig+0x210>
 80069e8:	2310      	movs	r3, #16
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	bf00      	nop
 80069ee:	e0a5      	b.n	8006b3c <UART_SetConfig+0x210>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a9b      	ldr	r2, [pc, #620]	; (8006c64 <UART_SetConfig+0x338>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d123      	bne.n	8006a42 <UART_SetConfig+0x116>
 80069fa:	4b99      	ldr	r3, [pc, #612]	; (8006c60 <UART_SetConfig+0x334>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a06:	d012      	beq.n	8006a2e <UART_SetConfig+0x102>
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0c:	d802      	bhi.n	8006a14 <UART_SetConfig+0xe8>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <UART_SetConfig+0xf6>
 8006a12:	e012      	b.n	8006a3a <UART_SetConfig+0x10e>
 8006a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a18:	d00c      	beq.n	8006a34 <UART_SetConfig+0x108>
 8006a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a1e:	d003      	beq.n	8006a28 <UART_SetConfig+0xfc>
 8006a20:	e00b      	b.n	8006a3a <UART_SetConfig+0x10e>
 8006a22:	2300      	movs	r3, #0
 8006a24:	77fb      	strb	r3, [r7, #31]
 8006a26:	e089      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	77fb      	strb	r3, [r7, #31]
 8006a2c:	e086      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a2e:	2304      	movs	r3, #4
 8006a30:	77fb      	strb	r3, [r7, #31]
 8006a32:	e083      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a34:	2308      	movs	r3, #8
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e080      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	77fb      	strb	r3, [r7, #31]
 8006a3e:	bf00      	nop
 8006a40:	e07c      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a88      	ldr	r2, [pc, #544]	; (8006c68 <UART_SetConfig+0x33c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d123      	bne.n	8006a94 <UART_SetConfig+0x168>
 8006a4c:	4b84      	ldr	r3, [pc, #528]	; (8006c60 <UART_SetConfig+0x334>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006a54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a58:	d012      	beq.n	8006a80 <UART_SetConfig+0x154>
 8006a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a5e:	d802      	bhi.n	8006a66 <UART_SetConfig+0x13a>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <UART_SetConfig+0x148>
 8006a64:	e012      	b.n	8006a8c <UART_SetConfig+0x160>
 8006a66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a6a:	d00c      	beq.n	8006a86 <UART_SetConfig+0x15a>
 8006a6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a70:	d003      	beq.n	8006a7a <UART_SetConfig+0x14e>
 8006a72:	e00b      	b.n	8006a8c <UART_SetConfig+0x160>
 8006a74:	2300      	movs	r3, #0
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e060      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e05d      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a80:	2304      	movs	r3, #4
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e05a      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a86:	2308      	movs	r3, #8
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e057      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	bf00      	nop
 8006a92:	e053      	b.n	8006b3c <UART_SetConfig+0x210>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a74      	ldr	r2, [pc, #464]	; (8006c6c <UART_SetConfig+0x340>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d123      	bne.n	8006ae6 <UART_SetConfig+0x1ba>
 8006a9e:	4b70      	ldr	r3, [pc, #448]	; (8006c60 <UART_SetConfig+0x334>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aaa:	d012      	beq.n	8006ad2 <UART_SetConfig+0x1a6>
 8006aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab0:	d802      	bhi.n	8006ab8 <UART_SetConfig+0x18c>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <UART_SetConfig+0x19a>
 8006ab6:	e012      	b.n	8006ade <UART_SetConfig+0x1b2>
 8006ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006abc:	d00c      	beq.n	8006ad8 <UART_SetConfig+0x1ac>
 8006abe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ac2:	d003      	beq.n	8006acc <UART_SetConfig+0x1a0>
 8006ac4:	e00b      	b.n	8006ade <UART_SetConfig+0x1b2>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e037      	b.n	8006b3c <UART_SetConfig+0x210>
 8006acc:	2302      	movs	r3, #2
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e034      	b.n	8006b3c <UART_SetConfig+0x210>
 8006ad2:	2304      	movs	r3, #4
 8006ad4:	77fb      	strb	r3, [r7, #31]
 8006ad6:	e031      	b.n	8006b3c <UART_SetConfig+0x210>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	77fb      	strb	r3, [r7, #31]
 8006adc:	e02e      	b.n	8006b3c <UART_SetConfig+0x210>
 8006ade:	2310      	movs	r3, #16
 8006ae0:	77fb      	strb	r3, [r7, #31]
 8006ae2:	bf00      	nop
 8006ae4:	e02a      	b.n	8006b3c <UART_SetConfig+0x210>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a61      	ldr	r2, [pc, #388]	; (8006c70 <UART_SetConfig+0x344>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d123      	bne.n	8006b38 <UART_SetConfig+0x20c>
 8006af0:	4b5b      	ldr	r3, [pc, #364]	; (8006c60 <UART_SetConfig+0x334>)
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006afc:	d012      	beq.n	8006b24 <UART_SetConfig+0x1f8>
 8006afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b02:	d802      	bhi.n	8006b0a <UART_SetConfig+0x1de>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d007      	beq.n	8006b18 <UART_SetConfig+0x1ec>
 8006b08:	e012      	b.n	8006b30 <UART_SetConfig+0x204>
 8006b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b0e:	d00c      	beq.n	8006b2a <UART_SetConfig+0x1fe>
 8006b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b14:	d003      	beq.n	8006b1e <UART_SetConfig+0x1f2>
 8006b16:	e00b      	b.n	8006b30 <UART_SetConfig+0x204>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e00e      	b.n	8006b3c <UART_SetConfig+0x210>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e00b      	b.n	8006b3c <UART_SetConfig+0x210>
 8006b24:	2304      	movs	r3, #4
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e008      	b.n	8006b3c <UART_SetConfig+0x210>
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e005      	b.n	8006b3c <UART_SetConfig+0x210>
 8006b30:	2310      	movs	r3, #16
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	bf00      	nop
 8006b36:	e001      	b.n	8006b3c <UART_SetConfig+0x210>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	d15d      	bne.n	8006c02 <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8006b46:	7ffb      	ldrb	r3, [r7, #31]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d828      	bhi.n	8006b9e <UART_SetConfig+0x272>
 8006b4c:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <UART_SetConfig+0x228>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	08006b9f 	.word	0x08006b9f
 8006b64:	08006b8f 	.word	0x08006b8f
 8006b68:	08006b9f 	.word	0x08006b9f
 8006b6c:	08006b9f 	.word	0x08006b9f
 8006b70:	08006b9f 	.word	0x08006b9f
 8006b74:	08006b97 	.word	0x08006b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fe fc8c 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8006b7c:	61b8      	str	r0, [r7, #24]
        break;
 8006b7e:	e013      	b.n	8006ba8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b80:	f7fe fcaa 	bl	80054d8 <HAL_RCC_GetPCLK2Freq>
 8006b84:	61b8      	str	r0, [r7, #24]
        break;
 8006b86:	e00f      	b.n	8006ba8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b88:	4b3a      	ldr	r3, [pc, #232]	; (8006c74 <UART_SetConfig+0x348>)
 8006b8a:	61bb      	str	r3, [r7, #24]
        break;
 8006b8c:	e00c      	b.n	8006ba8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8e:	f7fe fc0b 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8006b92:	61b8      	str	r0, [r7, #24]
        break;
 8006b94:	e008      	b.n	8006ba8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9a:	61bb      	str	r3, [r7, #24]
        break;
 8006b9c:	e004      	b.n	8006ba8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ba6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8085 	beq.w	8006cba <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	005a      	lsls	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	441a      	add	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b0f      	cmp	r3, #15
 8006bcc:	d916      	bls.n	8006bfc <UART_SetConfig+0x2d0>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd4:	d212      	bcs.n	8006bfc <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f023 030f 	bic.w	r3, r3, #15
 8006bde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	89fb      	ldrh	r3, [r7, #14]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	89fa      	ldrh	r2, [r7, #14]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	e05e      	b.n	8006cba <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	77bb      	strb	r3, [r7, #30]
 8006c00:	e05b      	b.n	8006cba <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c02:	7ffb      	ldrb	r3, [r7, #31]
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d837      	bhi.n	8006c78 <UART_SetConfig+0x34c>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x2e4>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c79 	.word	0x08006c79
 8006c20:	08006c4b 	.word	0x08006c4b
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006c79 	.word	0x08006c79
 8006c2c:	08006c79 	.word	0x08006c79
 8006c30:	08006c53 	.word	0x08006c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fe fc2e 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8006c38:	61b8      	str	r0, [r7, #24]
        break;
 8006c3a:	e022      	b.n	8006c82 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fe fc4c 	bl	80054d8 <HAL_RCC_GetPCLK2Freq>
 8006c40:	61b8      	str	r0, [r7, #24]
        break;
 8006c42:	e01e      	b.n	8006c82 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <UART_SetConfig+0x348>)
 8006c46:	61bb      	str	r3, [r7, #24]
        break;
 8006c48:	e01b      	b.n	8006c82 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4a:	f7fe fbad 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8006c4e:	61b8      	str	r0, [r7, #24]
        break;
 8006c50:	e017      	b.n	8006c82 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c56:	61bb      	str	r3, [r7, #24]
        break;
 8006c58:	e013      	b.n	8006c82 <UART_SetConfig+0x356>
 8006c5a:	bf00      	nop
 8006c5c:	40013800 	.word	0x40013800
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40004400 	.word	0x40004400
 8006c68:	40004800 	.word	0x40004800
 8006c6c:	40004c00 	.word	0x40004c00
 8006c70:	40005000 	.word	0x40005000
 8006c74:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	77bb      	strb	r3, [r7, #30]
        break;
 8006c80:	bf00      	nop
    }

    if (pclk != 0U)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d018      	beq.n	8006cba <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	085a      	lsrs	r2, r3, #1
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	441a      	add	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b0f      	cmp	r3, #15
 8006ca2:	d908      	bls.n	8006cb6 <UART_SetConfig+0x38a>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006caa:	d204      	bcs.n	8006cb6 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	e001      	b.n	8006cba <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006cc6:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dce:	d10a      	bne.n	8006de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e24:	f7fb fd68 	bl	80028f8 <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d10e      	bne.n	8006e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f82d 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e023      	b.n	8006e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d10e      	bne.n	8006e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f817 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e00d      	b.n	8006e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb6:	e05e      	b.n	8006f76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d05a      	beq.n	8006f76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec0:	f7fb fd1a 	bl	80028f8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11b      	bne.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ee4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0201 	bic.w	r2, r2, #1
 8006ef4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e043      	b.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d02c      	beq.n	8006f76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d124      	bne.n	8006f76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e00f      	b.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	bf0c      	ite	eq
 8006f86:	2301      	moveq	r3, #1
 8006f88:	2300      	movne	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d091      	beq.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	88fa      	ldrh	r2, [r7, #6]
 8006fc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd2:	d10e      	bne.n	8006ff2 <UART_Start_Receive_IT+0x52>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d105      	bne.n	8006fe8 <UART_Start_Receive_IT+0x48>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fe6:	e01a      	b.n	800701e <UART_Start_Receive_IT+0x7e>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	22ff      	movs	r2, #255	; 0xff
 8006fec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ff0:	e015      	b.n	800701e <UART_Start_Receive_IT+0x7e>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <UART_Start_Receive_IT+0x76>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <UART_Start_Receive_IT+0x6c>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	22ff      	movs	r2, #255	; 0xff
 8007006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800700a:	e008      	b.n	800701e <UART_Start_Receive_IT+0x7e>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	227f      	movs	r2, #127	; 0x7f
 8007010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007014:	e003      	b.n	800701e <UART_Start_Receive_IT+0x7e>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2222      	movs	r2, #34	; 0x22
 800702a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	d107      	bne.n	8007056 <UART_Start_Receive_IT+0xb6>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a0c      	ldr	r2, [pc, #48]	; (8007084 <UART_Start_Receive_IT+0xe4>)
 8007052:	665a      	str	r2, [r3, #100]	; 0x64
 8007054:	e002      	b.n	800705c <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a0b      	ldr	r2, [pc, #44]	; (8007088 <UART_Start_Receive_IT+0xe8>)
 800705a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007072:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	0800730d 	.word	0x0800730d
 8007088:	08007239 	.word	0x08007239

0800708c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d107      	bne.n	80070cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0210 	bic.w	r2, r2, #16
 80070ca:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fbf9 	bl	8006900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007122:	2b21      	cmp	r3, #33	; 0x21
 8007124:	d12b      	bne.n	800717e <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d110      	bne.n	8007154 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007140:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007150:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007152:	e014      	b.n	800717e <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	b292      	uxth	r2, r2
 8007160:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007196:	2b21      	cmp	r3, #33	; 0x21
 8007198:	d12f      	bne.n	80071fa <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d110      	bne.n	80071c8 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80071c6:	e018      	b.n	80071fa <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	881a      	ldrh	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071da:	b292      	uxth	r2, r2
 80071dc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fb5e 	bl	80068ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007246:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800724c:	2b22      	cmp	r3, #34	; 0x22
 800724e:	d151      	bne.n	80072f4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007256:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007258:	89bb      	ldrh	r3, [r7, #12]
 800725a:	b2d9      	uxtb	r1, r3
 800725c:	89fb      	ldrh	r3, [r7, #14]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	400a      	ands	r2, r1
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d138      	bne.n	8007304 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072a0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10f      	bne.n	80072e6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0210 	bic.w	r2, r2, #16
 80072d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fb18 	bl	8006914 <HAL_UARTEx_RxEventCallback>
 80072e4:	e002      	b.n	80072ec <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fa fa88 	bl	80017fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072f2:	e007      	b.n	8007304 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0208 	orr.w	r2, r2, #8
 8007302:	619a      	str	r2, [r3, #24]
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800731a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007320:	2b22      	cmp	r3, #34	; 0x22
 8007322:	d151      	bne.n	80073c8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800732a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007330:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007332:	89ba      	ldrh	r2, [r7, #12]
 8007334:	89fb      	ldrh	r3, [r7, #14]
 8007336:	4013      	ands	r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007342:	1c9a      	adds	r2, r3, #2
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800734e:	b29b      	uxth	r3, r3
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d138      	bne.n	80073d8 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007374:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10f      	bne.n	80073ba <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0210 	bic.w	r2, r2, #16
 80073a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff faae 	bl	8006914 <HAL_UARTEx_RxEventCallback>
 80073b8:	e002      	b.n	80073c0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fa fa1e 	bl	80017fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073c6:	e007      	b.n	80073d8 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073fa:	f3ef 8305 	mrs	r3, IPSR
 80073fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007400:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10f      	bne.n	8007426 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007406:	f3ef 8310 	mrs	r3, PRIMASK
 800740a:	607b      	str	r3, [r7, #4]
  return(result);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <osKernelInitialize+0x32>
 8007412:	4b11      	ldr	r3, [pc, #68]	; (8007458 <osKernelInitialize+0x64>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d109      	bne.n	800742e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800741a:	f3ef 8311 	mrs	r3, BASEPRI
 800741e:	603b      	str	r3, [r7, #0]
  return(result);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007426:	f06f 0305 	mvn.w	r3, #5
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e00c      	b.n	8007448 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800742e:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <osKernelInitialize+0x64>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d105      	bne.n	8007442 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007436:	4b08      	ldr	r3, [pc, #32]	; (8007458 <osKernelInitialize+0x64>)
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e002      	b.n	8007448 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007448:	68fb      	ldr	r3, [r7, #12]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200002e0 	.word	0x200002e0

0800745c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007462:	f3ef 8305 	mrs	r3, IPSR
 8007466:	60bb      	str	r3, [r7, #8]
  return(result);
 8007468:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746e:	f3ef 8310 	mrs	r3, PRIMASK
 8007472:	607b      	str	r3, [r7, #4]
  return(result);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <osKernelStart+0x32>
 800747a:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <osKernelStart+0x64>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d109      	bne.n	8007496 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007482:	f3ef 8311 	mrs	r3, BASEPRI
 8007486:	603b      	str	r3, [r7, #0]
  return(result);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <osKernelStart+0x3a>
    stat = osErrorISR;
 800748e:	f06f 0305 	mvn.w	r3, #5
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e00e      	b.n	80074b4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007496:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <osKernelStart+0x64>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d107      	bne.n	80074ae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800749e:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <osKernelStart+0x64>)
 80074a0:	2202      	movs	r2, #2
 80074a2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80074a4:	f001 fc2e 	bl	8008d04 <vTaskStartScheduler>
      stat = osOK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e002      	b.n	80074b4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80074ae:	f04f 33ff 	mov.w	r3, #4294967295
 80074b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074b4:	68fb      	ldr	r3, [r7, #12]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	200002e0 	.word	0x200002e0

080074c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b092      	sub	sp, #72	; 0x48
 80074c8:	af04      	add	r7, sp, #16
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d4:	f3ef 8305 	mrs	r3, IPSR
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 8094 	bne.w	800760a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e2:	f3ef 8310 	mrs	r3, PRIMASK
 80074e6:	623b      	str	r3, [r7, #32]
  return(result);
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f040 808d 	bne.w	800760a <osThreadNew+0x146>
 80074f0:	4b48      	ldr	r3, [pc, #288]	; (8007614 <osThreadNew+0x150>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d106      	bne.n	8007506 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074f8:	f3ef 8311 	mrs	r3, BASEPRI
 80074fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 8082 	bne.w	800760a <osThreadNew+0x146>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d07e      	beq.n	800760a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800750c:	2380      	movs	r3, #128	; 0x80
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007510:	2318      	movs	r3, #24
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007514:	2300      	movs	r3, #0
 8007516:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007518:	f107 031b 	add.w	r3, r7, #27
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800751e:	f04f 33ff 	mov.w	r3, #4294967295
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d045      	beq.n	80075b6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <osThreadNew+0x74>
        name = attr->name;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <osThreadNew+0x9a>
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	2b38      	cmp	r3, #56	; 0x38
 8007550:	d805      	bhi.n	800755e <osThreadNew+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <osThreadNew+0x9e>
        return (NULL);
 800755e:	2300      	movs	r3, #0
 8007560:	e054      	b.n	800760c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	089b      	lsrs	r3, r3, #2
 8007570:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00e      	beq.n	8007598 <osThreadNew+0xd4>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	2b5b      	cmp	r3, #91	; 0x5b
 8007580:	d90a      	bls.n	8007598 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <osThreadNew+0xd4>
        mem = 1;
 8007592:	2301      	movs	r3, #1
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
 8007596:	e010      	b.n	80075ba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10c      	bne.n	80075ba <osThreadNew+0xf6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d108      	bne.n	80075ba <osThreadNew+0xf6>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d104      	bne.n	80075ba <osThreadNew+0xf6>
          mem = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075b4:	e001      	b.n	80075ba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d110      	bne.n	80075e2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c8:	9202      	str	r2, [sp, #8]
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f001 f9cc 	bl	8008974 <xTaskCreateStatic>
 80075dc:	4603      	mov	r3, r0
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e013      	b.n	800760a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d110      	bne.n	800760a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f001 fa13 	bl	8008a26 <xTaskCreate>
 8007600:	4603      	mov	r3, r0
 8007602:	2b01      	cmp	r3, #1
 8007604:	d001      	beq.n	800760a <osThreadNew+0x146>
          hTask = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800760a:	697b      	ldr	r3, [r7, #20]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3738      	adds	r7, #56	; 0x38
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	200002e0 	.word	0x200002e0

08007618 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007620:	f3ef 8305 	mrs	r3, IPSR
 8007624:	613b      	str	r3, [r7, #16]
  return(result);
 8007626:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10f      	bne.n	800764c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800762c:	f3ef 8310 	mrs	r3, PRIMASK
 8007630:	60fb      	str	r3, [r7, #12]
  return(result);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <osDelay+0x34>
 8007638:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <osDelay+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d109      	bne.n	8007654 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007640:	f3ef 8311 	mrs	r3, BASEPRI
 8007644:	60bb      	str	r3, [r7, #8]
  return(result);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <osDelay+0x3c>
    stat = osErrorISR;
 800764c:	f06f 0305 	mvn.w	r3, #5
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e007      	b.n	8007664 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <osDelay+0x4c>
      vTaskDelay(ticks);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fb1c 	bl	8008c9c <vTaskDelay>
    }
  }

  return (stat);
 8007664:	697b      	ldr	r3, [r7, #20]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	200002e0 	.word	0x200002e0

08007674 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007680:	f3ef 8305 	mrs	r3, IPSR
 8007684:	617b      	str	r3, [r7, #20]
  return(result);
 8007686:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8007688:	2b00      	cmp	r3, #0
 800768a:	d13d      	bne.n	8007708 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768c:	f3ef 8310 	mrs	r3, PRIMASK
 8007690:	613b      	str	r3, [r7, #16]
  return(result);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d137      	bne.n	8007708 <osEventFlagsNew+0x94>
 8007698:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <osEventFlagsNew+0xa0>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d105      	bne.n	80076ac <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076a0:	f3ef 8311 	mrs	r3, BASEPRI
 80076a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d12d      	bne.n	8007708 <osEventFlagsNew+0x94>
    mem = -1;
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295
 80076b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d015      	beq.n	80076e4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <osEventFlagsNew+0x5a>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b1f      	cmp	r3, #31
 80076c6:	d902      	bls.n	80076ce <osEventFlagsNew+0x5a>
        mem = 1;
 80076c8:	2301      	movs	r3, #1
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	e00c      	b.n	80076e8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d108      	bne.n	80076e8 <osEventFlagsNew+0x74>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <osEventFlagsNew+0x74>
          mem = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	e001      	b.n	80076e8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d106      	bne.n	80076fc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f956 	bl	80079a4 <xEventGroupCreateStatic>
 80076f8:	61f8      	str	r0, [r7, #28]
 80076fa:	e005      	b.n	8007708 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8007702:	f000 f984 	bl	8007a0e <xEventGroupCreate>
 8007706:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007708:	69fb      	ldr	r3, [r7, #28]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	200002e0 	.word	0x200002e0

08007718 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <osEventFlagsSet+0x1e>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007736:	f06f 0303 	mvn.w	r3, #3
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	e03a      	b.n	80077b4 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800773e:	f3ef 8305 	mrs	r3, IPSR
 8007742:	617b      	str	r3, [r7, #20]
  return(result);
 8007744:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10f      	bne.n	800776a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800774a:	f3ef 8310 	mrs	r3, PRIMASK
 800774e:	613b      	str	r3, [r7, #16]
  return(result);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <osEventFlagsSet+0x52>
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <osEventFlagsSet+0xa8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d123      	bne.n	80077a6 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800775e:	f3ef 8311 	mrs	r3, BASEPRI
 8007762:	60fb      	str	r3, [r7, #12]
  return(result);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01d      	beq.n	80077a6 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800776e:	f107 0308 	add.w	r3, r7, #8
 8007772:	461a      	mov	r2, r3
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	69b8      	ldr	r0, [r7, #24]
 8007778:	f000 fb60 	bl	8007e3c <xEventGroupSetBitsFromISR>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8007782:	f06f 0302 	mvn.w	r3, #2
 8007786:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8007788:	e013      	b.n	80077b2 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <osEventFlagsSet+0x9a>
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <osEventFlagsSet+0xac>)
 8007796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80077a4:	e005      	b.n	80077b2 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	69b8      	ldr	r0, [r7, #24]
 80077aa:	f000 fa82 	bl	8007cb2 <xEventGroupSetBits>
 80077ae:	61f8      	str	r0, [r7, #28]
 80077b0:	e000      	b.n	80077b4 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80077b2:	bf00      	nop
  }

  return (rflags);
 80077b4:	69fb      	ldr	r3, [r7, #28]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200002e0 	.word	0x200002e0
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <osEventFlagsClear+0x1e>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80077e6:	f06f 0303 	mvn.w	r3, #3
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	e029      	b.n	8007842 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ee:	f3ef 8305 	mrs	r3, IPSR
 80077f2:	617b      	str	r3, [r7, #20]
  return(result);
 80077f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10f      	bne.n	800781a <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077fa:	f3ef 8310 	mrs	r3, PRIMASK
 80077fe:	613b      	str	r3, [r7, #16]
  return(result);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <osEventFlagsClear+0x52>
 8007806:	4b11      	ldr	r3, [pc, #68]	; (800784c <osEventFlagsClear+0x84>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d114      	bne.n	8007838 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800780e:	f3ef 8311 	mrs	r3, BASEPRI
 8007812:	60fb      	str	r3, [r7, #12]
  return(result);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00e      	beq.n	8007838 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800781a:	69b8      	ldr	r0, [r7, #24]
 800781c:	f000 fa26 	bl	8007c6c <xEventGroupGetBitsFromISR>
 8007820:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	69b8      	ldr	r0, [r7, #24]
 8007826:	f000 fa0d 	bl	8007c44 <xEventGroupClearBitsFromISR>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d108      	bne.n	8007842 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8007830:	f06f 0302 	mvn.w	r3, #2
 8007834:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8007836:	e004      	b.n	8007842 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	69b8      	ldr	r0, [r7, #24]
 800783c:	f000 f9cc 	bl	8007bd8 <xEventGroupClearBits>
 8007840:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8007842:	69fb      	ldr	r3, [r7, #28]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200002e0 	.word	0x200002e0

08007850 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b08e      	sub	sp, #56	; 0x38
 8007854:	af02      	add	r7, sp, #8
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <osEventFlagsWait+0x22>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8007872:	f06f 0303 	mvn.w	r3, #3
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
 8007878:	e059      	b.n	800792e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787a:	f3ef 8305 	mrs	r3, IPSR
 800787e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007880:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10f      	bne.n	80078a6 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007886:	f3ef 8310 	mrs	r3, PRIMASK
 800788a:	61bb      	str	r3, [r7, #24]
  return(result);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <osEventFlagsWait+0x56>
 8007892:	4b29      	ldr	r3, [pc, #164]	; (8007938 <osEventFlagsWait+0xe8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d109      	bne.n	80078ae <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800789a:	f3ef 8311 	mrs	r3, BASEPRI
 800789e:	617b      	str	r3, [r7, #20]
  return(result);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80078a6:	f06f 0305 	mvn.w	r3, #5
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
 80078ac:	e03f      	b.n	800792e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078bc:	e001      	b.n	80078c2 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80078be:	2300      	movs	r3, #0
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d0:	e001      	b.n	80078d6 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	6a38      	ldr	r0, [r7, #32]
 80078e2:	f000 f8af 	bl	8007a44 <xEventGroupWaitBits>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d019      	beq.n	800792e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8007900:	f06f 0301 	mvn.w	r3, #1
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
 8007906:	e012      	b.n	800792e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007908:	f06f 0302 	mvn.w	r3, #2
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
 800790e:	e00e      	b.n	800792e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	4013      	ands	r3, r2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d109      	bne.n	800792e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8007920:	f06f 0301 	mvn.w	r3, #1
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
 8007926:	e002      	b.n	800792e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007928:	f06f 0302 	mvn.w	r3, #2
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007930:	4618      	mov	r0, r3
 8007932:	3730      	adds	r7, #48	; 0x30
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	200002e0 	.word	0x200002e0

0800793c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4a07      	ldr	r2, [pc, #28]	; (8007968 <vApplicationGetIdleTaskMemory+0x2c>)
 800794c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4a06      	ldr	r2, [pc, #24]	; (800796c <vApplicationGetIdleTaskMemory+0x30>)
 8007952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2280      	movs	r2, #128	; 0x80
 8007958:	601a      	str	r2, [r3, #0]
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	200002e4 	.word	0x200002e4
 800796c:	20000340 	.word	0x20000340

08007970 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4a07      	ldr	r2, [pc, #28]	; (800799c <vApplicationGetTimerTaskMemory+0x2c>)
 8007980:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4a06      	ldr	r2, [pc, #24]	; (80079a0 <vApplicationGetTimerTaskMemory+0x30>)
 8007986:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800798e:	601a      	str	r2, [r3, #0]
}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	20000540 	.word	0x20000540
 80079a0:	2000059c 	.word	0x2000059c

080079a4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	e7fe      	b.n	80079c4 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80079c6:	2320      	movs	r3, #32
 80079c8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d009      	beq.n	80079e4 <xEventGroupCreateStatic+0x40>
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	e7fe      	b.n	80079e2 <xEventGroupCreateStatic+0x3e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fa33 	bl	8007e64 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2201      	movs	r2, #1
 8007a02:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8007a04:	697b      	ldr	r3, [r7, #20]
	}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8007a14:	2020      	movs	r0, #32
 8007a16:	f002 fcb3 	bl	800a380 <pvPortMalloc>
 8007a1a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fa19 	bl	8007e64 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8007a38:	687b      	ldr	r3, [r7, #4]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b090      	sub	sp, #64	; 0x40
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <xEventGroupWaitBits+0x34>
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	623b      	str	r3, [r7, #32]
 8007a76:	e7fe      	b.n	8007a76 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <xEventGroupWaitBits+0x52>
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	61fb      	str	r3, [r7, #28]
 8007a94:	e7fe      	b.n	8007a94 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <xEventGroupWaitBits+0x6c>
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e7fe      	b.n	8007aae <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab0:	f001 fe04 	bl	80096bc <xTaskGetSchedulerState>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <xEventGroupWaitBits+0x7c>
 8007aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <xEventGroupWaitBits+0x80>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <xEventGroupWaitBits+0x82>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <xEventGroupWaitBits+0x9a>
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	e7fe      	b.n	8007adc <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8007ade:	f001 f975 	bl	8008dcc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aee:	f000 f983 	bl	8007df8 <prvTestWaitCondition>
 8007af2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00e      	beq.n	8007b18 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d028      	beq.n	8007b5a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	401a      	ands	r2, r3
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	e020      	b.n	8007b5a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007b22:	2301      	movs	r3, #1
 8007b24:	633b      	str	r3, [r7, #48]	; 0x30
 8007b26:	e018      	b.n	8007b5a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b34:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b42:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b46:	1d18      	adds	r0, r3, #4
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b50:	4619      	mov	r1, r3
 8007b52:	f001 fb33 	bl	80091bc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007b5a:	f001 f945 	bl	8008de8 <xTaskResumeAll>
 8007b5e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d031      	beq.n	8007bca <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <xEventGroupWaitBits+0x190>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007b7c:	f001 fe28 	bl	80097d0 <uxTaskResetEventItemValue>
 8007b80:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d11a      	bne.n	8007bc2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8007b8c:	f002 fade 	bl	800a14c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b9c:	f000 f92c 	bl	8007df8 <prvTestWaitCondition>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	401a      	ands	r2, r3
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007bbe:	f002 faf3 	bl	800a1a8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3740      	adds	r7, #64	; 0x40
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	e000ed04 	.word	0xe000ed04

08007bd8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d109      	bne.n	8007c00 <xEventGroupClearBits+0x28>
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e7fe      	b.n	8007bfe <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <xEventGroupClearBits+0x46>
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60bb      	str	r3, [r7, #8]
 8007c1c:	e7fe      	b.n	8007c1c <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8007c1e:	f002 fa95 	bl	800a14c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	401a      	ands	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007c36:	f002 fab7 	bl	800a1a8 <vPortExitCritical>

	return uxReturn;
 8007c3a:	693b      	ldr	r3, [r7, #16]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8007c4e:	2300      	movs	r3, #0
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	4804      	ldr	r0, [pc, #16]	; (8007c68 <xEventGroupClearBitsFromISR+0x24>)
 8007c56:	f002 f931 	bl	8009ebc <xTimerPendFunctionCallFromISR>
 8007c5a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
	}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	08007ddf 	.word	0x08007ddf

08007c6c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b089      	sub	sp, #36	; 0x24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c78:	f3ef 8211 	mrs	r2, BASEPRI
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	60fa      	str	r2, [r7, #12]
 8007c8e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c90:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c92:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	617b      	str	r3, [r7, #20]
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007ca4:	697b      	ldr	r3, [r7, #20]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3724      	adds	r7, #36	; 0x24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b08e      	sub	sp, #56	; 0x38
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <xEventGroupSetBits+0x30>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	e7fe      	b.n	8007ce0 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d009      	beq.n	8007d00 <xEventGroupSetBits+0x4e>
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	e7fe      	b.n	8007cfe <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	3304      	adds	r3, #4
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	3308      	adds	r3, #8
 8007d0a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007d0c:	f001 f85e 	bl	8008dcc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007d22:	e03c      	b.n	8007d9e <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d3a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d42:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d108      	bne.n	8007d60 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d5e:	e008      	b.n	8007d72 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	4013      	ands	r3, r2
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d101      	bne.n	8007d72 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d010      	beq.n	8007d9a <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d92:	4619      	mov	r1, r3
 8007d94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d96:	f001 fad7 	bl	8009348 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d1be      	bne.n	8007d24 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	43db      	mvns	r3, r3
 8007dae:	401a      	ands	r2, r3
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007db4:	f001 f818 	bl	8008de8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	681b      	ldr	r3, [r3, #0]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3738      	adds	r7, #56	; 0x38
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ff6e 	bl	8007cb2 <xEventGroupSetBits>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff fef4 	bl	8007bd8 <xEventGroupClearBits>
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	e007      	b.n	8007e2e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4013      	ands	r3, r2
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d101      	bne.n	8007e2e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007e2e:	697b      	ldr	r3, [r7, #20]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	68f9      	ldr	r1, [r7, #12]
 8007e4e:	4804      	ldr	r0, [pc, #16]	; (8007e60 <xEventGroupSetBitsFromISR+0x24>)
 8007e50:	f002 f834 	bl	8009ebc <xTimerPendFunctionCallFromISR>
 8007e54:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007e56:	697b      	ldr	r3, [r7, #20]
	}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	08007dc5 	.word	0x08007dc5

08007e64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f103 0208 	add.w	r2, r3, #8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f103 0208 	add.w	r2, r3, #8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f103 0208 	add.w	r2, r3, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d103      	bne.n	8007f26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e00c      	b.n	8007f40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e002      	b.n	8007f34 <vListInsert+0x2e>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d2f6      	bcs.n	8007f2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	601a      	str	r2, [r3, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6892      	ldr	r2, [r2, #8]
 8007f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6852      	ldr	r2, [r2, #4]
 8007f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d103      	bne.n	8007fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	1e5a      	subs	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d109      	bne.n	8007ff4 <xQueueGenericReset+0x28>
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	e7fe      	b.n	8007ff2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007ff4:	f002 f8aa 	bl	800a14c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008000:	68f9      	ldr	r1, [r7, #12]
 8008002:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	441a      	add	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008024:	3b01      	subs	r3, #1
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800802a:	fb01 f303 	mul.w	r3, r1, r3
 800802e:	441a      	add	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	22ff      	movs	r2, #255	; 0xff
 8008038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	22ff      	movs	r2, #255	; 0xff
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d114      	bne.n	8008074 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01a      	beq.n	8008088 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3310      	adds	r3, #16
 8008056:	4618      	mov	r0, r3
 8008058:	f001 f914 	bl	8009284 <xTaskRemoveFromEventList>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d012      	beq.n	8008088 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008062:	4b0d      	ldr	r3, [pc, #52]	; (8008098 <xQueueGenericReset+0xcc>)
 8008064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	e009      	b.n	8008088 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3310      	adds	r3, #16
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff fef3 	bl	8007e64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3324      	adds	r3, #36	; 0x24
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff feee 	bl	8007e64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008088:	f002 f88e 	bl	800a1a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800808c:	2301      	movs	r3, #1
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08e      	sub	sp, #56	; 0x38
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <xQueueGenericCreateStatic+0x28>
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c2:	e7fe      	b.n	80080c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <xQueueGenericCreateStatic+0x42>
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <xQueueGenericCreateStatic+0x4e>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <xQueueGenericCreateStatic+0x52>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <xQueueGenericCreateStatic+0x54>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d109      	bne.n	8008108 <xQueueGenericCreateStatic+0x6c>
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	623b      	str	r3, [r7, #32]
 8008106:	e7fe      	b.n	8008106 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <xQueueGenericCreateStatic+0x78>
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <xQueueGenericCreateStatic+0x7c>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <xQueueGenericCreateStatic+0x7e>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <xQueueGenericCreateStatic+0x96>
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	e7fe      	b.n	8008130 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008132:	2350      	movs	r3, #80	; 0x50
 8008134:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b50      	cmp	r3, #80	; 0x50
 800813a:	d009      	beq.n	8008150 <xQueueGenericCreateStatic+0xb4>
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	e7fe      	b.n	800814e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00d      	beq.n	8008176 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008162:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	4613      	mov	r3, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f805 	bl	8008180 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008178:	4618      	mov	r0, r3
 800817a:	3730      	adds	r7, #48	; 0x30
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e002      	b.n	80081a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ae:	2101      	movs	r1, #1
 80081b0:	69b8      	ldr	r0, [r7, #24]
 80081b2:	f7ff ff0b 	bl	8007fcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <xQueueGenericSend+0x30>
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081f6:	e7fe      	b.n	80081f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <xQueueGenericSend+0x3e>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <xQueueGenericSend+0x42>
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <xQueueGenericSend+0x44>
 800820a:	2300      	movs	r3, #0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <xQueueGenericSend+0x5c>
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
 8008222:	e7fe      	b.n	8008222 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d103      	bne.n	8008232 <xQueueGenericSend+0x6a>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <xQueueGenericSend+0x6e>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueGenericSend+0x70>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d109      	bne.n	8008250 <xQueueGenericSend+0x88>
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	e7fe      	b.n	800824e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008250:	f001 fa34 	bl	80096bc <xTaskGetSchedulerState>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <xQueueGenericSend+0x98>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <xQueueGenericSend+0x9c>
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <xQueueGenericSend+0x9e>
 8008264:	2300      	movs	r3, #0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <xQueueGenericSend+0xb6>
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	e7fe      	b.n	800827c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800827e:	f001 ff65 	bl	800a14c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	429a      	cmp	r2, r3
 800828c:	d302      	bcc.n	8008294 <xQueueGenericSend+0xcc>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d129      	bne.n	80082e8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800829a:	f000 f9ff 	bl	800869c <prvCopyDataToQueue>
 800829e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d010      	beq.n	80082ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	3324      	adds	r3, #36	; 0x24
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 ffe9 	bl	8009284 <xTaskRemoveFromEventList>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d013      	beq.n	80082e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082b8:	4b3f      	ldr	r3, [pc, #252]	; (80083b8 <xQueueGenericSend+0x1f0>)
 80082ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	e00a      	b.n	80082e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082d0:	4b39      	ldr	r3, [pc, #228]	; (80083b8 <xQueueGenericSend+0x1f0>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082e0:	f001 ff62 	bl	800a1a8 <vPortExitCritical>
				return pdPASS;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e063      	b.n	80083b0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ee:	f001 ff5b 	bl	800a1a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e05c      	b.n	80083b0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082fc:	f107 0314 	add.w	r3, r7, #20
 8008300:	4618      	mov	r0, r3
 8008302:	f001 f881 	bl	8009408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008306:	2301      	movs	r3, #1
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800830a:	f001 ff4d 	bl	800a1a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800830e:	f000 fd5d 	bl	8008dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008312:	f001 ff1b 	bl	800a14c <vPortEnterCritical>
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800831c:	b25b      	sxtb	r3, r3
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d103      	bne.n	800832c <xQueueGenericSend+0x164>
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008332:	b25b      	sxtb	r3, r3
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d103      	bne.n	8008342 <xQueueGenericSend+0x17a>
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008342:	f001 ff31 	bl	800a1a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008346:	1d3a      	adds	r2, r7, #4
 8008348:	f107 0314 	add.w	r3, r7, #20
 800834c:	4611      	mov	r1, r2
 800834e:	4618      	mov	r0, r3
 8008350:	f001 f870 	bl	8009434 <xTaskCheckForTimeOut>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d124      	bne.n	80083a4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800835a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835c:	f000 fa96 	bl	800888c <prvIsQueueFull>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d018      	beq.n	8008398 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	3310      	adds	r3, #16
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f000 ff00 	bl	8009174 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008376:	f000 fa21 	bl	80087bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800837a:	f000 fd35 	bl	8008de8 <xTaskResumeAll>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	f47f af7c 	bne.w	800827e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <xQueueGenericSend+0x1f0>)
 8008388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	e772      	b.n	800827e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839a:	f000 fa0f 	bl	80087bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800839e:	f000 fd23 	bl	8008de8 <xTaskResumeAll>
 80083a2:	e76c      	b.n	800827e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083a6:	f000 fa09 	bl	80087bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083aa:	f000 fd1d 	bl	8008de8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083ae:	2300      	movs	r3, #0
		}
	}
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3738      	adds	r7, #56	; 0x38
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08e      	sub	sp, #56	; 0x38
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <xQueueGenericSendFromISR+0x2c>
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
 80083e6:	e7fe      	b.n	80083e6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <xQueueGenericSendFromISR+0x3a>
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <xQueueGenericSendFromISR+0x3e>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e000      	b.n	80083fc <xQueueGenericSendFromISR+0x40>
 80083fa:	2300      	movs	r3, #0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <xQueueGenericSendFromISR+0x58>
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	623b      	str	r3, [r7, #32]
 8008412:	e7fe      	b.n	8008412 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d103      	bne.n	8008422 <xQueueGenericSendFromISR+0x66>
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <xQueueGenericSendFromISR+0x6a>
 8008422:	2301      	movs	r3, #1
 8008424:	e000      	b.n	8008428 <xQueueGenericSendFromISR+0x6c>
 8008426:	2300      	movs	r3, #0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d109      	bne.n	8008440 <xQueueGenericSendFromISR+0x84>
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	e7fe      	b.n	800843e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008440:	f001 ff60 	bl	800a304 <vPortValidateInterruptPriority>
	__asm volatile
 8008444:	f3ef 8211 	mrs	r2, BASEPRI
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	61ba      	str	r2, [r7, #24]
 800845a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800845c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <xQueueGenericSendFromISR+0xb6>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d12c      	bne.n	80084cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008482:	f000 f90b 	bl	800869c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008486:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800848a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848e:	d112      	bne.n	80084b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	2b00      	cmp	r3, #0
 8008496:	d016      	beq.n	80084c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	3324      	adds	r3, #36	; 0x24
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fef1 	bl	8009284 <xTaskRemoveFromEventList>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00e      	beq.n	80084c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	e007      	b.n	80084c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084ba:	3301      	adds	r3, #1
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	b25a      	sxtb	r2, r3
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084c6:	2301      	movs	r3, #1
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80084ca:	e001      	b.n	80084d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	637b      	str	r3, [r7, #52]	; 0x34
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3738      	adds	r7, #56	; 0x38
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08c      	sub	sp, #48	; 0x30
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <xQueueReceive+0x2e>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	623b      	str	r3, [r7, #32]
 8008510:	e7fe      	b.n	8008510 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <xQueueReceive+0x3c>
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <xQueueReceive+0x40>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <xQueueReceive+0x42>
 8008524:	2300      	movs	r3, #0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <xQueueReceive+0x5a>
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	e7fe      	b.n	800853c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800853e:	f001 f8bd 	bl	80096bc <xTaskGetSchedulerState>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <xQueueReceive+0x6a>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <xQueueReceive+0x6e>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <xQueueReceive+0x70>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d109      	bne.n	800856c <xQueueReceive+0x88>
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	e7fe      	b.n	800856a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800856c:	f001 fdee 	bl	800a14c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01f      	beq.n	80085bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008580:	f000 f8f6 	bl	8008770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00f      	beq.n	80085b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	3310      	adds	r3, #16
 8008598:	4618      	mov	r0, r3
 800859a:	f000 fe73 	bl	8009284 <xTaskRemoveFromEventList>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d007      	beq.n	80085b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085a4:	4b3c      	ldr	r3, [pc, #240]	; (8008698 <xQueueReceive+0x1b4>)
 80085a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085b4:	f001 fdf8 	bl	800a1a8 <vPortExitCritical>
				return pdPASS;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e069      	b.n	8008690 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085c2:	f001 fdf1 	bl	800a1a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e062      	b.n	8008690 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d106      	bne.n	80085de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 ff17 	bl	8009408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085da:	2301      	movs	r3, #1
 80085dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085de:	f001 fde3 	bl	800a1a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085e2:	f000 fbf3 	bl	8008dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085e6:	f001 fdb1 	bl	800a14c <vPortEnterCritical>
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d103      	bne.n	8008600 <xQueueReceive+0x11c>
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008606:	b25b      	sxtb	r3, r3
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860c:	d103      	bne.n	8008616 <xQueueReceive+0x132>
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008616:	f001 fdc7 	bl	800a1a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800861a:	1d3a      	adds	r2, r7, #4
 800861c:	f107 0310 	add.w	r3, r7, #16
 8008620:	4611      	mov	r1, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f000 ff06 	bl	8009434 <xTaskCheckForTimeOut>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d123      	bne.n	8008676 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800862e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008630:	f000 f916 	bl	8008860 <prvIsQueueEmpty>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d017      	beq.n	800866a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	3324      	adds	r3, #36	; 0x24
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fd96 	bl	8009174 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864a:	f000 f8b7 	bl	80087bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800864e:	f000 fbcb 	bl	8008de8 <xTaskResumeAll>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d189      	bne.n	800856c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008658:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <xQueueReceive+0x1b4>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	e780      	b.n	800856c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800866a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800866c:	f000 f8a6 	bl	80087bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008670:	f000 fbba 	bl	8008de8 <xTaskResumeAll>
 8008674:	e77a      	b.n	800856c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008678:	f000 f8a0 	bl	80087bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800867c:	f000 fbb4 	bl	8008de8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008682:	f000 f8ed 	bl	8008860 <prvIsQueueEmpty>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	f43f af6f 	beq.w	800856c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800868e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008690:	4618      	mov	r0, r3
 8008692:	3730      	adds	r7, #48	; 0x30
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10d      	bne.n	80086d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d14d      	bne.n	800875e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 f816 	bl	80096f8 <xTaskPriorityDisinherit>
 80086cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	605a      	str	r2, [r3, #4]
 80086d4:	e043      	b.n	800875e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d119      	bne.n	8008710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6898      	ldr	r0, [r3, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	461a      	mov	r2, r3
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	f002 f9b8 	bl	800aa5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f4:	441a      	add	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	d32b      	bcc.n	800875e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	609a      	str	r2, [r3, #8]
 800870e:	e026      	b.n	800875e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	68d8      	ldr	r0, [r3, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008718:	461a      	mov	r2, r3
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	f002 f99e 	bl	800aa5c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	425b      	negs	r3, r3
 800872a:	441a      	add	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d207      	bcs.n	800874c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	425b      	negs	r3, r3
 8008746:	441a      	add	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b02      	cmp	r3, #2
 8008750:	d105      	bne.n	800875e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	3b01      	subs	r3, #1
 800875c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008766:	697b      	ldr	r3, [r7, #20]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	2b00      	cmp	r3, #0
 8008780:	d018      	beq.n	80087b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	441a      	add	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	429a      	cmp	r2, r3
 800879a:	d303      	bcc.n	80087a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68d9      	ldr	r1, [r3, #12]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ac:	461a      	mov	r2, r3
 80087ae:	6838      	ldr	r0, [r7, #0]
 80087b0:	f002 f954 	bl	800aa5c <memcpy>
	}
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087c4:	f001 fcc2 	bl	800a14c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087d0:	e011      	b.n	80087f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3324      	adds	r3, #36	; 0x24
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fd50 	bl	8009284 <xTaskRemoveFromEventList>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087ea:	f000 fe83 	bl	80094f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dce9      	bgt.n	80087d2 <prvUnlockQueue+0x16>
 80087fe:	e000      	b.n	8008802 <prvUnlockQueue+0x46>
					break;
 8008800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	22ff      	movs	r2, #255	; 0xff
 8008806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800880a:	f001 fccd 	bl	800a1a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800880e:	f001 fc9d 	bl	800a14c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800881a:	e011      	b.n	8008840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d012      	beq.n	800884a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3310      	adds	r3, #16
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fd2b 	bl	8009284 <xTaskRemoveFromEventList>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008834:	f000 fe5e 	bl	80094f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	3b01      	subs	r3, #1
 800883c:	b2db      	uxtb	r3, r3
 800883e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dce9      	bgt.n	800881c <prvUnlockQueue+0x60>
 8008848:	e000      	b.n	800884c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800884a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	22ff      	movs	r2, #255	; 0xff
 8008850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008854:	f001 fca8 	bl	800a1a8 <vPortExitCritical>
}
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008868:	f001 fc70 	bl	800a14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008874:	2301      	movs	r3, #1
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e001      	b.n	800887e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800887e:	f001 fc93 	bl	800a1a8 <vPortExitCritical>

	return xReturn;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008894:	f001 fc5a 	bl	800a14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d102      	bne.n	80088aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e001      	b.n	80088ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088ae:	f001 fc7b 	bl	800a1a8 <vPortExitCritical>

	return xReturn;
 80088b2:	68fb      	ldr	r3, [r7, #12]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e014      	b.n	80088f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088cc:	4a0e      	ldr	r2, [pc, #56]	; (8008908 <vQueueAddToRegistry+0x4c>)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10b      	bne.n	80088f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088d8:	490b      	ldr	r1, [pc, #44]	; (8008908 <vQueueAddToRegistry+0x4c>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088e2:	4a09      	ldr	r2, [pc, #36]	; (8008908 <vQueueAddToRegistry+0x4c>)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	4413      	add	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088ee:	e005      	b.n	80088fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3301      	adds	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b07      	cmp	r3, #7
 80088fa:	d9e7      	bls.n	80088cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088fc:	bf00      	nop
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	20008db0 	.word	0x20008db0

0800890c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800891c:	f001 fc16 	bl	800a14c <vPortEnterCritical>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008926:	b25b      	sxtb	r3, r3
 8008928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892c:	d103      	bne.n	8008936 <vQueueWaitForMessageRestricted+0x2a>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800893c:	b25b      	sxtb	r3, r3
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008942:	d103      	bne.n	800894c <vQueueWaitForMessageRestricted+0x40>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800894c:	f001 fc2c 	bl	800a1a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	3324      	adds	r3, #36	; 0x24
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fc65 	bl	8009230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008966:	6978      	ldr	r0, [r7, #20]
 8008968:	f7ff ff28 	bl	80087bc <prvUnlockQueue>
	}
 800896c:	bf00      	nop
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08e      	sub	sp, #56	; 0x38
 8008978:	af04      	add	r7, sp, #16
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008984:	2b00      	cmp	r3, #0
 8008986:	d109      	bne.n	800899c <xTaskCreateStatic+0x28>
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	623b      	str	r3, [r7, #32]
 800899a:	e7fe      	b.n	800899a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <xTaskCreateStatic+0x42>
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e7fe      	b.n	80089b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089b6:	235c      	movs	r3, #92	; 0x5c
 80089b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b5c      	cmp	r3, #92	; 0x5c
 80089be:	d009      	beq.n	80089d4 <xTaskCreateStatic+0x60>
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	61bb      	str	r3, [r7, #24]
 80089d2:	e7fe      	b.n	80089d2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01e      	beq.n	8008a18 <xTaskCreateStatic+0xa4>
 80089da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01b      	beq.n	8008a18 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2202      	movs	r2, #2
 80089ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089f2:	2300      	movs	r3, #0
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	f107 0314 	add.w	r3, r7, #20
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 f850 	bl	8008ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a12:	f000 f8d3 	bl	8008bbc <prvAddNewTaskToReadyList>
 8008a16:	e001      	b.n	8008a1c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a1c:	697b      	ldr	r3, [r7, #20]
	}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3728      	adds	r7, #40	; 0x28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08c      	sub	sp, #48	; 0x30
 8008a2a:	af04      	add	r7, sp, #16
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 fca0 	bl	800a380 <pvPortMalloc>
 8008a40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00e      	beq.n	8008a66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a48:	205c      	movs	r0, #92	; 0x5c
 8008a4a:	f001 fc99 	bl	800a380 <pvPortMalloc>
 8008a4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a5c:	e005      	b.n	8008a6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f001 fd50 	bl	800a504 <vPortFree>
 8008a64:	e001      	b.n	8008a6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d017      	beq.n	8008aa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a78:	88fa      	ldrh	r2, [r7, #6]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f80e 	bl	8008ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a94:	69f8      	ldr	r0, [r7, #28]
 8008a96:	f000 f891 	bl	8008bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e002      	b.n	8008aa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3720      	adds	r7, #32
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	21a5      	movs	r1, #165	; 0xa5
 8008aca:	f001 ffd2 	bl	800aa72 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f023 0307 	bic.w	r3, r3, #7
 8008ae6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <prvInitialiseNewTask+0x56>
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e7fe      	b.n	8008b04 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b06:	2300      	movs	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	e012      	b.n	8008b32 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	7819      	ldrb	r1, [r3, #0]
 8008b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	3334      	adds	r3, #52	; 0x34
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	4413      	add	r3, r2
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d006      	beq.n	8008b3a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	2b0f      	cmp	r3, #15
 8008b36:	d9e9      	bls.n	8008b0c <prvInitialiseNewTask+0x5c>
 8008b38:	e000      	b.n	8008b3c <prvInitialiseNewTask+0x8c>
		{
			break;
 8008b3a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	2b37      	cmp	r3, #55	; 0x37
 8008b48:	d901      	bls.n	8008b4e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b4a:	2337      	movs	r3, #55	; 0x37
 8008b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	3304      	adds	r3, #4
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff f99d 	bl	8007ea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	3318      	adds	r3, #24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff f998 	bl	8007ea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	69b8      	ldr	r0, [r7, #24]
 8008b9e:	f001 f9ad 	bl	8009efc <pxPortInitialiseStack>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bb4:	bf00      	nop
 8008bb6:	3720      	adds	r7, #32
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bc4:	f001 fac2 	bl	800a14c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bc8:	4b2d      	ldr	r3, [pc, #180]	; (8008c80 <prvAddNewTaskToReadyList+0xc4>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	4a2c      	ldr	r2, [pc, #176]	; (8008c80 <prvAddNewTaskToReadyList+0xc4>)
 8008bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bd2:	4b2c      	ldr	r3, [pc, #176]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bda:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008be0:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <prvAddNewTaskToReadyList+0xc4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d110      	bne.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008be8:	f000 fca8 	bl	800953c <prvInitialiseTaskLists>
 8008bec:	e00d      	b.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bee:	4b26      	ldr	r3, [pc, #152]	; (8008c88 <prvAddNewTaskToReadyList+0xcc>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bf6:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d802      	bhi.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c04:	4a1f      	ldr	r2, [pc, #124]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c0a:	4b20      	ldr	r3, [pc, #128]	; (8008c8c <prvAddNewTaskToReadyList+0xd0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	4a1e      	ldr	r2, [pc, #120]	; (8008c8c <prvAddNewTaskToReadyList+0xd0>)
 8008c12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c14:	4b1d      	ldr	r3, [pc, #116]	; (8008c8c <prvAddNewTaskToReadyList+0xd0>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <prvAddNewTaskToReadyList+0xd4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d903      	bls.n	8008c30 <prvAddNewTaskToReadyList+0x74>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	4a18      	ldr	r2, [pc, #96]	; (8008c90 <prvAddNewTaskToReadyList+0xd4>)
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4a15      	ldr	r2, [pc, #84]	; (8008c94 <prvAddNewTaskToReadyList+0xd8>)
 8008c3e:	441a      	add	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f7ff f939 	bl	8007ebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c4c:	f001 faac 	bl	800a1a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c50:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <prvAddNewTaskToReadyList+0xcc>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00e      	beq.n	8008c76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c58:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d207      	bcs.n	8008c76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <prvAddNewTaskToReadyList+0xdc>)
 8008c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000e70 	.word	0x20000e70
 8008c84:	2000099c 	.word	0x2000099c
 8008c88:	20000e7c 	.word	0x20000e7c
 8008c8c:	20000e8c 	.word	0x20000e8c
 8008c90:	20000e78 	.word	0x20000e78
 8008c94:	200009a0 	.word	0x200009a0
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d016      	beq.n	8008cdc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cae:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <vTaskDelay+0x60>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <vTaskDelay+0x2e>
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	60bb      	str	r3, [r7, #8]
 8008cc8:	e7fe      	b.n	8008cc8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008cca:	f000 f87f 	bl	8008dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cce:	2100      	movs	r1, #0
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fd95 	bl	8009800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cd6:	f000 f887 	bl	8008de8 <xTaskResumeAll>
 8008cda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d107      	bne.n	8008cf2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <vTaskDelay+0x64>)
 8008ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cf2:	bf00      	nop
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000e98 	.word	0x20000e98
 8008d00:	e000ed04 	.word	0xe000ed04

08008d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	; 0x28
 8008d08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d12:	463a      	mov	r2, r7
 8008d14:	1d39      	adds	r1, r7, #4
 8008d16:	f107 0308 	add.w	r3, r7, #8
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe fe0e 	bl	800793c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	9202      	str	r2, [sp, #8]
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	460a      	mov	r2, r1
 8008d32:	4920      	ldr	r1, [pc, #128]	; (8008db4 <vTaskStartScheduler+0xb0>)
 8008d34:	4820      	ldr	r0, [pc, #128]	; (8008db8 <vTaskStartScheduler+0xb4>)
 8008d36:	f7ff fe1d 	bl	8008974 <xTaskCreateStatic>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b1f      	ldr	r3, [pc, #124]	; (8008dbc <vTaskStartScheduler+0xb8>)
 8008d3e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d40:	4b1e      	ldr	r3, [pc, #120]	; (8008dbc <vTaskStartScheduler+0xb8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	e001      	b.n	8008d52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d102      	bne.n	8008d5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d58:	f000 fda6 	bl	80098a8 <xTimerCreateTimerTask>
 8008d5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d115      	bne.n	8008d90 <vTaskStartScheduler+0x8c>
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d76:	4b12      	ldr	r3, [pc, #72]	; (8008dc0 <vTaskStartScheduler+0xbc>)
 8008d78:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d7e:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <vTaskStartScheduler+0xc0>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008d84:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <vTaskStartScheduler+0xc4>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d8a:	f001 f941 	bl	800a010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d8e:	e00d      	b.n	8008dac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d96:	d109      	bne.n	8008dac <vTaskStartScheduler+0xa8>
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e7fe      	b.n	8008daa <vTaskStartScheduler+0xa6>
}
 8008dac:	bf00      	nop
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	0800cc60 	.word	0x0800cc60
 8008db8:	0800950d 	.word	0x0800950d
 8008dbc:	20000e94 	.word	0x20000e94
 8008dc0:	20000e90 	.word	0x20000e90
 8008dc4:	20000e7c 	.word	0x20000e7c
 8008dc8:	20000e74 	.word	0x20000e74

08008dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <vTaskSuspendAll+0x18>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	4a03      	ldr	r2, [pc, #12]	; (8008de4 <vTaskSuspendAll+0x18>)
 8008dd8:	6013      	str	r3, [r2, #0]
}
 8008dda:	bf00      	nop
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	20000e98 	.word	0x20000e98

08008de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008df6:	4b41      	ldr	r3, [pc, #260]	; (8008efc <xTaskResumeAll+0x114>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d109      	bne.n	8008e12 <xTaskResumeAll+0x2a>
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	e7fe      	b.n	8008e10 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e12:	f001 f99b 	bl	800a14c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e16:	4b39      	ldr	r3, [pc, #228]	; (8008efc <xTaskResumeAll+0x114>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	4a37      	ldr	r2, [pc, #220]	; (8008efc <xTaskResumeAll+0x114>)
 8008e1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e20:	4b36      	ldr	r3, [pc, #216]	; (8008efc <xTaskResumeAll+0x114>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d162      	bne.n	8008eee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e28:	4b35      	ldr	r3, [pc, #212]	; (8008f00 <xTaskResumeAll+0x118>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d05e      	beq.n	8008eee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e30:	e02f      	b.n	8008e92 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008e32:	4b34      	ldr	r3, [pc, #208]	; (8008f04 <xTaskResumeAll+0x11c>)
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3318      	adds	r3, #24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff f89a 	bl	8007f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff f895 	bl	8007f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e52:	4b2d      	ldr	r3, [pc, #180]	; (8008f08 <xTaskResumeAll+0x120>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d903      	bls.n	8008e62 <xTaskResumeAll+0x7a>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	; (8008f08 <xTaskResumeAll+0x120>)
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4a27      	ldr	r2, [pc, #156]	; (8008f0c <xTaskResumeAll+0x124>)
 8008e70:	441a      	add	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3304      	adds	r3, #4
 8008e76:	4619      	mov	r1, r3
 8008e78:	4610      	mov	r0, r2
 8008e7a:	f7ff f820 	bl	8007ebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e82:	4b23      	ldr	r3, [pc, #140]	; (8008f10 <xTaskResumeAll+0x128>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e8c:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <xTaskResumeAll+0x12c>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e92:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <xTaskResumeAll+0x11c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1cb      	bne.n	8008e32 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ea0:	f000 fbe6 	bl	8009670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <xTaskResumeAll+0x130>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d010      	beq.n	8008ed2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008eb0:	f000 f846 	bl	8008f40 <xTaskIncrementTick>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008eba:	4b16      	ldr	r3, [pc, #88]	; (8008f14 <xTaskResumeAll+0x12c>)
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1f1      	bne.n	8008eb0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008ecc:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <xTaskResumeAll+0x130>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ed2:	4b10      	ldr	r3, [pc, #64]	; (8008f14 <xTaskResumeAll+0x12c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ede:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <xTaskResumeAll+0x134>)
 8008ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eee:	f001 f95b 	bl	800a1a8 <vPortExitCritical>

	return xAlreadyYielded;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000e98 	.word	0x20000e98
 8008f00:	20000e70 	.word	0x20000e70
 8008f04:	20000e30 	.word	0x20000e30
 8008f08:	20000e78 	.word	0x20000e78
 8008f0c:	200009a0 	.word	0x200009a0
 8008f10:	2000099c 	.word	0x2000099c
 8008f14:	20000e84 	.word	0x20000e84
 8008f18:	20000e80 	.word	0x20000e80
 8008f1c:	e000ed04 	.word	0xe000ed04

08008f20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <xTaskGetTickCount+0x1c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f2c:	687b      	ldr	r3, [r7, #4]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000e74 	.word	0x20000e74

08008f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f4a:	4b51      	ldr	r3, [pc, #324]	; (8009090 <xTaskIncrementTick+0x150>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f040 808d 	bne.w	800906e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f54:	4b4f      	ldr	r3, [pc, #316]	; (8009094 <xTaskIncrementTick+0x154>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f5c:	4a4d      	ldr	r2, [pc, #308]	; (8009094 <xTaskIncrementTick+0x154>)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d11f      	bne.n	8008fa8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f68:	4b4b      	ldr	r3, [pc, #300]	; (8009098 <xTaskIncrementTick+0x158>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d009      	beq.n	8008f86 <xTaskIncrementTick+0x46>
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	e7fe      	b.n	8008f84 <xTaskIncrementTick+0x44>
 8008f86:	4b44      	ldr	r3, [pc, #272]	; (8009098 <xTaskIncrementTick+0x158>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	4b43      	ldr	r3, [pc, #268]	; (800909c <xTaskIncrementTick+0x15c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a41      	ldr	r2, [pc, #260]	; (8009098 <xTaskIncrementTick+0x158>)
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	4a41      	ldr	r2, [pc, #260]	; (800909c <xTaskIncrementTick+0x15c>)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	4b41      	ldr	r3, [pc, #260]	; (80090a0 <xTaskIncrementTick+0x160>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	4a3f      	ldr	r2, [pc, #252]	; (80090a0 <xTaskIncrementTick+0x160>)
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	f000 fb64 	bl	8009670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fa8:	4b3e      	ldr	r3, [pc, #248]	; (80090a4 <xTaskIncrementTick+0x164>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d34e      	bcc.n	8009050 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fb2:	4b39      	ldr	r3, [pc, #228]	; (8009098 <xTaskIncrementTick+0x158>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <xTaskIncrementTick+0x80>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <xTaskIncrementTick+0x82>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc6:	4b37      	ldr	r3, [pc, #220]	; (80090a4 <xTaskIncrementTick+0x164>)
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	601a      	str	r2, [r3, #0]
					break;
 8008fce:	e03f      	b.n	8009050 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fd0:	4b31      	ldr	r3, [pc, #196]	; (8009098 <xTaskIncrementTick+0x158>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d203      	bcs.n	8008ff0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	; (80090a4 <xTaskIncrementTick+0x164>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6013      	str	r3, [r2, #0]
						break;
 8008fee:	e02f      	b.n	8009050 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe ffbf 	bl	8007f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	3318      	adds	r3, #24
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe ffb6 	bl	8007f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009010:	4b25      	ldr	r3, [pc, #148]	; (80090a8 <xTaskIncrementTick+0x168>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d903      	bls.n	8009020 <xTaskIncrementTick+0xe0>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	4a22      	ldr	r2, [pc, #136]	; (80090a8 <xTaskIncrementTick+0x168>)
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4a1f      	ldr	r2, [pc, #124]	; (80090ac <xTaskIncrementTick+0x16c>)
 800902e:	441a      	add	r2, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	3304      	adds	r3, #4
 8009034:	4619      	mov	r1, r3
 8009036:	4610      	mov	r0, r2
 8009038:	f7fe ff41 	bl	8007ebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009040:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <xTaskIncrementTick+0x170>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	429a      	cmp	r2, r3
 8009048:	d3b3      	bcc.n	8008fb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800904e:	e7b0      	b.n	8008fb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009050:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <xTaskIncrementTick+0x170>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009056:	4915      	ldr	r1, [pc, #84]	; (80090ac <xTaskIncrementTick+0x16c>)
 8009058:	4613      	mov	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d907      	bls.n	8009078 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e004      	b.n	8009078 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <xTaskIncrementTick+0x174>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a0f      	ldr	r2, [pc, #60]	; (80090b4 <xTaskIncrementTick+0x174>)
 8009076:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009078:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <xTaskIncrementTick+0x178>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009080:	2301      	movs	r3, #1
 8009082:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009084:	697b      	ldr	r3, [r7, #20]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000e98 	.word	0x20000e98
 8009094:	20000e74 	.word	0x20000e74
 8009098:	20000e28 	.word	0x20000e28
 800909c:	20000e2c 	.word	0x20000e2c
 80090a0:	20000e88 	.word	0x20000e88
 80090a4:	20000e90 	.word	0x20000e90
 80090a8:	20000e78 	.word	0x20000e78
 80090ac:	200009a0 	.word	0x200009a0
 80090b0:	2000099c 	.word	0x2000099c
 80090b4:	20000e80 	.word	0x20000e80
 80090b8:	20000e84 	.word	0x20000e84

080090bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090c2:	4b27      	ldr	r3, [pc, #156]	; (8009160 <vTaskSwitchContext+0xa4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090ca:	4b26      	ldr	r3, [pc, #152]	; (8009164 <vTaskSwitchContext+0xa8>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090d0:	e040      	b.n	8009154 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80090d2:	4b24      	ldr	r3, [pc, #144]	; (8009164 <vTaskSwitchContext+0xa8>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80090d8:	4b23      	ldr	r3, [pc, #140]	; (8009168 <vTaskSwitchContext+0xac>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	e00f      	b.n	8009100 <vTaskSwitchContext+0x44>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <vTaskSwitchContext+0x3e>
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	607b      	str	r3, [r7, #4]
 80090f8:	e7fe      	b.n	80090f8 <vTaskSwitchContext+0x3c>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	491a      	ldr	r1, [pc, #104]	; (800916c <vTaskSwitchContext+0xb0>)
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0e5      	beq.n	80090e0 <vTaskSwitchContext+0x24>
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a13      	ldr	r2, [pc, #76]	; (800916c <vTaskSwitchContext+0xb0>)
 8009120:	4413      	add	r3, r2
 8009122:	60bb      	str	r3, [r7, #8]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	605a      	str	r2, [r3, #4]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	3308      	adds	r3, #8
 8009136:	429a      	cmp	r2, r3
 8009138:	d104      	bne.n	8009144 <vTaskSwitchContext+0x88>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	605a      	str	r2, [r3, #4]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	4a09      	ldr	r2, [pc, #36]	; (8009170 <vTaskSwitchContext+0xb4>)
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	4a06      	ldr	r2, [pc, #24]	; (8009168 <vTaskSwitchContext+0xac>)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6013      	str	r3, [r2, #0]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	20000e98 	.word	0x20000e98
 8009164:	20000e84 	.word	0x20000e84
 8009168:	20000e78 	.word	0x20000e78
 800916c:	200009a0 	.word	0x200009a0
 8009170:	2000099c 	.word	0x2000099c

08009174 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d109      	bne.n	8009198 <vTaskPlaceOnEventList+0x24>
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	e7fe      	b.n	8009196 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009198:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <vTaskPlaceOnEventList+0x44>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3318      	adds	r3, #24
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7fe feb0 	bl	8007f06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091a6:	2101      	movs	r1, #1
 80091a8:	6838      	ldr	r0, [r7, #0]
 80091aa:	f000 fb29 	bl	8009800 <prvAddCurrentTaskToDelayedList>
}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	2000099c 	.word	0x2000099c

080091bc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <vTaskPlaceOnUnorderedEventList+0x26>
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	617b      	str	r3, [r7, #20]
 80091e0:	e7fe      	b.n	80091e0 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80091e2:	4b11      	ldr	r3, [pc, #68]	; (8009228 <vTaskPlaceOnUnorderedEventList+0x6c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d109      	bne.n	80091fe <vTaskPlaceOnUnorderedEventList+0x42>
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	613b      	str	r3, [r7, #16]
 80091fc:	e7fe      	b.n	80091fc <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80091fe:	4b0b      	ldr	r3, [pc, #44]	; (800922c <vTaskPlaceOnUnorderedEventList+0x70>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009208:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800920a:	4b08      	ldr	r3, [pc, #32]	; (800922c <vTaskPlaceOnUnorderedEventList+0x70>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3318      	adds	r3, #24
 8009210:	4619      	mov	r1, r3
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7fe fe53 	bl	8007ebe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009218:	2101      	movs	r1, #1
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 faf0 	bl	8009800 <prvAddCurrentTaskToDelayedList>
}
 8009220:	bf00      	nop
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20000e98 	.word	0x20000e98
 800922c:	2000099c 	.word	0x2000099c

08009230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <vTaskPlaceOnEventListRestricted+0x26>
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e7fe      	b.n	8009254 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009256:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <vTaskPlaceOnEventListRestricted+0x50>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3318      	adds	r3, #24
 800925c:	4619      	mov	r1, r3
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7fe fe2d 	bl	8007ebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800926a:	f04f 33ff 	mov.w	r3, #4294967295
 800926e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	68b8      	ldr	r0, [r7, #8]
 8009274:	f000 fac4 	bl	8009800 <prvAddCurrentTaskToDelayedList>
	}
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	2000099c 	.word	0x2000099c

08009284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d109      	bne.n	80092ae <xTaskRemoveFromEventList+0x2a>
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	e7fe      	b.n	80092ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3318      	adds	r3, #24
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fe60 	bl	8007f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092b8:	4b1d      	ldr	r3, [pc, #116]	; (8009330 <xTaskRemoveFromEventList+0xac>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d11d      	bne.n	80092fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fe57 	bl	8007f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ce:	4b19      	ldr	r3, [pc, #100]	; (8009334 <xTaskRemoveFromEventList+0xb0>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d903      	bls.n	80092de <xTaskRemoveFromEventList+0x5a>
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092da:	4a16      	ldr	r2, [pc, #88]	; (8009334 <xTaskRemoveFromEventList+0xb0>)
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4a13      	ldr	r2, [pc, #76]	; (8009338 <xTaskRemoveFromEventList+0xb4>)
 80092ec:	441a      	add	r2, r3
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	3304      	adds	r3, #4
 80092f2:	4619      	mov	r1, r3
 80092f4:	4610      	mov	r0, r2
 80092f6:	f7fe fde2 	bl	8007ebe <vListInsertEnd>
 80092fa:	e005      	b.n	8009308 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	3318      	adds	r3, #24
 8009300:	4619      	mov	r1, r3
 8009302:	480e      	ldr	r0, [pc, #56]	; (800933c <xTaskRemoveFromEventList+0xb8>)
 8009304:	f7fe fddb 	bl	8007ebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <xTaskRemoveFromEventList+0xbc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009312:	429a      	cmp	r2, r3
 8009314:	d905      	bls.n	8009322 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009316:	2301      	movs	r3, #1
 8009318:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800931a:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <xTaskRemoveFromEventList+0xc0>)
 800931c:	2201      	movs	r2, #1
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	e001      	b.n	8009326 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009326:	697b      	ldr	r3, [r7, #20]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	20000e98 	.word	0x20000e98
 8009334:	20000e78 	.word	0x20000e78
 8009338:	200009a0 	.word	0x200009a0
 800933c:	20000e30 	.word	0x20000e30
 8009340:	2000099c 	.word	0x2000099c
 8009344:	20000e84 	.word	0x20000e84

08009348 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009352:	4b28      	ldr	r3, [pc, #160]	; (80093f4 <vTaskRemoveFromUnorderedEventList+0xac>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <vTaskRemoveFromUnorderedEventList+0x26>
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	e7fe      	b.n	800936c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <vTaskRemoveFromUnorderedEventList+0x50>
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	e7fe      	b.n	8009396 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7fe fded 	bl	8007f78 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	3304      	adds	r3, #4
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fde8 	bl	8007f78 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d903      	bls.n	80093bc <vTaskRemoveFromUnorderedEventList+0x74>
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a0f      	ldr	r2, [pc, #60]	; (80093f8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4a0c      	ldr	r2, [pc, #48]	; (80093fc <vTaskRemoveFromUnorderedEventList+0xb4>)
 80093ca:	441a      	add	r2, r3
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4619      	mov	r1, r3
 80093d2:	4610      	mov	r0, r2
 80093d4:	f7fe fd73 	bl	8007ebe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4b08      	ldr	r3, [pc, #32]	; (8009400 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d902      	bls.n	80093ec <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80093e6:	4b07      	ldr	r3, [pc, #28]	; (8009404 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80093e8:	2201      	movs	r2, #1
 80093ea:	601a      	str	r2, [r3, #0]
	}
}
 80093ec:	bf00      	nop
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000e98 	.word	0x20000e98
 80093f8:	20000e78 	.word	0x20000e78
 80093fc:	200009a0 	.word	0x200009a0
 8009400:	2000099c 	.word	0x2000099c
 8009404:	20000e84 	.word	0x20000e84

08009408 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009410:	4b06      	ldr	r3, [pc, #24]	; (800942c <vTaskInternalSetTimeOutState+0x24>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <vTaskInternalSetTimeOutState+0x28>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	605a      	str	r2, [r3, #4]
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	20000e88 	.word	0x20000e88
 8009430:	20000e74 	.word	0x20000e74

08009434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d109      	bne.n	8009458 <xTaskCheckForTimeOut+0x24>
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	e7fe      	b.n	8009456 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <xTaskCheckForTimeOut+0x3e>
 800945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	e7fe      	b.n	8009470 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009472:	f000 fe6b 	bl	800a14c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009476:	4b1d      	ldr	r3, [pc, #116]	; (80094ec <xTaskCheckForTimeOut+0xb8>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	d102      	bne.n	8009496 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	e023      	b.n	80094de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4b15      	ldr	r3, [pc, #84]	; (80094f0 <xTaskCheckForTimeOut+0xbc>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d007      	beq.n	80094b2 <xTaskCheckForTimeOut+0x7e>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d302      	bcc.n	80094b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094ac:	2301      	movs	r3, #1
 80094ae:	61fb      	str	r3, [r7, #28]
 80094b0:	e015      	b.n	80094de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d20b      	bcs.n	80094d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	1ad2      	subs	r2, r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff ff9d 	bl	8009408 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	e004      	b.n	80094de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094da:	2301      	movs	r3, #1
 80094dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094de:	f000 fe63 	bl	800a1a8 <vPortExitCritical>

	return xReturn;
 80094e2:	69fb      	ldr	r3, [r7, #28]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3720      	adds	r7, #32
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000e74 	.word	0x20000e74
 80094f0:	20000e88 	.word	0x20000e88

080094f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094f8:	4b03      	ldr	r3, [pc, #12]	; (8009508 <vTaskMissedYield+0x14>)
 80094fa:	2201      	movs	r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
}
 80094fe:	bf00      	nop
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	20000e84 	.word	0x20000e84

0800950c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009514:	f000 f852 	bl	80095bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009518:	4b06      	ldr	r3, [pc, #24]	; (8009534 <prvIdleTask+0x28>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d9f9      	bls.n	8009514 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009520:	4b05      	ldr	r3, [pc, #20]	; (8009538 <prvIdleTask+0x2c>)
 8009522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009530:	e7f0      	b.n	8009514 <prvIdleTask+0x8>
 8009532:	bf00      	nop
 8009534:	200009a0 	.word	0x200009a0
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009542:	2300      	movs	r3, #0
 8009544:	607b      	str	r3, [r7, #4]
 8009546:	e00c      	b.n	8009562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4a12      	ldr	r2, [pc, #72]	; (800959c <prvInitialiseTaskLists+0x60>)
 8009554:	4413      	add	r3, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fc84 	bl	8007e64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3301      	adds	r3, #1
 8009560:	607b      	str	r3, [r7, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b37      	cmp	r3, #55	; 0x37
 8009566:	d9ef      	bls.n	8009548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009568:	480d      	ldr	r0, [pc, #52]	; (80095a0 <prvInitialiseTaskLists+0x64>)
 800956a:	f7fe fc7b 	bl	8007e64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800956e:	480d      	ldr	r0, [pc, #52]	; (80095a4 <prvInitialiseTaskLists+0x68>)
 8009570:	f7fe fc78 	bl	8007e64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009574:	480c      	ldr	r0, [pc, #48]	; (80095a8 <prvInitialiseTaskLists+0x6c>)
 8009576:	f7fe fc75 	bl	8007e64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800957a:	480c      	ldr	r0, [pc, #48]	; (80095ac <prvInitialiseTaskLists+0x70>)
 800957c:	f7fe fc72 	bl	8007e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009580:	480b      	ldr	r0, [pc, #44]	; (80095b0 <prvInitialiseTaskLists+0x74>)
 8009582:	f7fe fc6f 	bl	8007e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009586:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <prvInitialiseTaskLists+0x78>)
 8009588:	4a05      	ldr	r2, [pc, #20]	; (80095a0 <prvInitialiseTaskLists+0x64>)
 800958a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <prvInitialiseTaskLists+0x7c>)
 800958e:	4a05      	ldr	r2, [pc, #20]	; (80095a4 <prvInitialiseTaskLists+0x68>)
 8009590:	601a      	str	r2, [r3, #0]
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200009a0 	.word	0x200009a0
 80095a0:	20000e00 	.word	0x20000e00
 80095a4:	20000e14 	.word	0x20000e14
 80095a8:	20000e30 	.word	0x20000e30
 80095ac:	20000e44 	.word	0x20000e44
 80095b0:	20000e5c 	.word	0x20000e5c
 80095b4:	20000e28 	.word	0x20000e28
 80095b8:	20000e2c 	.word	0x20000e2c

080095bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095c2:	e019      	b.n	80095f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095c4:	f000 fdc2 	bl	800a14c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80095c8:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <prvCheckTasksWaitingTermination+0x4c>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fccf 	bl	8007f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095da:	4b0c      	ldr	r3, [pc, #48]	; (800960c <prvCheckTasksWaitingTermination+0x50>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3b01      	subs	r3, #1
 80095e0:	4a0a      	ldr	r2, [pc, #40]	; (800960c <prvCheckTasksWaitingTermination+0x50>)
 80095e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <prvCheckTasksWaitingTermination+0x54>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4a09      	ldr	r2, [pc, #36]	; (8009610 <prvCheckTasksWaitingTermination+0x54>)
 80095ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095ee:	f000 fddb 	bl	800a1a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f80e 	bl	8009614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <prvCheckTasksWaitingTermination+0x54>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e1      	bne.n	80095c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	20000e44 	.word	0x20000e44
 800960c:	20000e70 	.word	0x20000e70
 8009610:	20000e58 	.word	0x20000e58

08009614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009622:	2b00      	cmp	r3, #0
 8009624:	d108      	bne.n	8009638 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	4618      	mov	r0, r3
 800962c:	f000 ff6a 	bl	800a504 <vPortFree>
				vPortFree( pxTCB );
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 ff67 	bl	800a504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009636:	e017      	b.n	8009668 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800963e:	2b01      	cmp	r3, #1
 8009640:	d103      	bne.n	800964a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 ff5e 	bl	800a504 <vPortFree>
	}
 8009648:	e00e      	b.n	8009668 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009650:	2b02      	cmp	r3, #2
 8009652:	d009      	beq.n	8009668 <prvDeleteTCB+0x54>
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	e7fe      	b.n	8009666 <prvDeleteTCB+0x52>
	}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <prvResetNextTaskUnblockTime+0x44>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <prvResetNextTaskUnblockTime+0x14>
 8009680:	2301      	movs	r3, #1
 8009682:	e000      	b.n	8009686 <prvResetNextTaskUnblockTime+0x16>
 8009684:	2300      	movs	r3, #0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800968a:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <prvResetNextTaskUnblockTime+0x48>)
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009692:	e008      	b.n	80096a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009694:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <prvResetNextTaskUnblockTime+0x44>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	4a05      	ldr	r2, [pc, #20]	; (80096b8 <prvResetNextTaskUnblockTime+0x48>)
 80096a4:	6013      	str	r3, [r2, #0]
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000e28 	.word	0x20000e28
 80096b8:	20000e90 	.word	0x20000e90

080096bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096c2:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <xTaskGetSchedulerState+0x34>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096ca:	2301      	movs	r3, #1
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	e008      	b.n	80096e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d0:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <xTaskGetSchedulerState+0x38>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096d8:	2302      	movs	r3, #2
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	e001      	b.n	80096e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096de:	2300      	movs	r3, #0
 80096e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096e2:	687b      	ldr	r3, [r7, #4]
	}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20000e7c 	.word	0x20000e7c
 80096f4:	20000e98 	.word	0x20000e98

080096f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d054      	beq.n	80097b8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800970e:	4b2d      	ldr	r3, [pc, #180]	; (80097c4 <xTaskPriorityDisinherit+0xcc>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	429a      	cmp	r2, r3
 8009716:	d009      	beq.n	800972c <xTaskPriorityDisinherit+0x34>
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	e7fe      	b.n	800972a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009730:	2b00      	cmp	r3, #0
 8009732:	d109      	bne.n	8009748 <xTaskPriorityDisinherit+0x50>
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	60bb      	str	r3, [r7, #8]
 8009746:	e7fe      	b.n	8009746 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800974c:	1e5a      	subs	r2, r3, #1
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975a:	429a      	cmp	r2, r3
 800975c:	d02c      	beq.n	80097b8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009762:	2b00      	cmp	r3, #0
 8009764:	d128      	bne.n	80097b8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	3304      	adds	r3, #4
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fc04 	bl	8007f78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <xTaskPriorityDisinherit+0xd0>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d903      	bls.n	8009798 <xTaskPriorityDisinherit+0xa0>
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4a0c      	ldr	r2, [pc, #48]	; (80097c8 <xTaskPriorityDisinherit+0xd0>)
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4a09      	ldr	r2, [pc, #36]	; (80097cc <xTaskPriorityDisinherit+0xd4>)
 80097a6:	441a      	add	r2, r3
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7fe fb85 	bl	8007ebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097b8:	697b      	ldr	r3, [r7, #20]
	}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	2000099c 	.word	0x2000099c
 80097c8:	20000e78 	.word	0x20000e78
 80097cc:	200009a0 	.word	0x200009a0

080097d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <uxTaskResetEventItemValue+0x2c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097de:	4b07      	ldr	r3, [pc, #28]	; (80097fc <uxTaskResetEventItemValue+0x2c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <uxTaskResetEventItemValue+0x2c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80097ec:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80097ee:	687b      	ldr	r3, [r7, #4]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	2000099c 	.word	0x2000099c

08009800 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800980a:	4b21      	ldr	r3, [pc, #132]	; (8009890 <prvAddCurrentTaskToDelayedList+0x90>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009810:	4b20      	ldr	r3, [pc, #128]	; (8009894 <prvAddCurrentTaskToDelayedList+0x94>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3304      	adds	r3, #4
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fbae 	bl	8007f78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009822:	d10a      	bne.n	800983a <prvAddCurrentTaskToDelayedList+0x3a>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800982a:	4b1a      	ldr	r3, [pc, #104]	; (8009894 <prvAddCurrentTaskToDelayedList+0x94>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3304      	adds	r3, #4
 8009830:	4619      	mov	r1, r3
 8009832:	4819      	ldr	r0, [pc, #100]	; (8009898 <prvAddCurrentTaskToDelayedList+0x98>)
 8009834:	f7fe fb43 	bl	8007ebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009838:	e026      	b.n	8009888 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4413      	add	r3, r2
 8009840:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009842:	4b14      	ldr	r3, [pc, #80]	; (8009894 <prvAddCurrentTaskToDelayedList+0x94>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	429a      	cmp	r2, r3
 8009850:	d209      	bcs.n	8009866 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <prvAddCurrentTaskToDelayedList+0x94>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f7fe fb51 	bl	8007f06 <vListInsert>
}
 8009864:	e010      	b.n	8009888 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009866:	4b0e      	ldr	r3, [pc, #56]	; (80098a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <prvAddCurrentTaskToDelayedList+0x94>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3304      	adds	r3, #4
 8009870:	4619      	mov	r1, r3
 8009872:	4610      	mov	r0, r2
 8009874:	f7fe fb47 	bl	8007f06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	429a      	cmp	r2, r3
 8009880:	d202      	bcs.n	8009888 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009882:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	6013      	str	r3, [r2, #0]
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20000e74 	.word	0x20000e74
 8009894:	2000099c 	.word	0x2000099c
 8009898:	20000e5c 	.word	0x20000e5c
 800989c:	20000e2c 	.word	0x20000e2c
 80098a0:	20000e28 	.word	0x20000e28
 80098a4:	20000e90 	.word	0x20000e90

080098a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098b2:	f000 fac3 	bl	8009e3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098b6:	4b1c      	ldr	r3, [pc, #112]	; (8009928 <xTimerCreateTimerTask+0x80>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d021      	beq.n	8009902 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098c6:	1d3a      	adds	r2, r7, #4
 80098c8:	f107 0108 	add.w	r1, r7, #8
 80098cc:	f107 030c 	add.w	r3, r7, #12
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fe f84d 	bl	8007970 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	9202      	str	r2, [sp, #8]
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	2302      	movs	r3, #2
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	2300      	movs	r3, #0
 80098e6:	460a      	mov	r2, r1
 80098e8:	4910      	ldr	r1, [pc, #64]	; (800992c <xTimerCreateTimerTask+0x84>)
 80098ea:	4811      	ldr	r0, [pc, #68]	; (8009930 <xTimerCreateTimerTask+0x88>)
 80098ec:	f7ff f842 	bl	8008974 <xTaskCreateStatic>
 80098f0:	4602      	mov	r2, r0
 80098f2:	4b10      	ldr	r3, [pc, #64]	; (8009934 <xTimerCreateTimerTask+0x8c>)
 80098f4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <xTimerCreateTimerTask+0x8c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098fe:	2301      	movs	r3, #1
 8009900:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <xTimerCreateTimerTask+0x74>
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	613b      	str	r3, [r7, #16]
 800991a:	e7fe      	b.n	800991a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800991c:	697b      	ldr	r3, [r7, #20]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20000ecc 	.word	0x20000ecc
 800992c:	0800cc68 	.word	0x0800cc68
 8009930:	08009a51 	.word	0x08009a51
 8009934:	20000ed0 	.word	0x20000ed0

08009938 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009946:	2300      	movs	r3, #0
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d109      	bne.n	8009964 <xTimerGenericCommand+0x2c>
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	623b      	str	r3, [r7, #32]
 8009962:	e7fe      	b.n	8009962 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009964:	4b19      	ldr	r3, [pc, #100]	; (80099cc <xTimerGenericCommand+0x94>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d02a      	beq.n	80099c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b05      	cmp	r3, #5
 800997c:	dc18      	bgt.n	80099b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800997e:	f7ff fe9d 	bl	80096bc <xTaskGetSchedulerState>
 8009982:	4603      	mov	r3, r0
 8009984:	2b02      	cmp	r3, #2
 8009986:	d109      	bne.n	800999c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009988:	4b10      	ldr	r3, [pc, #64]	; (80099cc <xTimerGenericCommand+0x94>)
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	f107 0110 	add.w	r1, r7, #16
 8009990:	2300      	movs	r3, #0
 8009992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009994:	f7fe fc18 	bl	80081c8 <xQueueGenericSend>
 8009998:	6278      	str	r0, [r7, #36]	; 0x24
 800999a:	e012      	b.n	80099c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <xTimerGenericCommand+0x94>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	f107 0110 	add.w	r1, r7, #16
 80099a4:	2300      	movs	r3, #0
 80099a6:	2200      	movs	r2, #0
 80099a8:	f7fe fc0e 	bl	80081c8 <xQueueGenericSend>
 80099ac:	6278      	str	r0, [r7, #36]	; 0x24
 80099ae:	e008      	b.n	80099c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099b0:	4b06      	ldr	r3, [pc, #24]	; (80099cc <xTimerGenericCommand+0x94>)
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	f107 0110 	add.w	r1, r7, #16
 80099b8:	2300      	movs	r3, #0
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	f7fe fcfe 	bl	80083bc <xQueueGenericSendFromISR>
 80099c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3728      	adds	r7, #40	; 0x28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	20000ecc 	.word	0x20000ecc

080099d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099da:	4b1c      	ldr	r3, [pc, #112]	; (8009a4c <prvProcessExpiredTimer+0x7c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe fac5 	bl	8007f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d121      	bne.n	8009a3a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	699a      	ldr	r2, [r3, #24]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	18d1      	adds	r1, r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	6978      	ldr	r0, [r7, #20]
 8009a04:	f000 f8c8 	bl	8009b98 <prvInsertTimerInActiveList>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d015      	beq.n	8009a3a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	2300      	movs	r3, #0
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	2100      	movs	r1, #0
 8009a18:	6978      	ldr	r0, [r7, #20]
 8009a1a:	f7ff ff8d 	bl	8009938 <xTimerGenericCommand>
 8009a1e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d109      	bne.n	8009a3a <prvProcessExpiredTimer+0x6a>
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	e7fe      	b.n	8009a38 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	6978      	ldr	r0, [r7, #20]
 8009a40:	4798      	blx	r3
}
 8009a42:	bf00      	nop
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000ec4 	.word	0x20000ec4

08009a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a58:	f107 0308 	add.w	r3, r7, #8
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 f857 	bl	8009b10 <prvGetNextExpireTime>
 8009a62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	4619      	mov	r1, r3
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 f803 	bl	8009a74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a6e:	f000 f8d5 	bl	8009c1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a72:	e7f1      	b.n	8009a58 <prvTimerTask+0x8>

08009a74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a7e:	f7ff f9a5 	bl	8008dcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a82:	f107 0308 	add.w	r3, r7, #8
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 f866 	bl	8009b58 <prvSampleTimeNow>
 8009a8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d130      	bne.n	8009af6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <prvProcessTimerOrBlockTask+0x3c>
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d806      	bhi.n	8009ab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009aa2:	f7ff f9a1 	bl	8008de8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009aa6:	68f9      	ldr	r1, [r7, #12]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff91 	bl	80099d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009aae:	e024      	b.n	8009afa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <prvProcessTimerOrBlockTask+0x90>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bf0c      	ite	eq
 8009ac0:	2301      	moveq	r3, #1
 8009ac2:	2300      	movne	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ac8:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <prvProcessTimerOrBlockTask+0x94>)
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f7fe ff19 	bl	800890c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ada:	f7ff f985 	bl	8008de8 <xTaskResumeAll>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10a      	bne.n	8009afa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ae4:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <prvProcessTimerOrBlockTask+0x98>)
 8009ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	f3bf 8f6f 	isb	sy
}
 8009af4:	e001      	b.n	8009afa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009af6:	f7ff f977 	bl	8008de8 <xTaskResumeAll>
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000ec8 	.word	0x20000ec8
 8009b08:	20000ecc 	.word	0x20000ecc
 8009b0c:	e000ed04 	.word	0xe000ed04

08009b10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b18:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <prvGetNextExpireTime+0x44>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bf0c      	ite	eq
 8009b22:	2301      	moveq	r3, #1
 8009b24:	2300      	movne	r3, #0
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	461a      	mov	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d105      	bne.n	8009b42 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b36:	4b07      	ldr	r3, [pc, #28]	; (8009b54 <prvGetNextExpireTime+0x44>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	e001      	b.n	8009b46 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b46:	68fb      	ldr	r3, [r7, #12]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	20000ec4 	.word	0x20000ec4

08009b58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b60:	f7ff f9de 	bl	8008f20 <xTaskGetTickCount>
 8009b64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b66:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <prvSampleTimeNow+0x3c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d205      	bcs.n	8009b7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b70:	f000 f904 	bl	8009d7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e002      	b.n	8009b82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b82:	4a04      	ldr	r2, [pc, #16]	; (8009b94 <prvSampleTimeNow+0x3c>)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b88:	68fb      	ldr	r3, [r7, #12]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20000ed4 	.word	0x20000ed4

08009b98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d812      	bhi.n	8009be4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	1ad2      	subs	r2, r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d302      	bcc.n	8009bd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e01b      	b.n	8009c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bd2:	4b10      	ldr	r3, [pc, #64]	; (8009c14 <prvInsertTimerInActiveList+0x7c>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fe f992 	bl	8007f06 <vListInsert>
 8009be2:	e012      	b.n	8009c0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d206      	bcs.n	8009bfa <prvInsertTimerInActiveList+0x62>
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d302      	bcc.n	8009bfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	e007      	b.n	8009c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <prvInsertTimerInActiveList+0x80>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3304      	adds	r3, #4
 8009c02:	4619      	mov	r1, r3
 8009c04:	4610      	mov	r0, r2
 8009c06:	f7fe f97e 	bl	8007f06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000ec8 	.word	0x20000ec8
 8009c18:	20000ec4 	.word	0x20000ec4

08009c1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08e      	sub	sp, #56	; 0x38
 8009c20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c22:	e099      	b.n	8009d58 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da17      	bge.n	8009c5a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c2a:	1d3b      	adds	r3, r7, #4
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d109      	bne.n	8009c4a <prvProcessReceivedCommands+0x2e>
 8009c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	e7fe      	b.n	8009c48 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c50:	6850      	ldr	r0, [r2, #4]
 8009c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c54:	6892      	ldr	r2, [r2, #8]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	db7a      	blt.n	8009d56 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d004      	beq.n	8009c76 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe f981 	bl	8007f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c76:	463b      	mov	r3, r7
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff ff6d 	bl	8009b58 <prvSampleTimeNow>
 8009c7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b09      	cmp	r3, #9
 8009c84:	d868      	bhi.n	8009d58 <prvProcessReceivedCommands+0x13c>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <prvProcessReceivedCommands+0x70>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009cb5 	.word	0x08009cb5
 8009c94:	08009cb5 	.word	0x08009cb5
 8009c98:	08009d59 	.word	0x08009d59
 8009c9c:	08009d0f 	.word	0x08009d0f
 8009ca0:	08009d45 	.word	0x08009d45
 8009ca4:	08009cb5 	.word	0x08009cb5
 8009ca8:	08009cb5 	.word	0x08009cb5
 8009cac:	08009d59 	.word	0x08009d59
 8009cb0:	08009d0f 	.word	0x08009d0f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	18d1      	adds	r1, r2, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc2:	f7ff ff69 	bl	8009b98 <prvInsertTimerInActiveList>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d045      	beq.n	8009d58 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d13d      	bne.n	8009d58 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	441a      	add	r2, r3
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2100      	movs	r1, #0
 8009cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cee:	f7ff fe23 	bl	8009938 <xTimerGenericCommand>
 8009cf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d12e      	bne.n	8009d58 <prvProcessReceivedCommands+0x13c>
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	61bb      	str	r3, [r7, #24]
 8009d0c:	e7fe      	b.n	8009d0c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <prvProcessReceivedCommands+0x114>
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	617b      	str	r3, [r7, #20]
 8009d2e:	e7fe      	b.n	8009d2e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	699a      	ldr	r2, [r3, #24]
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	18d1      	adds	r1, r2, r3
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d3e:	f7ff ff2b 	bl	8009b98 <prvInsertTimerInActiveList>
					break;
 8009d42:	e009      	b.n	8009d58 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d104      	bne.n	8009d58 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d50:	f000 fbd8 	bl	800a504 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d54:	e000      	b.n	8009d58 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d58:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <prvProcessReceivedCommands+0x15c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	1d39      	adds	r1, r7, #4
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fbbf 	bl	80084e4 <xQueueReceive>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f47f af5b 	bne.w	8009c24 <prvProcessReceivedCommands+0x8>
	}
}
 8009d6e:	bf00      	nop
 8009d70:	3730      	adds	r7, #48	; 0x30
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000ecc 	.word	0x20000ecc

08009d7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d82:	e044      	b.n	8009e0e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d84:	4b2b      	ldr	r3, [pc, #172]	; (8009e34 <prvSwitchTimerLists+0xb8>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d8e:	4b29      	ldr	r3, [pc, #164]	; (8009e34 <prvSwitchTimerLists+0xb8>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe f8eb 	bl	8007f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d12d      	bne.n	8009e0e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4413      	add	r3, r2
 8009dba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d90e      	bls.n	8009de2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dd0:	4b18      	ldr	r3, [pc, #96]	; (8009e34 <prvSwitchTimerLists+0xb8>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f7fe f893 	bl	8007f06 <vListInsert>
 8009de0:	e015      	b.n	8009e0e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009de2:	2300      	movs	r3, #0
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	2300      	movs	r3, #0
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	2100      	movs	r1, #0
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7ff fda3 	bl	8009938 <xTimerGenericCommand>
 8009df2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d109      	bne.n	8009e0e <prvSwitchTimerLists+0x92>
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	e7fe      	b.n	8009e0c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <prvSwitchTimerLists+0xb8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1b5      	bne.n	8009d84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e18:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <prvSwitchTimerLists+0xb8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e1e:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <prvSwitchTimerLists+0xbc>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a04      	ldr	r2, [pc, #16]	; (8009e34 <prvSwitchTimerLists+0xb8>)
 8009e24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e26:	4a04      	ldr	r2, [pc, #16]	; (8009e38 <prvSwitchTimerLists+0xbc>)
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	6013      	str	r3, [r2, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	20000ec4 	.word	0x20000ec4
 8009e38:	20000ec8 	.word	0x20000ec8

08009e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e42:	f000 f983 	bl	800a14c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e46:	4b15      	ldr	r3, [pc, #84]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d120      	bne.n	8009e90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e4e:	4814      	ldr	r0, [pc, #80]	; (8009ea0 <prvCheckForValidListAndQueue+0x64>)
 8009e50:	f7fe f808 	bl	8007e64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e54:	4813      	ldr	r0, [pc, #76]	; (8009ea4 <prvCheckForValidListAndQueue+0x68>)
 8009e56:	f7fe f805 	bl	8007e64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <prvCheckForValidListAndQueue+0x6c>)
 8009e5c:	4a10      	ldr	r2, [pc, #64]	; (8009ea0 <prvCheckForValidListAndQueue+0x64>)
 8009e5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e60:	4b12      	ldr	r3, [pc, #72]	; (8009eac <prvCheckForValidListAndQueue+0x70>)
 8009e62:	4a10      	ldr	r2, [pc, #64]	; (8009ea4 <prvCheckForValidListAndQueue+0x68>)
 8009e64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e66:	2300      	movs	r3, #0
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4b11      	ldr	r3, [pc, #68]	; (8009eb0 <prvCheckForValidListAndQueue+0x74>)
 8009e6c:	4a11      	ldr	r2, [pc, #68]	; (8009eb4 <prvCheckForValidListAndQueue+0x78>)
 8009e6e:	2110      	movs	r1, #16
 8009e70:	200a      	movs	r0, #10
 8009e72:	f7fe f913 	bl	800809c <xQueueGenericCreateStatic>
 8009e76:	4602      	mov	r2, r0
 8009e78:	4b08      	ldr	r3, [pc, #32]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e7a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e7c:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d005      	beq.n	8009e90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e84:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	490b      	ldr	r1, [pc, #44]	; (8009eb8 <prvCheckForValidListAndQueue+0x7c>)
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fd16 	bl	80088bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e90:	f000 f98a 	bl	800a1a8 <vPortExitCritical>
}
 8009e94:	bf00      	nop
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20000ecc 	.word	0x20000ecc
 8009ea0:	20000e9c 	.word	0x20000e9c
 8009ea4:	20000eb0 	.word	0x20000eb0
 8009ea8:	20000ec4 	.word	0x20000ec4
 8009eac:	20000ec8 	.word	0x20000ec8
 8009eb0:	20000f78 	.word	0x20000f78
 8009eb4:	20000ed8 	.word	0x20000ed8
 8009eb8:	0800cc70 	.word	0x0800cc70

08009ebc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08a      	sub	sp, #40	; 0x28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009eca:	f06f 0301 	mvn.w	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <xTimerPendFunctionCallFromISR+0x3c>)
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	f107 0114 	add.w	r1, r7, #20
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	f7fe fa68 	bl	80083bc <xQueueGenericSendFromISR>
 8009eec:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3728      	adds	r7, #40	; 0x28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20000ecc 	.word	0x20000ecc

08009efc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3b04      	subs	r3, #4
 8009f0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f023 0201 	bic.w	r2, r3, #1
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3b04      	subs	r3, #4
 8009f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f2c:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <pxPortInitialiseStack+0x64>)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3b14      	subs	r3, #20
 8009f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3b04      	subs	r3, #4
 8009f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f06f 0202 	mvn.w	r2, #2
 8009f4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3b20      	subs	r3, #32
 8009f50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f52:	68fb      	ldr	r3, [r7, #12]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	08009f65 	.word	0x08009f65

08009f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f6e:	4b11      	ldr	r3, [pc, #68]	; (8009fb4 <prvTaskExitError+0x50>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d009      	beq.n	8009f8c <prvTaskExitError+0x28>
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	e7fe      	b.n	8009f8a <prvTaskExitError+0x26>
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f9e:	bf00      	nop
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0fc      	beq.n	8009fa0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fa6:	bf00      	nop
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	2000000c 	.word	0x2000000c
	...

08009fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <pxCurrentTCBConst2>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	6808      	ldr	r0, [r1, #0]
 8009fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	f380 8809 	msr	PSP, r0
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8811 	msr	BASEPRI, r0
 8009fda:	4770      	bx	lr
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst2>:
 8009fe0:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fe8:	4808      	ldr	r0, [pc, #32]	; (800a00c <prvPortStartFirstTask+0x24>)
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	6800      	ldr	r0, [r0, #0]
 8009fee:	f380 8808 	msr	MSP, r0
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8814 	msr	CONTROL, r0
 8009ffa:	b662      	cpsie	i
 8009ffc:	b661      	cpsie	f
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	df00      	svc	0
 800a008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a00a:	bf00      	nop
 800a00c:	e000ed08 	.word	0xe000ed08

0800a010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a016:	4b44      	ldr	r3, [pc, #272]	; (800a128 <xPortStartScheduler+0x118>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a44      	ldr	r2, [pc, #272]	; (800a12c <xPortStartScheduler+0x11c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d109      	bne.n	800a034 <xPortStartScheduler+0x24>
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	e7fe      	b.n	800a032 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a034:	4b3c      	ldr	r3, [pc, #240]	; (800a128 <xPortStartScheduler+0x118>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a3d      	ldr	r2, [pc, #244]	; (800a130 <xPortStartScheduler+0x120>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d109      	bne.n	800a052 <xPortStartScheduler+0x42>
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	e7fe      	b.n	800a050 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a052:	4b38      	ldr	r3, [pc, #224]	; (800a134 <xPortStartScheduler+0x124>)
 800a054:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	22ff      	movs	r2, #255	; 0xff
 800a062:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a074:	b2da      	uxtb	r2, r3
 800a076:	4b30      	ldr	r3, [pc, #192]	; (800a138 <xPortStartScheduler+0x128>)
 800a078:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a07a:	4b30      	ldr	r3, [pc, #192]	; (800a13c <xPortStartScheduler+0x12c>)
 800a07c:	2207      	movs	r2, #7
 800a07e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a080:	e009      	b.n	800a096 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a082:	4b2e      	ldr	r3, [pc, #184]	; (800a13c <xPortStartScheduler+0x12c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3b01      	subs	r3, #1
 800a088:	4a2c      	ldr	r2, [pc, #176]	; (800a13c <xPortStartScheduler+0x12c>)
 800a08a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a08c:	78fb      	ldrb	r3, [r7, #3]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	b2db      	uxtb	r3, r3
 800a094:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09e:	2b80      	cmp	r3, #128	; 0x80
 800a0a0:	d0ef      	beq.n	800a082 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0a2:	4b26      	ldr	r3, [pc, #152]	; (800a13c <xPortStartScheduler+0x12c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f1c3 0307 	rsb	r3, r3, #7
 800a0aa:	2b04      	cmp	r3, #4
 800a0ac:	d009      	beq.n	800a0c2 <xPortStartScheduler+0xb2>
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60bb      	str	r3, [r7, #8]
 800a0c0:	e7fe      	b.n	800a0c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0c2:	4b1e      	ldr	r3, [pc, #120]	; (800a13c <xPortStartScheduler+0x12c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	021b      	lsls	r3, r3, #8
 800a0c8:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <xPortStartScheduler+0x12c>)
 800a0ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0cc:	4b1b      	ldr	r3, [pc, #108]	; (800a13c <xPortStartScheduler+0x12c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0d4:	4a19      	ldr	r2, [pc, #100]	; (800a13c <xPortStartScheduler+0x12c>)
 800a0d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0e0:	4b17      	ldr	r3, [pc, #92]	; (800a140 <xPortStartScheduler+0x130>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a16      	ldr	r2, [pc, #88]	; (800a140 <xPortStartScheduler+0x130>)
 800a0e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0ec:	4b14      	ldr	r3, [pc, #80]	; (800a140 <xPortStartScheduler+0x130>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a13      	ldr	r2, [pc, #76]	; (800a140 <xPortStartScheduler+0x130>)
 800a0f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0f8:	f000 f8d6 	bl	800a2a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0fc:	4b11      	ldr	r3, [pc, #68]	; (800a144 <xPortStartScheduler+0x134>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a102:	f000 f8f5 	bl	800a2f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a106:	4b10      	ldr	r3, [pc, #64]	; (800a148 <xPortStartScheduler+0x138>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a0f      	ldr	r2, [pc, #60]	; (800a148 <xPortStartScheduler+0x138>)
 800a10c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a110:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a112:	f7ff ff69 	bl	8009fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a116:	f7fe ffd1 	bl	80090bc <vTaskSwitchContext>
	prvTaskExitError();
 800a11a:	f7ff ff23 	bl	8009f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	e000ed00 	.word	0xe000ed00
 800a12c:	410fc271 	.word	0x410fc271
 800a130:	410fc270 	.word	0x410fc270
 800a134:	e000e400 	.word	0xe000e400
 800a138:	20000fc8 	.word	0x20000fc8
 800a13c:	20000fcc 	.word	0x20000fcc
 800a140:	e000ed20 	.word	0xe000ed20
 800a144:	2000000c 	.word	0x2000000c
 800a148:	e000ef34 	.word	0xe000ef34

0800a14c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a164:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <vPortEnterCritical+0x54>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3301      	adds	r3, #1
 800a16a:	4a0d      	ldr	r2, [pc, #52]	; (800a1a0 <vPortEnterCritical+0x54>)
 800a16c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a16e:	4b0c      	ldr	r3, [pc, #48]	; (800a1a0 <vPortEnterCritical+0x54>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d10e      	bne.n	800a194 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a176:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <vPortEnterCritical+0x58>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <vPortEnterCritical+0x48>
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	603b      	str	r3, [r7, #0]
 800a192:	e7fe      	b.n	800a192 <vPortEnterCritical+0x46>
	}
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	2000000c 	.word	0x2000000c
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ae:	4b11      	ldr	r3, [pc, #68]	; (800a1f4 <vPortExitCritical+0x4c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d109      	bne.n	800a1ca <vPortExitCritical+0x22>
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	607b      	str	r3, [r7, #4]
 800a1c8:	e7fe      	b.n	800a1c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a1ca:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <vPortExitCritical+0x4c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	4a08      	ldr	r2, [pc, #32]	; (800a1f4 <vPortExitCritical+0x4c>)
 800a1d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1d4:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <vPortExitCritical+0x4c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <vPortExitCritical+0x3e>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	2000000c 	.word	0x2000000c
	...

0800a200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a200:	f3ef 8009 	mrs	r0, PSP
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <pxCurrentTCBConst>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	f01e 0f10 	tst.w	lr, #16
 800a210:	bf08      	it	eq
 800a212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21a:	6010      	str	r0, [r2, #0]
 800a21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a224:	f380 8811 	msr	BASEPRI, r0
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f7fe ff44 	bl	80090bc <vTaskSwitchContext>
 800a234:	f04f 0000 	mov.w	r0, #0
 800a238:	f380 8811 	msr	BASEPRI, r0
 800a23c:	bc09      	pop	{r0, r3}
 800a23e:	6819      	ldr	r1, [r3, #0]
 800a240:	6808      	ldr	r0, [r1, #0]
 800a242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a246:	f01e 0f10 	tst.w	lr, #16
 800a24a:	bf08      	it	eq
 800a24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a250:	f380 8809 	msr	PSP, r0
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	f3af 8000 	nop.w

0800a260 <pxCurrentTCBConst>:
 800a260:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop

0800a268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a280:	f7fe fe5e 	bl	8008f40 <xTaskIncrementTick>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a28a:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <SysTick_Handler+0x3c>)
 800a28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	2300      	movs	r3, #0
 800a294:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	e000ed04 	.word	0xe000ed04

0800a2a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <vPortSetupTimerInterrupt+0x34>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2b2:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <vPortSetupTimerInterrupt+0x38>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <vPortSetupTimerInterrupt+0x3c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a0a      	ldr	r2, [pc, #40]	; (800a2e8 <vPortSetupTimerInterrupt+0x40>)
 800a2be:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c2:	099b      	lsrs	r3, r3, #6
 800a2c4:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <vPortSetupTimerInterrupt+0x44>)
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ca:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <vPortSetupTimerInterrupt+0x34>)
 800a2cc:	2207      	movs	r2, #7
 800a2ce:	601a      	str	r2, [r3, #0]
}
 800a2d0:	bf00      	nop
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	e000e010 	.word	0xe000e010
 800a2e0:	e000e018 	.word	0xe000e018
 800a2e4:	20000000 	.word	0x20000000
 800a2e8:	10624dd3 	.word	0x10624dd3
 800a2ec:	e000e014 	.word	0xe000e014

0800a2f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a300 <vPortEnableVFP+0x10>
 800a2f4:	6801      	ldr	r1, [r0, #0]
 800a2f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2fa:	6001      	str	r1, [r0, #0]
 800a2fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2fe:	bf00      	nop
 800a300:	e000ed88 	.word	0xe000ed88

0800a304 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a30a:	f3ef 8305 	mrs	r3, IPSR
 800a30e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b0f      	cmp	r3, #15
 800a314:	d913      	bls.n	800a33e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a316:	4a16      	ldr	r2, [pc, #88]	; (800a370 <vPortValidateInterruptPriority+0x6c>)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4413      	add	r3, r2
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a320:	4b14      	ldr	r3, [pc, #80]	; (800a374 <vPortValidateInterruptPriority+0x70>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	7afa      	ldrb	r2, [r7, #11]
 800a326:	429a      	cmp	r2, r3
 800a328:	d209      	bcs.n	800a33e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	607b      	str	r3, [r7, #4]
 800a33c:	e7fe      	b.n	800a33c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a33e:	4b0e      	ldr	r3, [pc, #56]	; (800a378 <vPortValidateInterruptPriority+0x74>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <vPortValidateInterruptPriority+0x78>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d909      	bls.n	800a362 <vPortValidateInterruptPriority+0x5e>
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	603b      	str	r3, [r7, #0]
 800a360:	e7fe      	b.n	800a360 <vPortValidateInterruptPriority+0x5c>
	}
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	e000e3f0 	.word	0xe000e3f0
 800a374:	20000fc8 	.word	0x20000fc8
 800a378:	e000ed0c 	.word	0xe000ed0c
 800a37c:	20000fcc 	.word	0x20000fcc

0800a380 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08a      	sub	sp, #40	; 0x28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a38c:	f7fe fd1e 	bl	8008dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a390:	4b57      	ldr	r3, [pc, #348]	; (800a4f0 <pvPortMalloc+0x170>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a398:	f000 f90c 	bl	800a5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a39c:	4b55      	ldr	r3, [pc, #340]	; (800a4f4 <pvPortMalloc+0x174>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f040 808c 	bne.w	800a4c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01c      	beq.n	800a3ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f003 0307 	and.w	r3, r3, #7
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d013      	beq.n	800a3ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f023 0307 	bic.w	r3, r3, #7
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d009      	beq.n	800a3ea <pvPortMalloc+0x6a>
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	e7fe      	b.n	800a3e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d068      	beq.n	800a4c2 <pvPortMalloc+0x142>
 800a3f0:	4b41      	ldr	r3, [pc, #260]	; (800a4f8 <pvPortMalloc+0x178>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d863      	bhi.n	800a4c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3fa:	4b40      	ldr	r3, [pc, #256]	; (800a4fc <pvPortMalloc+0x17c>)
 800a3fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3fe:	4b3f      	ldr	r3, [pc, #252]	; (800a4fc <pvPortMalloc+0x17c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a404:	e004      	b.n	800a410 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	429a      	cmp	r2, r3
 800a418:	d903      	bls.n	800a422 <pvPortMalloc+0xa2>
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f1      	bne.n	800a406 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a422:	4b33      	ldr	r3, [pc, #204]	; (800a4f0 <pvPortMalloc+0x170>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a428:	429a      	cmp	r2, r3
 800a42a:	d04a      	beq.n	800a4c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2208      	movs	r2, #8
 800a432:	4413      	add	r3, r2
 800a434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	1ad2      	subs	r2, r2, r3
 800a446:	2308      	movs	r3, #8
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d91e      	bls.n	800a48c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d009      	beq.n	800a474 <pvPortMalloc+0xf4>
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	613b      	str	r3, [r7, #16]
 800a472:	e7fe      	b.n	800a472 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	1ad2      	subs	r2, r2, r3
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a486:	69b8      	ldr	r0, [r7, #24]
 800a488:	f000 f8f6 	bl	800a678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a48c:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <pvPortMalloc+0x178>)
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	4a18      	ldr	r2, [pc, #96]	; (800a4f8 <pvPortMalloc+0x178>)
 800a498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a49a:	4b17      	ldr	r3, [pc, #92]	; (800a4f8 <pvPortMalloc+0x178>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b18      	ldr	r3, [pc, #96]	; (800a500 <pvPortMalloc+0x180>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d203      	bcs.n	800a4ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4a6:	4b14      	ldr	r3, [pc, #80]	; (800a4f8 <pvPortMalloc+0x178>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a15      	ldr	r2, [pc, #84]	; (800a500 <pvPortMalloc+0x180>)
 800a4ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <pvPortMalloc+0x174>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4c2:	f7fe fc91 	bl	8008de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	f003 0307 	and.w	r3, r3, #7
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <pvPortMalloc+0x164>
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	e7fe      	b.n	800a4e2 <pvPortMalloc+0x162>
	return pvReturn;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3728      	adds	r7, #40	; 0x28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	200027d8 	.word	0x200027d8
 800a4f4:	200027e4 	.word	0x200027e4
 800a4f8:	200027dc 	.word	0x200027dc
 800a4fc:	200027d0 	.word	0x200027d0
 800a500:	200027e0 	.word	0x200027e0

0800a504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d046      	beq.n	800a5a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a516:	2308      	movs	r3, #8
 800a518:	425b      	negs	r3, r3
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4413      	add	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	4b20      	ldr	r3, [pc, #128]	; (800a5ac <vPortFree+0xa8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4013      	ands	r3, r2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d109      	bne.n	800a546 <vPortFree+0x42>
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	e7fe      	b.n	800a544 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d009      	beq.n	800a562 <vPortFree+0x5e>
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	60bb      	str	r3, [r7, #8]
 800a560:	e7fe      	b.n	800a560 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	4b11      	ldr	r3, [pc, #68]	; (800a5ac <vPortFree+0xa8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4013      	ands	r3, r2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d019      	beq.n	800a5a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d115      	bne.n	800a5a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	4b0b      	ldr	r3, [pc, #44]	; (800a5ac <vPortFree+0xa8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	43db      	mvns	r3, r3
 800a582:	401a      	ands	r2, r3
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a588:	f7fe fc20 	bl	8008dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <vPortFree+0xac>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4413      	add	r3, r2
 800a596:	4a06      	ldr	r2, [pc, #24]	; (800a5b0 <vPortFree+0xac>)
 800a598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a59a:	6938      	ldr	r0, [r7, #16]
 800a59c:	f000 f86c 	bl	800a678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a5a0:	f7fe fc22 	bl	8008de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5a4:	bf00      	nop
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	200027e4 	.word	0x200027e4
 800a5b0:	200027dc 	.word	0x200027dc

0800a5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5c0:	4b27      	ldr	r3, [pc, #156]	; (800a660 <prvHeapInit+0xac>)
 800a5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00c      	beq.n	800a5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3307      	adds	r3, #7
 800a5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f023 0307 	bic.w	r3, r3, #7
 800a5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	4a1f      	ldr	r2, [pc, #124]	; (800a660 <prvHeapInit+0xac>)
 800a5e4:	4413      	add	r3, r2
 800a5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5ec:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <prvHeapInit+0xb0>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5f2:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <prvHeapInit+0xb0>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a600:	2208      	movs	r2, #8
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	1a9b      	subs	r3, r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f023 0307 	bic.w	r3, r3, #7
 800a60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4a15      	ldr	r2, [pc, #84]	; (800a668 <prvHeapInit+0xb4>)
 800a614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <prvHeapInit+0xb4>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2200      	movs	r2, #0
 800a61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a61e:	4b12      	ldr	r3, [pc, #72]	; (800a668 <prvHeapInit+0xb4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	1ad2      	subs	r2, r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a634:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <prvHeapInit+0xb4>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <prvHeapInit+0xb8>)
 800a642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	4a09      	ldr	r2, [pc, #36]	; (800a670 <prvHeapInit+0xbc>)
 800a64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a64c:	4b09      	ldr	r3, [pc, #36]	; (800a674 <prvHeapInit+0xc0>)
 800a64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a652:	601a      	str	r2, [r3, #0]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	20000fd0 	.word	0x20000fd0
 800a664:	200027d0 	.word	0x200027d0
 800a668:	200027d8 	.word	0x200027d8
 800a66c:	200027e0 	.word	0x200027e0
 800a670:	200027dc 	.word	0x200027dc
 800a674:	200027e4 	.word	0x200027e4

0800a678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a680:	4b28      	ldr	r3, [pc, #160]	; (800a724 <prvInsertBlockIntoFreeList+0xac>)
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e002      	b.n	800a68c <prvInsertBlockIntoFreeList+0x14>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	429a      	cmp	r2, r3
 800a694:	d8f7      	bhi.n	800a686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d108      	bne.n	800a6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	441a      	add	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d118      	bne.n	800a700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	4b15      	ldr	r3, [pc, #84]	; (800a728 <prvInsertBlockIntoFreeList+0xb0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d00d      	beq.n	800a6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	441a      	add	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e008      	b.n	800a708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <prvInsertBlockIntoFreeList+0xb0>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	e003      	b.n	800a708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d002      	beq.n	800a716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	200027d0 	.word	0x200027d0
 800a728:	200027d8 	.word	0x200027d8

0800a72c <arm_rms_f32>:
 800a72c:	b530      	push	{r4, r5, lr}
 800a72e:	ed2d 8b02 	vpush	{d8}
 800a732:	088d      	lsrs	r5, r1, #2
 800a734:	b083      	sub	sp, #12
 800a736:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a7f0 <arm_rms_f32+0xc4>
 800a73a:	d020      	beq.n	800a77e <arm_rms_f32+0x52>
 800a73c:	f100 0310 	add.w	r3, r0, #16
 800a740:	462c      	mov	r4, r5
 800a742:	ed53 6a04 	vldr	s13, [r3, #-16]
 800a746:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a74a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a74e:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a752:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800a756:	ee27 7a07 	vmul.f32	s14, s14, s14
 800a75a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a75e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a762:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a766:	ee26 6a06 	vmul.f32	s12, s12, s12
 800a76a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a76e:	3c01      	subs	r4, #1
 800a770:	f103 0310 	add.w	r3, r3, #16
 800a774:	ee76 5a27 	vadd.f32	s11, s12, s15
 800a778:	d1e3      	bne.n	800a742 <arm_rms_f32+0x16>
 800a77a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a77e:	f011 0303 	ands.w	r3, r1, #3
 800a782:	d015      	beq.n	800a7b0 <arm_rms_f32+0x84>
 800a784:	edd0 7a00 	vldr	s15, [r0]
 800a788:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a78c:	3b01      	subs	r3, #1
 800a78e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a792:	d00d      	beq.n	800a7b0 <arm_rms_f32+0x84>
 800a794:	edd0 7a01 	vldr	s15, [r0, #4]
 800a798:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a7a2:	d005      	beq.n	800a7b0 <arm_rms_f32+0x84>
 800a7a4:	edd0 7a02 	vldr	s15, [r0, #8]
 800a7a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a7ac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a7b0:	ee07 1a90 	vmov	s15, r1
 800a7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800a7be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c6:	db0c      	blt.n	800a7e2 <arm_rms_f32+0xb6>
 800a7c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a7d4:	d407      	bmi.n	800a7e6 <arm_rms_f32+0xba>
 800a7d6:	ed82 8a00 	vstr	s16, [r2]
 800a7da:	b003      	add	sp, #12
 800a7dc:	ecbd 8b02 	vpop	{d8}
 800a7e0:	bd30      	pop	{r4, r5, pc}
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	e7f9      	b.n	800a7da <arm_rms_f32+0xae>
 800a7e6:	9201      	str	r2, [sp, #4]
 800a7e8:	f002 f980 	bl	800caec <sqrtf>
 800a7ec:	9a01      	ldr	r2, [sp, #4]
 800a7ee:	e7f2      	b.n	800a7d6 <arm_rms_f32+0xaa>
 800a7f0:	00000000 	.word	0x00000000

0800a7f4 <arm_biquad_cascade_df1_init_f32>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	6082      	str	r2, [r0, #8]
 800a7f8:	6001      	str	r1, [r0, #0]
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	010a      	lsls	r2, r1, #4
 800a7fe:	4618      	mov	r0, r3
 800a800:	2100      	movs	r1, #0
 800a802:	f000 f936 	bl	800aa72 <memset>
 800a806:	6060      	str	r0, [r4, #4]
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	bf00      	nop

0800a80c <arm_biquad_cascade_df1_f32>:
 800a80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 800a814:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800a818:	f003 0e03 	and.w	lr, r3, #3
 800a81c:	ea4f 190c 	mov.w	r9, ip, lsl #4
 800a820:	6807      	ldr	r7, [r0, #0]
 800a822:	eb02 0a09 	add.w	sl, r2, r9
 800a826:	f10e 38ff 	add.w	r8, lr, #4294967295
 800a82a:	3614      	adds	r6, #20
 800a82c:	3510      	adds	r5, #16
 800a82e:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 800a832:	ed16 2a04 	vldr	s4, [r6, #-16]
 800a836:	ed56 2a03 	vldr	s5, [r6, #-12]
 800a83a:	ed16 3a02 	vldr	s6, [r6, #-8]
 800a83e:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a842:	ed55 5a04 	vldr	s11, [r5, #-16]
 800a846:	ed15 5a03 	vldr	s10, [r5, #-12]
 800a84a:	ed15 7a02 	vldr	s14, [r5, #-8]
 800a84e:	ed55 7a01 	vldr	s15, [r5, #-4]
 800a852:	f1bc 0f00 	cmp.w	ip, #0
 800a856:	f000 80d4 	beq.w	800aa02 <arm_biquad_cascade_df1_f32+0x1f6>
 800a85a:	f101 0010 	add.w	r0, r1, #16
 800a85e:	f102 0310 	add.w	r3, r2, #16
 800a862:	4664      	mov	r4, ip
 800a864:	ed10 6a04 	vldr	s12, [r0, #-16]
 800a868:	ee62 4a25 	vmul.f32	s9, s4, s11
 800a86c:	ee64 6a06 	vmul.f32	s13, s8, s12
 800a870:	ee22 5a85 	vmul.f32	s10, s5, s10
 800a874:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a878:	ee63 4a07 	vmul.f32	s9, s6, s14
 800a87c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a880:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800a884:	ee76 7aa4 	vadd.f32	s15, s13, s9
 800a888:	ee22 1a06 	vmul.f32	s2, s4, s12
 800a88c:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a890:	ee62 1aa5 	vmul.f32	s3, s5, s11
 800a894:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a898:	ed50 4a03 	vldr	s9, [r0, #-12]
 800a89c:	ee64 6a24 	vmul.f32	s13, s8, s9
 800a8a0:	ee23 5a27 	vmul.f32	s10, s6, s15
 800a8a4:	ee76 6a81 	vadd.f32	s13, s13, s2
 800a8a8:	ee63 5a87 	vmul.f32	s11, s7, s14
 800a8ac:	ee36 7aa1 	vadd.f32	s14, s13, s3
 800a8b0:	ee62 1a24 	vmul.f32	s3, s4, s9
 800a8b4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a8b8:	ee22 6a86 	vmul.f32	s12, s5, s12
 800a8bc:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a8c0:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800a8c4:	ed03 7a03 	vstr	s14, [r3, #-12]
 800a8c8:	ed10 5a02 	vldr	s10, [r0, #-8]
 800a8cc:	ee64 5a05 	vmul.f32	s11, s8, s10
 800a8d0:	ee63 6a07 	vmul.f32	s13, s6, s14
 800a8d4:	ee75 5aa1 	vadd.f32	s11, s11, s3
 800a8d8:	ee62 1a05 	vmul.f32	s3, s4, s10
 800a8dc:	ee75 5a86 	vadd.f32	s11, s11, s12
 800a8e0:	ee62 4aa4 	vmul.f32	s9, s5, s9
 800a8e4:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800a8e8:	ee23 7a87 	vmul.f32	s14, s7, s14
 800a8ec:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800a8f0:	3c01      	subs	r4, #1
 800a8f2:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a8f6:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a8fa:	ee24 6a25 	vmul.f32	s12, s8, s11
 800a8fe:	ee63 6a27 	vmul.f32	s13, s6, s15
 800a902:	ee36 6a21 	vadd.f32	s12, s12, s3
 800a906:	f100 0010 	add.w	r0, r0, #16
 800a90a:	ee36 6a24 	vadd.f32	s12, s12, s9
 800a90e:	f103 0310 	add.w	r3, r3, #16
 800a912:	ee36 6a26 	vadd.f32	s12, s12, s13
 800a916:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a91a:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800a91e:	d1a1      	bne.n	800a864 <arm_biquad_cascade_df1_f32+0x58>
 800a920:	4449      	add	r1, r9
 800a922:	4653      	mov	r3, sl
 800a924:	f1be 0f00 	cmp.w	lr, #0
 800a928:	d047      	beq.n	800a9ba <arm_biquad_cascade_df1_f32+0x1ae>
 800a92a:	edd1 4a00 	vldr	s9, [r1]
 800a92e:	ee22 6a25 	vmul.f32	s12, s4, s11
 800a932:	ee64 1a24 	vmul.f32	s3, s8, s9
 800a936:	ee62 6a85 	vmul.f32	s13, s5, s10
 800a93a:	ee36 5a21 	vadd.f32	s10, s12, s3
 800a93e:	ee23 6a07 	vmul.f32	s12, s6, s14
 800a942:	ee35 5a26 	vadd.f32	s10, s10, s13
 800a946:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800a94a:	ee35 6a06 	vadd.f32	s12, s10, s12
 800a94e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a952:	ed83 6a00 	vstr	s12, [r3]
 800a956:	f1b8 0f00 	cmp.w	r8, #0
 800a95a:	d040      	beq.n	800a9de <arm_biquad_cascade_df1_f32+0x1d2>
 800a95c:	ed91 5a01 	vldr	s10, [r1, #4]
 800a960:	ee62 7a24 	vmul.f32	s15, s4, s9
 800a964:	ee65 1a04 	vmul.f32	s3, s10, s8
 800a968:	ee62 6aa5 	vmul.f32	s13, s5, s11
 800a96c:	ee77 5aa1 	vadd.f32	s11, s15, s3
 800a970:	ee63 7a06 	vmul.f32	s15, s6, s12
 800a974:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800a978:	ee23 7a87 	vmul.f32	s14, s7, s14
 800a97c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800a980:	f1b8 0f01 	cmp.w	r8, #1
 800a984:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a988:	edc3 7a01 	vstr	s15, [r3, #4]
 800a98c:	d030      	beq.n	800a9f0 <arm_biquad_cascade_df1_f32+0x1e4>
 800a98e:	edd1 5a02 	vldr	s11, [r1, #8]
 800a992:	ee25 2a02 	vmul.f32	s4, s10, s4
 800a996:	ee64 6a25 	vmul.f32	s13, s8, s11
 800a99a:	ee62 2aa4 	vmul.f32	s5, s5, s9
 800a99e:	ee76 6a82 	vadd.f32	s13, s13, s4
 800a9a2:	ee27 3a83 	vmul.f32	s6, s15, s6
 800a9a6:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800a9aa:	ee63 3a86 	vmul.f32	s7, s7, s12
 800a9ae:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a9b2:	ee36 7aa3 	vadd.f32	s14, s13, s7
 800a9b6:	ed83 7a02 	vstr	s14, [r3, #8]
 800a9ba:	3f01      	subs	r7, #1
 800a9bc:	ed45 5a04 	vstr	s11, [r5, #-16]
 800a9c0:	ed05 5a03 	vstr	s10, [r5, #-12]
 800a9c4:	ed05 7a02 	vstr	s14, [r5, #-8]
 800a9c8:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a9cc:	f106 0614 	add.w	r6, r6, #20
 800a9d0:	f105 0510 	add.w	r5, r5, #16
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	f47f af2a 	bne.w	800a82e <arm_biquad_cascade_df1_f32+0x22>
 800a9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9de:	eef0 7a47 	vmov.f32	s15, s14
 800a9e2:	eeb0 5a65 	vmov.f32	s10, s11
 800a9e6:	eeb0 7a46 	vmov.f32	s14, s12
 800a9ea:	eef0 5a64 	vmov.f32	s11, s9
 800a9ee:	e7e4      	b.n	800a9ba <arm_biquad_cascade_df1_f32+0x1ae>
 800a9f0:	eeb0 7a67 	vmov.f32	s14, s15
 800a9f4:	eef0 5a45 	vmov.f32	s11, s10
 800a9f8:	eef0 7a46 	vmov.f32	s15, s12
 800a9fc:	eeb0 5a64 	vmov.f32	s10, s9
 800aa00:	e7db      	b.n	800a9ba <arm_biquad_cascade_df1_f32+0x1ae>
 800aa02:	4613      	mov	r3, r2
 800aa04:	e78e      	b.n	800a924 <arm_biquad_cascade_df1_f32+0x118>
 800aa06:	bf00      	nop

0800aa08 <__errno>:
 800aa08:	4b01      	ldr	r3, [pc, #4]	; (800aa10 <__errno+0x8>)
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	20000010 	.word	0x20000010

0800aa14 <__libc_init_array>:
 800aa14:	b570      	push	{r4, r5, r6, lr}
 800aa16:	4e0d      	ldr	r6, [pc, #52]	; (800aa4c <__libc_init_array+0x38>)
 800aa18:	4c0d      	ldr	r4, [pc, #52]	; (800aa50 <__libc_init_array+0x3c>)
 800aa1a:	1ba4      	subs	r4, r4, r6
 800aa1c:	10a4      	asrs	r4, r4, #2
 800aa1e:	2500      	movs	r5, #0
 800aa20:	42a5      	cmp	r5, r4
 800aa22:	d109      	bne.n	800aa38 <__libc_init_array+0x24>
 800aa24:	4e0b      	ldr	r6, [pc, #44]	; (800aa54 <__libc_init_array+0x40>)
 800aa26:	4c0c      	ldr	r4, [pc, #48]	; (800aa58 <__libc_init_array+0x44>)
 800aa28:	f002 f8b6 	bl	800cb98 <_init>
 800aa2c:	1ba4      	subs	r4, r4, r6
 800aa2e:	10a4      	asrs	r4, r4, #2
 800aa30:	2500      	movs	r5, #0
 800aa32:	42a5      	cmp	r5, r4
 800aa34:	d105      	bne.n	800aa42 <__libc_init_array+0x2e>
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa3c:	4798      	blx	r3
 800aa3e:	3501      	adds	r5, #1
 800aa40:	e7ee      	b.n	800aa20 <__libc_init_array+0xc>
 800aa42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa46:	4798      	blx	r3
 800aa48:	3501      	adds	r5, #1
 800aa4a:	e7f2      	b.n	800aa32 <__libc_init_array+0x1e>
 800aa4c:	0800d050 	.word	0x0800d050
 800aa50:	0800d050 	.word	0x0800d050
 800aa54:	0800d050 	.word	0x0800d050
 800aa58:	0800d054 	.word	0x0800d054

0800aa5c <memcpy>:
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	1e43      	subs	r3, r0, #1
 800aa60:	440a      	add	r2, r1
 800aa62:	4291      	cmp	r1, r2
 800aa64:	d100      	bne.n	800aa68 <memcpy+0xc>
 800aa66:	bd10      	pop	{r4, pc}
 800aa68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa70:	e7f7      	b.n	800aa62 <memcpy+0x6>

0800aa72 <memset>:
 800aa72:	4402      	add	r2, r0
 800aa74:	4603      	mov	r3, r0
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d100      	bne.n	800aa7c <memset+0xa>
 800aa7a:	4770      	bx	lr
 800aa7c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa80:	e7f9      	b.n	800aa76 <memset+0x4>

0800aa82 <__cvt>:
 800aa82:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa86:	ec55 4b10 	vmov	r4, r5, d0
 800aa8a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800aa8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	460e      	mov	r6, r1
 800aa94:	4691      	mov	r9, r2
 800aa96:	4619      	mov	r1, r3
 800aa98:	bfb8      	it	lt
 800aa9a:	4622      	movlt	r2, r4
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	f027 0720 	bic.w	r7, r7, #32
 800aaa2:	bfbb      	ittet	lt
 800aaa4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aaa8:	461d      	movlt	r5, r3
 800aaaa:	2300      	movge	r3, #0
 800aaac:	232d      	movlt	r3, #45	; 0x2d
 800aaae:	bfb8      	it	lt
 800aab0:	4614      	movlt	r4, r2
 800aab2:	2f46      	cmp	r7, #70	; 0x46
 800aab4:	700b      	strb	r3, [r1, #0]
 800aab6:	d004      	beq.n	800aac2 <__cvt+0x40>
 800aab8:	2f45      	cmp	r7, #69	; 0x45
 800aaba:	d100      	bne.n	800aabe <__cvt+0x3c>
 800aabc:	3601      	adds	r6, #1
 800aabe:	2102      	movs	r1, #2
 800aac0:	e000      	b.n	800aac4 <__cvt+0x42>
 800aac2:	2103      	movs	r1, #3
 800aac4:	ab03      	add	r3, sp, #12
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	ab02      	add	r3, sp, #8
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	4632      	mov	r2, r6
 800aace:	4653      	mov	r3, sl
 800aad0:	ec45 4b10 	vmov	d0, r4, r5
 800aad4:	f000 fce0 	bl	800b498 <_dtoa_r>
 800aad8:	2f47      	cmp	r7, #71	; 0x47
 800aada:	4680      	mov	r8, r0
 800aadc:	d102      	bne.n	800aae4 <__cvt+0x62>
 800aade:	f019 0f01 	tst.w	r9, #1
 800aae2:	d026      	beq.n	800ab32 <__cvt+0xb0>
 800aae4:	2f46      	cmp	r7, #70	; 0x46
 800aae6:	eb08 0906 	add.w	r9, r8, r6
 800aaea:	d111      	bne.n	800ab10 <__cvt+0x8e>
 800aaec:	f898 3000 	ldrb.w	r3, [r8]
 800aaf0:	2b30      	cmp	r3, #48	; 0x30
 800aaf2:	d10a      	bne.n	800ab0a <__cvt+0x88>
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4629      	mov	r1, r5
 800aafc:	f7f5 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab00:	b918      	cbnz	r0, 800ab0a <__cvt+0x88>
 800ab02:	f1c6 0601 	rsb	r6, r6, #1
 800ab06:	f8ca 6000 	str.w	r6, [sl]
 800ab0a:	f8da 3000 	ldr.w	r3, [sl]
 800ab0e:	4499      	add	r9, r3
 800ab10:	2200      	movs	r2, #0
 800ab12:	2300      	movs	r3, #0
 800ab14:	4620      	mov	r0, r4
 800ab16:	4629      	mov	r1, r5
 800ab18:	f7f5 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab1c:	b938      	cbnz	r0, 800ab2e <__cvt+0xac>
 800ab1e:	2230      	movs	r2, #48	; 0x30
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	454b      	cmp	r3, r9
 800ab24:	d205      	bcs.n	800ab32 <__cvt+0xb0>
 800ab26:	1c59      	adds	r1, r3, #1
 800ab28:	9103      	str	r1, [sp, #12]
 800ab2a:	701a      	strb	r2, [r3, #0]
 800ab2c:	e7f8      	b.n	800ab20 <__cvt+0x9e>
 800ab2e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab36:	eba3 0308 	sub.w	r3, r3, r8
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	b004      	add	sp, #16
 800ab40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ab44 <__exponent>:
 800ab44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab46:	2900      	cmp	r1, #0
 800ab48:	4604      	mov	r4, r0
 800ab4a:	bfba      	itte	lt
 800ab4c:	4249      	neglt	r1, r1
 800ab4e:	232d      	movlt	r3, #45	; 0x2d
 800ab50:	232b      	movge	r3, #43	; 0x2b
 800ab52:	2909      	cmp	r1, #9
 800ab54:	f804 2b02 	strb.w	r2, [r4], #2
 800ab58:	7043      	strb	r3, [r0, #1]
 800ab5a:	dd20      	ble.n	800ab9e <__exponent+0x5a>
 800ab5c:	f10d 0307 	add.w	r3, sp, #7
 800ab60:	461f      	mov	r7, r3
 800ab62:	260a      	movs	r6, #10
 800ab64:	fb91 f5f6 	sdiv	r5, r1, r6
 800ab68:	fb06 1115 	mls	r1, r6, r5, r1
 800ab6c:	3130      	adds	r1, #48	; 0x30
 800ab6e:	2d09      	cmp	r5, #9
 800ab70:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab74:	f103 32ff 	add.w	r2, r3, #4294967295
 800ab78:	4629      	mov	r1, r5
 800ab7a:	dc09      	bgt.n	800ab90 <__exponent+0x4c>
 800ab7c:	3130      	adds	r1, #48	; 0x30
 800ab7e:	3b02      	subs	r3, #2
 800ab80:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ab84:	42bb      	cmp	r3, r7
 800ab86:	4622      	mov	r2, r4
 800ab88:	d304      	bcc.n	800ab94 <__exponent+0x50>
 800ab8a:	1a10      	subs	r0, r2, r0
 800ab8c:	b003      	add	sp, #12
 800ab8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab90:	4613      	mov	r3, r2
 800ab92:	e7e7      	b.n	800ab64 <__exponent+0x20>
 800ab94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab98:	f804 2b01 	strb.w	r2, [r4], #1
 800ab9c:	e7f2      	b.n	800ab84 <__exponent+0x40>
 800ab9e:	2330      	movs	r3, #48	; 0x30
 800aba0:	4419      	add	r1, r3
 800aba2:	7083      	strb	r3, [r0, #2]
 800aba4:	1d02      	adds	r2, r0, #4
 800aba6:	70c1      	strb	r1, [r0, #3]
 800aba8:	e7ef      	b.n	800ab8a <__exponent+0x46>
	...

0800abac <_printf_float>:
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	b08d      	sub	sp, #52	; 0x34
 800abb2:	460c      	mov	r4, r1
 800abb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800abb8:	4616      	mov	r6, r2
 800abba:	461f      	mov	r7, r3
 800abbc:	4605      	mov	r5, r0
 800abbe:	f001 fa23 	bl	800c008 <_localeconv_r>
 800abc2:	6803      	ldr	r3, [r0, #0]
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7f5 fb02 	bl	80001d0 <strlen>
 800abcc:	2300      	movs	r3, #0
 800abce:	930a      	str	r3, [sp, #40]	; 0x28
 800abd0:	f8d8 3000 	ldr.w	r3, [r8]
 800abd4:	9005      	str	r0, [sp, #20]
 800abd6:	3307      	adds	r3, #7
 800abd8:	f023 0307 	bic.w	r3, r3, #7
 800abdc:	f103 0208 	add.w	r2, r3, #8
 800abe0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800abe4:	f8d4 b000 	ldr.w	fp, [r4]
 800abe8:	f8c8 2000 	str.w	r2, [r8]
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abf4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800abf8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abfc:	9307      	str	r3, [sp, #28]
 800abfe:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac02:	f04f 32ff 	mov.w	r2, #4294967295
 800ac06:	4ba7      	ldr	r3, [pc, #668]	; (800aea4 <_printf_float+0x2f8>)
 800ac08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac0c:	f7f5 ff8e 	bl	8000b2c <__aeabi_dcmpun>
 800ac10:	bb70      	cbnz	r0, 800ac70 <_printf_float+0xc4>
 800ac12:	f04f 32ff 	mov.w	r2, #4294967295
 800ac16:	4ba3      	ldr	r3, [pc, #652]	; (800aea4 <_printf_float+0x2f8>)
 800ac18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac1c:	f7f5 ff68 	bl	8000af0 <__aeabi_dcmple>
 800ac20:	bb30      	cbnz	r0, 800ac70 <_printf_float+0xc4>
 800ac22:	2200      	movs	r2, #0
 800ac24:	2300      	movs	r3, #0
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	f7f5 ff57 	bl	8000adc <__aeabi_dcmplt>
 800ac2e:	b110      	cbz	r0, 800ac36 <_printf_float+0x8a>
 800ac30:	232d      	movs	r3, #45	; 0x2d
 800ac32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac36:	4a9c      	ldr	r2, [pc, #624]	; (800aea8 <_printf_float+0x2fc>)
 800ac38:	4b9c      	ldr	r3, [pc, #624]	; (800aeac <_printf_float+0x300>)
 800ac3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ac3e:	bf8c      	ite	hi
 800ac40:	4690      	movhi	r8, r2
 800ac42:	4698      	movls	r8, r3
 800ac44:	2303      	movs	r3, #3
 800ac46:	f02b 0204 	bic.w	r2, fp, #4
 800ac4a:	6123      	str	r3, [r4, #16]
 800ac4c:	6022      	str	r2, [r4, #0]
 800ac4e:	f04f 0900 	mov.w	r9, #0
 800ac52:	9700      	str	r7, [sp, #0]
 800ac54:	4633      	mov	r3, r6
 800ac56:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f000 f9e6 	bl	800b02c <_printf_common>
 800ac60:	3001      	adds	r0, #1
 800ac62:	f040 808d 	bne.w	800ad80 <_printf_float+0x1d4>
 800ac66:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6a:	b00d      	add	sp, #52	; 0x34
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac70:	4642      	mov	r2, r8
 800ac72:	464b      	mov	r3, r9
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 ff58 	bl	8000b2c <__aeabi_dcmpun>
 800ac7c:	b110      	cbz	r0, 800ac84 <_printf_float+0xd8>
 800ac7e:	4a8c      	ldr	r2, [pc, #560]	; (800aeb0 <_printf_float+0x304>)
 800ac80:	4b8c      	ldr	r3, [pc, #560]	; (800aeb4 <_printf_float+0x308>)
 800ac82:	e7da      	b.n	800ac3a <_printf_float+0x8e>
 800ac84:	6861      	ldr	r1, [r4, #4]
 800ac86:	1c4b      	adds	r3, r1, #1
 800ac88:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ac8c:	a80a      	add	r0, sp, #40	; 0x28
 800ac8e:	d13e      	bne.n	800ad0e <_printf_float+0x162>
 800ac90:	2306      	movs	r3, #6
 800ac92:	6063      	str	r3, [r4, #4]
 800ac94:	2300      	movs	r3, #0
 800ac96:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ac9a:	ab09      	add	r3, sp, #36	; 0x24
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	ec49 8b10 	vmov	d0, r8, r9
 800aca2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	f8cd a004 	str.w	sl, [sp, #4]
 800acac:	6861      	ldr	r1, [r4, #4]
 800acae:	4628      	mov	r0, r5
 800acb0:	f7ff fee7 	bl	800aa82 <__cvt>
 800acb4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800acb8:	2b47      	cmp	r3, #71	; 0x47
 800acba:	4680      	mov	r8, r0
 800acbc:	d109      	bne.n	800acd2 <_printf_float+0x126>
 800acbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc0:	1cd8      	adds	r0, r3, #3
 800acc2:	db02      	blt.n	800acca <_printf_float+0x11e>
 800acc4:	6862      	ldr	r2, [r4, #4]
 800acc6:	4293      	cmp	r3, r2
 800acc8:	dd47      	ble.n	800ad5a <_printf_float+0x1ae>
 800acca:	f1aa 0a02 	sub.w	sl, sl, #2
 800acce:	fa5f fa8a 	uxtb.w	sl, sl
 800acd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800acd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acd8:	d824      	bhi.n	800ad24 <_printf_float+0x178>
 800acda:	3901      	subs	r1, #1
 800acdc:	4652      	mov	r2, sl
 800acde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ace2:	9109      	str	r1, [sp, #36]	; 0x24
 800ace4:	f7ff ff2e 	bl	800ab44 <__exponent>
 800ace8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acea:	1813      	adds	r3, r2, r0
 800acec:	2a01      	cmp	r2, #1
 800acee:	4681      	mov	r9, r0
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	dc02      	bgt.n	800acfa <_printf_float+0x14e>
 800acf4:	6822      	ldr	r2, [r4, #0]
 800acf6:	07d1      	lsls	r1, r2, #31
 800acf8:	d501      	bpl.n	800acfe <_printf_float+0x152>
 800acfa:	3301      	adds	r3, #1
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0a5      	beq.n	800ac52 <_printf_float+0xa6>
 800ad06:	232d      	movs	r3, #45	; 0x2d
 800ad08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad0c:	e7a1      	b.n	800ac52 <_printf_float+0xa6>
 800ad0e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ad12:	f000 8177 	beq.w	800b004 <_printf_float+0x458>
 800ad16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ad1a:	d1bb      	bne.n	800ac94 <_printf_float+0xe8>
 800ad1c:	2900      	cmp	r1, #0
 800ad1e:	d1b9      	bne.n	800ac94 <_printf_float+0xe8>
 800ad20:	2301      	movs	r3, #1
 800ad22:	e7b6      	b.n	800ac92 <_printf_float+0xe6>
 800ad24:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ad28:	d119      	bne.n	800ad5e <_printf_float+0x1b2>
 800ad2a:	2900      	cmp	r1, #0
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	dd0c      	ble.n	800ad4a <_printf_float+0x19e>
 800ad30:	6121      	str	r1, [r4, #16]
 800ad32:	b913      	cbnz	r3, 800ad3a <_printf_float+0x18e>
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	07d2      	lsls	r2, r2, #31
 800ad38:	d502      	bpl.n	800ad40 <_printf_float+0x194>
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	440b      	add	r3, r1
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad42:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad44:	f04f 0900 	mov.w	r9, #0
 800ad48:	e7d9      	b.n	800acfe <_printf_float+0x152>
 800ad4a:	b913      	cbnz	r3, 800ad52 <_printf_float+0x1a6>
 800ad4c:	6822      	ldr	r2, [r4, #0]
 800ad4e:	07d0      	lsls	r0, r2, #31
 800ad50:	d501      	bpl.n	800ad56 <_printf_float+0x1aa>
 800ad52:	3302      	adds	r3, #2
 800ad54:	e7f3      	b.n	800ad3e <_printf_float+0x192>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e7f1      	b.n	800ad3e <_printf_float+0x192>
 800ad5a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ad5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ad62:	4293      	cmp	r3, r2
 800ad64:	db05      	blt.n	800ad72 <_printf_float+0x1c6>
 800ad66:	6822      	ldr	r2, [r4, #0]
 800ad68:	6123      	str	r3, [r4, #16]
 800ad6a:	07d1      	lsls	r1, r2, #31
 800ad6c:	d5e8      	bpl.n	800ad40 <_printf_float+0x194>
 800ad6e:	3301      	adds	r3, #1
 800ad70:	e7e5      	b.n	800ad3e <_printf_float+0x192>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bfd4      	ite	le
 800ad76:	f1c3 0302 	rsble	r3, r3, #2
 800ad7a:	2301      	movgt	r3, #1
 800ad7c:	4413      	add	r3, r2
 800ad7e:	e7de      	b.n	800ad3e <_printf_float+0x192>
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	055a      	lsls	r2, r3, #21
 800ad84:	d407      	bmi.n	800ad96 <_printf_float+0x1ea>
 800ad86:	6923      	ldr	r3, [r4, #16]
 800ad88:	4642      	mov	r2, r8
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	d12b      	bne.n	800adec <_printf_float+0x240>
 800ad94:	e767      	b.n	800ac66 <_printf_float+0xba>
 800ad96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ad9a:	f240 80dc 	bls.w	800af56 <_printf_float+0x3aa>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2300      	movs	r3, #0
 800ada2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ada6:	f7f5 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d033      	beq.n	800ae16 <_printf_float+0x26a>
 800adae:	2301      	movs	r3, #1
 800adb0:	4a41      	ldr	r2, [pc, #260]	; (800aeb8 <_printf_float+0x30c>)
 800adb2:	4631      	mov	r1, r6
 800adb4:	4628      	mov	r0, r5
 800adb6:	47b8      	blx	r7
 800adb8:	3001      	adds	r0, #1
 800adba:	f43f af54 	beq.w	800ac66 <_printf_float+0xba>
 800adbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adc2:	429a      	cmp	r2, r3
 800adc4:	db02      	blt.n	800adcc <_printf_float+0x220>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	07d8      	lsls	r0, r3, #31
 800adca:	d50f      	bpl.n	800adec <_printf_float+0x240>
 800adcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800add0:	4631      	mov	r1, r6
 800add2:	4628      	mov	r0, r5
 800add4:	47b8      	blx	r7
 800add6:	3001      	adds	r0, #1
 800add8:	f43f af45 	beq.w	800ac66 <_printf_float+0xba>
 800addc:	f04f 0800 	mov.w	r8, #0
 800ade0:	f104 091a 	add.w	r9, r4, #26
 800ade4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade6:	3b01      	subs	r3, #1
 800ade8:	4543      	cmp	r3, r8
 800adea:	dc09      	bgt.n	800ae00 <_printf_float+0x254>
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	079b      	lsls	r3, r3, #30
 800adf0:	f100 8103 	bmi.w	800affa <_printf_float+0x44e>
 800adf4:	68e0      	ldr	r0, [r4, #12]
 800adf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf8:	4298      	cmp	r0, r3
 800adfa:	bfb8      	it	lt
 800adfc:	4618      	movlt	r0, r3
 800adfe:	e734      	b.n	800ac6a <_printf_float+0xbe>
 800ae00:	2301      	movs	r3, #1
 800ae02:	464a      	mov	r2, r9
 800ae04:	4631      	mov	r1, r6
 800ae06:	4628      	mov	r0, r5
 800ae08:	47b8      	blx	r7
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	f43f af2b 	beq.w	800ac66 <_printf_float+0xba>
 800ae10:	f108 0801 	add.w	r8, r8, #1
 800ae14:	e7e6      	b.n	800ade4 <_printf_float+0x238>
 800ae16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	dc2b      	bgt.n	800ae74 <_printf_float+0x2c8>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	4a26      	ldr	r2, [pc, #152]	; (800aeb8 <_printf_float+0x30c>)
 800ae20:	4631      	mov	r1, r6
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	f43f af1d 	beq.w	800ac66 <_printf_float+0xba>
 800ae2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2e:	b923      	cbnz	r3, 800ae3a <_printf_float+0x28e>
 800ae30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae32:	b913      	cbnz	r3, 800ae3a <_printf_float+0x28e>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	07d9      	lsls	r1, r3, #31
 800ae38:	d5d8      	bpl.n	800adec <_printf_float+0x240>
 800ae3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	f43f af0e 	beq.w	800ac66 <_printf_float+0xba>
 800ae4a:	f04f 0900 	mov.w	r9, #0
 800ae4e:	f104 0a1a 	add.w	sl, r4, #26
 800ae52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae54:	425b      	negs	r3, r3
 800ae56:	454b      	cmp	r3, r9
 800ae58:	dc01      	bgt.n	800ae5e <_printf_float+0x2b2>
 800ae5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5c:	e794      	b.n	800ad88 <_printf_float+0x1dc>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	4652      	mov	r2, sl
 800ae62:	4631      	mov	r1, r6
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	f43f aefc 	beq.w	800ac66 <_printf_float+0xba>
 800ae6e:	f109 0901 	add.w	r9, r9, #1
 800ae72:	e7ee      	b.n	800ae52 <_printf_float+0x2a6>
 800ae74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	bfa8      	it	ge
 800ae7c:	461a      	movge	r2, r3
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	4691      	mov	r9, r2
 800ae82:	dd07      	ble.n	800ae94 <_printf_float+0x2e8>
 800ae84:	4613      	mov	r3, r2
 800ae86:	4631      	mov	r1, r6
 800ae88:	4642      	mov	r2, r8
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f aee9 	beq.w	800ac66 <_printf_float+0xba>
 800ae94:	f104 031a 	add.w	r3, r4, #26
 800ae98:	f04f 0b00 	mov.w	fp, #0
 800ae9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aea0:	9306      	str	r3, [sp, #24]
 800aea2:	e015      	b.n	800aed0 <_printf_float+0x324>
 800aea4:	7fefffff 	.word	0x7fefffff
 800aea8:	0800cdf0 	.word	0x0800cdf0
 800aeac:	0800cdec 	.word	0x0800cdec
 800aeb0:	0800cdf8 	.word	0x0800cdf8
 800aeb4:	0800cdf4 	.word	0x0800cdf4
 800aeb8:	0800cdfc 	.word	0x0800cdfc
 800aebc:	2301      	movs	r3, #1
 800aebe:	9a06      	ldr	r2, [sp, #24]
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	f43f aecd 	beq.w	800ac66 <_printf_float+0xba>
 800aecc:	f10b 0b01 	add.w	fp, fp, #1
 800aed0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800aed4:	ebaa 0309 	sub.w	r3, sl, r9
 800aed8:	455b      	cmp	r3, fp
 800aeda:	dcef      	bgt.n	800aebc <_printf_float+0x310>
 800aedc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aee0:	429a      	cmp	r2, r3
 800aee2:	44d0      	add	r8, sl
 800aee4:	db15      	blt.n	800af12 <_printf_float+0x366>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	07da      	lsls	r2, r3, #31
 800aeea:	d412      	bmi.n	800af12 <_printf_float+0x366>
 800aeec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aef0:	eba3 020a 	sub.w	r2, r3, sl
 800aef4:	eba3 0a01 	sub.w	sl, r3, r1
 800aef8:	4592      	cmp	sl, r2
 800aefa:	bfa8      	it	ge
 800aefc:	4692      	movge	sl, r2
 800aefe:	f1ba 0f00 	cmp.w	sl, #0
 800af02:	dc0e      	bgt.n	800af22 <_printf_float+0x376>
 800af04:	f04f 0800 	mov.w	r8, #0
 800af08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af0c:	f104 091a 	add.w	r9, r4, #26
 800af10:	e019      	b.n	800af46 <_printf_float+0x39a>
 800af12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af16:	4631      	mov	r1, r6
 800af18:	4628      	mov	r0, r5
 800af1a:	47b8      	blx	r7
 800af1c:	3001      	adds	r0, #1
 800af1e:	d1e5      	bne.n	800aeec <_printf_float+0x340>
 800af20:	e6a1      	b.n	800ac66 <_printf_float+0xba>
 800af22:	4653      	mov	r3, sl
 800af24:	4642      	mov	r2, r8
 800af26:	4631      	mov	r1, r6
 800af28:	4628      	mov	r0, r5
 800af2a:	47b8      	blx	r7
 800af2c:	3001      	adds	r0, #1
 800af2e:	d1e9      	bne.n	800af04 <_printf_float+0x358>
 800af30:	e699      	b.n	800ac66 <_printf_float+0xba>
 800af32:	2301      	movs	r3, #1
 800af34:	464a      	mov	r2, r9
 800af36:	4631      	mov	r1, r6
 800af38:	4628      	mov	r0, r5
 800af3a:	47b8      	blx	r7
 800af3c:	3001      	adds	r0, #1
 800af3e:	f43f ae92 	beq.w	800ac66 <_printf_float+0xba>
 800af42:	f108 0801 	add.w	r8, r8, #1
 800af46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af4a:	1a9b      	subs	r3, r3, r2
 800af4c:	eba3 030a 	sub.w	r3, r3, sl
 800af50:	4543      	cmp	r3, r8
 800af52:	dcee      	bgt.n	800af32 <_printf_float+0x386>
 800af54:	e74a      	b.n	800adec <_printf_float+0x240>
 800af56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af58:	2a01      	cmp	r2, #1
 800af5a:	dc01      	bgt.n	800af60 <_printf_float+0x3b4>
 800af5c:	07db      	lsls	r3, r3, #31
 800af5e:	d53a      	bpl.n	800afd6 <_printf_float+0x42a>
 800af60:	2301      	movs	r3, #1
 800af62:	4642      	mov	r2, r8
 800af64:	4631      	mov	r1, r6
 800af66:	4628      	mov	r0, r5
 800af68:	47b8      	blx	r7
 800af6a:	3001      	adds	r0, #1
 800af6c:	f43f ae7b 	beq.w	800ac66 <_printf_float+0xba>
 800af70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af74:	4631      	mov	r1, r6
 800af76:	4628      	mov	r0, r5
 800af78:	47b8      	blx	r7
 800af7a:	3001      	adds	r0, #1
 800af7c:	f108 0801 	add.w	r8, r8, #1
 800af80:	f43f ae71 	beq.w	800ac66 <_printf_float+0xba>
 800af84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af86:	2200      	movs	r2, #0
 800af88:	f103 3aff 	add.w	sl, r3, #4294967295
 800af8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af90:	2300      	movs	r3, #0
 800af92:	f7f5 fd99 	bl	8000ac8 <__aeabi_dcmpeq>
 800af96:	b9c8      	cbnz	r0, 800afcc <_printf_float+0x420>
 800af98:	4653      	mov	r3, sl
 800af9a:	4642      	mov	r2, r8
 800af9c:	4631      	mov	r1, r6
 800af9e:	4628      	mov	r0, r5
 800afa0:	47b8      	blx	r7
 800afa2:	3001      	adds	r0, #1
 800afa4:	d10e      	bne.n	800afc4 <_printf_float+0x418>
 800afa6:	e65e      	b.n	800ac66 <_printf_float+0xba>
 800afa8:	2301      	movs	r3, #1
 800afaa:	4652      	mov	r2, sl
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	f43f ae57 	beq.w	800ac66 <_printf_float+0xba>
 800afb8:	f108 0801 	add.w	r8, r8, #1
 800afbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbe:	3b01      	subs	r3, #1
 800afc0:	4543      	cmp	r3, r8
 800afc2:	dcf1      	bgt.n	800afa8 <_printf_float+0x3fc>
 800afc4:	464b      	mov	r3, r9
 800afc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800afca:	e6de      	b.n	800ad8a <_printf_float+0x1de>
 800afcc:	f04f 0800 	mov.w	r8, #0
 800afd0:	f104 0a1a 	add.w	sl, r4, #26
 800afd4:	e7f2      	b.n	800afbc <_printf_float+0x410>
 800afd6:	2301      	movs	r3, #1
 800afd8:	e7df      	b.n	800af9a <_printf_float+0x3ee>
 800afda:	2301      	movs	r3, #1
 800afdc:	464a      	mov	r2, r9
 800afde:	4631      	mov	r1, r6
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b8      	blx	r7
 800afe4:	3001      	adds	r0, #1
 800afe6:	f43f ae3e 	beq.w	800ac66 <_printf_float+0xba>
 800afea:	f108 0801 	add.w	r8, r8, #1
 800afee:	68e3      	ldr	r3, [r4, #12]
 800aff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aff2:	1a9b      	subs	r3, r3, r2
 800aff4:	4543      	cmp	r3, r8
 800aff6:	dcf0      	bgt.n	800afda <_printf_float+0x42e>
 800aff8:	e6fc      	b.n	800adf4 <_printf_float+0x248>
 800affa:	f04f 0800 	mov.w	r8, #0
 800affe:	f104 0919 	add.w	r9, r4, #25
 800b002:	e7f4      	b.n	800afee <_printf_float+0x442>
 800b004:	2900      	cmp	r1, #0
 800b006:	f43f ae8b 	beq.w	800ad20 <_printf_float+0x174>
 800b00a:	2300      	movs	r3, #0
 800b00c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b010:	ab09      	add	r3, sp, #36	; 0x24
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	ec49 8b10 	vmov	d0, r8, r9
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	f8cd a004 	str.w	sl, [sp, #4]
 800b01e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b022:	4628      	mov	r0, r5
 800b024:	f7ff fd2d 	bl	800aa82 <__cvt>
 800b028:	4680      	mov	r8, r0
 800b02a:	e648      	b.n	800acbe <_printf_float+0x112>

0800b02c <_printf_common>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	4691      	mov	r9, r2
 800b032:	461f      	mov	r7, r3
 800b034:	688a      	ldr	r2, [r1, #8]
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bfb8      	it	lt
 800b040:	4613      	movlt	r3, r2
 800b042:	f8c9 3000 	str.w	r3, [r9]
 800b046:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b04a:	4606      	mov	r6, r0
 800b04c:	460c      	mov	r4, r1
 800b04e:	b112      	cbz	r2, 800b056 <_printf_common+0x2a>
 800b050:	3301      	adds	r3, #1
 800b052:	f8c9 3000 	str.w	r3, [r9]
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	0699      	lsls	r1, r3, #26
 800b05a:	bf42      	ittt	mi
 800b05c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b060:	3302      	addmi	r3, #2
 800b062:	f8c9 3000 	strmi.w	r3, [r9]
 800b066:	6825      	ldr	r5, [r4, #0]
 800b068:	f015 0506 	ands.w	r5, r5, #6
 800b06c:	d107      	bne.n	800b07e <_printf_common+0x52>
 800b06e:	f104 0a19 	add.w	sl, r4, #25
 800b072:	68e3      	ldr	r3, [r4, #12]
 800b074:	f8d9 2000 	ldr.w	r2, [r9]
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	42ab      	cmp	r3, r5
 800b07c:	dc28      	bgt.n	800b0d0 <_printf_common+0xa4>
 800b07e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	3300      	adds	r3, #0
 800b086:	bf18      	it	ne
 800b088:	2301      	movne	r3, #1
 800b08a:	0692      	lsls	r2, r2, #26
 800b08c:	d42d      	bmi.n	800b0ea <_printf_common+0xbe>
 800b08e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b092:	4639      	mov	r1, r7
 800b094:	4630      	mov	r0, r6
 800b096:	47c0      	blx	r8
 800b098:	3001      	adds	r0, #1
 800b09a:	d020      	beq.n	800b0de <_printf_common+0xb2>
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	68e5      	ldr	r5, [r4, #12]
 800b0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800b0a4:	f003 0306 	and.w	r3, r3, #6
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	bf08      	it	eq
 800b0ac:	1aad      	subeq	r5, r5, r2
 800b0ae:	68a3      	ldr	r3, [r4, #8]
 800b0b0:	6922      	ldr	r2, [r4, #16]
 800b0b2:	bf0c      	ite	eq
 800b0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0b8:	2500      	movne	r5, #0
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	bfc4      	itt	gt
 800b0be:	1a9b      	subgt	r3, r3, r2
 800b0c0:	18ed      	addgt	r5, r5, r3
 800b0c2:	f04f 0900 	mov.w	r9, #0
 800b0c6:	341a      	adds	r4, #26
 800b0c8:	454d      	cmp	r5, r9
 800b0ca:	d11a      	bne.n	800b102 <_printf_common+0xd6>
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e008      	b.n	800b0e2 <_printf_common+0xb6>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	47c0      	blx	r8
 800b0da:	3001      	adds	r0, #1
 800b0dc:	d103      	bne.n	800b0e6 <_printf_common+0xba>
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e6:	3501      	adds	r5, #1
 800b0e8:	e7c3      	b.n	800b072 <_printf_common+0x46>
 800b0ea:	18e1      	adds	r1, r4, r3
 800b0ec:	1c5a      	adds	r2, r3, #1
 800b0ee:	2030      	movs	r0, #48	; 0x30
 800b0f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0f4:	4422      	add	r2, r4
 800b0f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0fe:	3302      	adds	r3, #2
 800b100:	e7c5      	b.n	800b08e <_printf_common+0x62>
 800b102:	2301      	movs	r3, #1
 800b104:	4622      	mov	r2, r4
 800b106:	4639      	mov	r1, r7
 800b108:	4630      	mov	r0, r6
 800b10a:	47c0      	blx	r8
 800b10c:	3001      	adds	r0, #1
 800b10e:	d0e6      	beq.n	800b0de <_printf_common+0xb2>
 800b110:	f109 0901 	add.w	r9, r9, #1
 800b114:	e7d8      	b.n	800b0c8 <_printf_common+0x9c>
	...

0800b118 <_printf_i>:
 800b118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b11c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b120:	460c      	mov	r4, r1
 800b122:	7e09      	ldrb	r1, [r1, #24]
 800b124:	b085      	sub	sp, #20
 800b126:	296e      	cmp	r1, #110	; 0x6e
 800b128:	4617      	mov	r7, r2
 800b12a:	4606      	mov	r6, r0
 800b12c:	4698      	mov	r8, r3
 800b12e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b130:	f000 80b3 	beq.w	800b29a <_printf_i+0x182>
 800b134:	d822      	bhi.n	800b17c <_printf_i+0x64>
 800b136:	2963      	cmp	r1, #99	; 0x63
 800b138:	d036      	beq.n	800b1a8 <_printf_i+0x90>
 800b13a:	d80a      	bhi.n	800b152 <_printf_i+0x3a>
 800b13c:	2900      	cmp	r1, #0
 800b13e:	f000 80b9 	beq.w	800b2b4 <_printf_i+0x19c>
 800b142:	2958      	cmp	r1, #88	; 0x58
 800b144:	f000 8083 	beq.w	800b24e <_printf_i+0x136>
 800b148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b14c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b150:	e032      	b.n	800b1b8 <_printf_i+0xa0>
 800b152:	2964      	cmp	r1, #100	; 0x64
 800b154:	d001      	beq.n	800b15a <_printf_i+0x42>
 800b156:	2969      	cmp	r1, #105	; 0x69
 800b158:	d1f6      	bne.n	800b148 <_printf_i+0x30>
 800b15a:	6820      	ldr	r0, [r4, #0]
 800b15c:	6813      	ldr	r3, [r2, #0]
 800b15e:	0605      	lsls	r5, r0, #24
 800b160:	f103 0104 	add.w	r1, r3, #4
 800b164:	d52a      	bpl.n	800b1bc <_printf_i+0xa4>
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6011      	str	r1, [r2, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	da03      	bge.n	800b176 <_printf_i+0x5e>
 800b16e:	222d      	movs	r2, #45	; 0x2d
 800b170:	425b      	negs	r3, r3
 800b172:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b176:	486f      	ldr	r0, [pc, #444]	; (800b334 <_printf_i+0x21c>)
 800b178:	220a      	movs	r2, #10
 800b17a:	e039      	b.n	800b1f0 <_printf_i+0xd8>
 800b17c:	2973      	cmp	r1, #115	; 0x73
 800b17e:	f000 809d 	beq.w	800b2bc <_printf_i+0x1a4>
 800b182:	d808      	bhi.n	800b196 <_printf_i+0x7e>
 800b184:	296f      	cmp	r1, #111	; 0x6f
 800b186:	d020      	beq.n	800b1ca <_printf_i+0xb2>
 800b188:	2970      	cmp	r1, #112	; 0x70
 800b18a:	d1dd      	bne.n	800b148 <_printf_i+0x30>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	f043 0320 	orr.w	r3, r3, #32
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	e003      	b.n	800b19e <_printf_i+0x86>
 800b196:	2975      	cmp	r1, #117	; 0x75
 800b198:	d017      	beq.n	800b1ca <_printf_i+0xb2>
 800b19a:	2978      	cmp	r1, #120	; 0x78
 800b19c:	d1d4      	bne.n	800b148 <_printf_i+0x30>
 800b19e:	2378      	movs	r3, #120	; 0x78
 800b1a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1a4:	4864      	ldr	r0, [pc, #400]	; (800b338 <_printf_i+0x220>)
 800b1a6:	e055      	b.n	800b254 <_printf_i+0x13c>
 800b1a8:	6813      	ldr	r3, [r2, #0]
 800b1aa:	1d19      	adds	r1, r3, #4
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	6011      	str	r1, [r2, #0]
 800b1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e08c      	b.n	800b2d6 <_printf_i+0x1be>
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	6011      	str	r1, [r2, #0]
 800b1c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1c4:	bf18      	it	ne
 800b1c6:	b21b      	sxthne	r3, r3
 800b1c8:	e7cf      	b.n	800b16a <_printf_i+0x52>
 800b1ca:	6813      	ldr	r3, [r2, #0]
 800b1cc:	6825      	ldr	r5, [r4, #0]
 800b1ce:	1d18      	adds	r0, r3, #4
 800b1d0:	6010      	str	r0, [r2, #0]
 800b1d2:	0628      	lsls	r0, r5, #24
 800b1d4:	d501      	bpl.n	800b1da <_printf_i+0xc2>
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	e002      	b.n	800b1e0 <_printf_i+0xc8>
 800b1da:	0668      	lsls	r0, r5, #25
 800b1dc:	d5fb      	bpl.n	800b1d6 <_printf_i+0xbe>
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	4854      	ldr	r0, [pc, #336]	; (800b334 <_printf_i+0x21c>)
 800b1e2:	296f      	cmp	r1, #111	; 0x6f
 800b1e4:	bf14      	ite	ne
 800b1e6:	220a      	movne	r2, #10
 800b1e8:	2208      	moveq	r2, #8
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1f0:	6865      	ldr	r5, [r4, #4]
 800b1f2:	60a5      	str	r5, [r4, #8]
 800b1f4:	2d00      	cmp	r5, #0
 800b1f6:	f2c0 8095 	blt.w	800b324 <_printf_i+0x20c>
 800b1fa:	6821      	ldr	r1, [r4, #0]
 800b1fc:	f021 0104 	bic.w	r1, r1, #4
 800b200:	6021      	str	r1, [r4, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d13d      	bne.n	800b282 <_printf_i+0x16a>
 800b206:	2d00      	cmp	r5, #0
 800b208:	f040 808e 	bne.w	800b328 <_printf_i+0x210>
 800b20c:	4665      	mov	r5, ip
 800b20e:	2a08      	cmp	r2, #8
 800b210:	d10b      	bne.n	800b22a <_printf_i+0x112>
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	07db      	lsls	r3, r3, #31
 800b216:	d508      	bpl.n	800b22a <_printf_i+0x112>
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	6862      	ldr	r2, [r4, #4]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	bfde      	ittt	le
 800b220:	2330      	movle	r3, #48	; 0x30
 800b222:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b226:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b22a:	ebac 0305 	sub.w	r3, ip, r5
 800b22e:	6123      	str	r3, [r4, #16]
 800b230:	f8cd 8000 	str.w	r8, [sp]
 800b234:	463b      	mov	r3, r7
 800b236:	aa03      	add	r2, sp, #12
 800b238:	4621      	mov	r1, r4
 800b23a:	4630      	mov	r0, r6
 800b23c:	f7ff fef6 	bl	800b02c <_printf_common>
 800b240:	3001      	adds	r0, #1
 800b242:	d14d      	bne.n	800b2e0 <_printf_i+0x1c8>
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	b005      	add	sp, #20
 800b24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b24e:	4839      	ldr	r0, [pc, #228]	; (800b334 <_printf_i+0x21c>)
 800b250:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b254:	6813      	ldr	r3, [r2, #0]
 800b256:	6821      	ldr	r1, [r4, #0]
 800b258:	1d1d      	adds	r5, r3, #4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6015      	str	r5, [r2, #0]
 800b25e:	060a      	lsls	r2, r1, #24
 800b260:	d50b      	bpl.n	800b27a <_printf_i+0x162>
 800b262:	07ca      	lsls	r2, r1, #31
 800b264:	bf44      	itt	mi
 800b266:	f041 0120 	orrmi.w	r1, r1, #32
 800b26a:	6021      	strmi	r1, [r4, #0]
 800b26c:	b91b      	cbnz	r3, 800b276 <_printf_i+0x15e>
 800b26e:	6822      	ldr	r2, [r4, #0]
 800b270:	f022 0220 	bic.w	r2, r2, #32
 800b274:	6022      	str	r2, [r4, #0]
 800b276:	2210      	movs	r2, #16
 800b278:	e7b7      	b.n	800b1ea <_printf_i+0xd2>
 800b27a:	064d      	lsls	r5, r1, #25
 800b27c:	bf48      	it	mi
 800b27e:	b29b      	uxthmi	r3, r3
 800b280:	e7ef      	b.n	800b262 <_printf_i+0x14a>
 800b282:	4665      	mov	r5, ip
 800b284:	fbb3 f1f2 	udiv	r1, r3, r2
 800b288:	fb02 3311 	mls	r3, r2, r1, r3
 800b28c:	5cc3      	ldrb	r3, [r0, r3]
 800b28e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b292:	460b      	mov	r3, r1
 800b294:	2900      	cmp	r1, #0
 800b296:	d1f5      	bne.n	800b284 <_printf_i+0x16c>
 800b298:	e7b9      	b.n	800b20e <_printf_i+0xf6>
 800b29a:	6813      	ldr	r3, [r2, #0]
 800b29c:	6825      	ldr	r5, [r4, #0]
 800b29e:	6961      	ldr	r1, [r4, #20]
 800b2a0:	1d18      	adds	r0, r3, #4
 800b2a2:	6010      	str	r0, [r2, #0]
 800b2a4:	0628      	lsls	r0, r5, #24
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	d501      	bpl.n	800b2ae <_printf_i+0x196>
 800b2aa:	6019      	str	r1, [r3, #0]
 800b2ac:	e002      	b.n	800b2b4 <_printf_i+0x19c>
 800b2ae:	066a      	lsls	r2, r5, #25
 800b2b0:	d5fb      	bpl.n	800b2aa <_printf_i+0x192>
 800b2b2:	8019      	strh	r1, [r3, #0]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	4665      	mov	r5, ip
 800b2ba:	e7b9      	b.n	800b230 <_printf_i+0x118>
 800b2bc:	6813      	ldr	r3, [r2, #0]
 800b2be:	1d19      	adds	r1, r3, #4
 800b2c0:	6011      	str	r1, [r2, #0]
 800b2c2:	681d      	ldr	r5, [r3, #0]
 800b2c4:	6862      	ldr	r2, [r4, #4]
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f7f4 ff89 	bl	80001e0 <memchr>
 800b2ce:	b108      	cbz	r0, 800b2d4 <_printf_i+0x1bc>
 800b2d0:	1b40      	subs	r0, r0, r5
 800b2d2:	6060      	str	r0, [r4, #4]
 800b2d4:	6863      	ldr	r3, [r4, #4]
 800b2d6:	6123      	str	r3, [r4, #16]
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2de:	e7a7      	b.n	800b230 <_printf_i+0x118>
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	462a      	mov	r2, r5
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	47c0      	blx	r8
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d0aa      	beq.n	800b244 <_printf_i+0x12c>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	079b      	lsls	r3, r3, #30
 800b2f2:	d413      	bmi.n	800b31c <_printf_i+0x204>
 800b2f4:	68e0      	ldr	r0, [r4, #12]
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	4298      	cmp	r0, r3
 800b2fa:	bfb8      	it	lt
 800b2fc:	4618      	movlt	r0, r3
 800b2fe:	e7a3      	b.n	800b248 <_printf_i+0x130>
 800b300:	2301      	movs	r3, #1
 800b302:	464a      	mov	r2, r9
 800b304:	4639      	mov	r1, r7
 800b306:	4630      	mov	r0, r6
 800b308:	47c0      	blx	r8
 800b30a:	3001      	adds	r0, #1
 800b30c:	d09a      	beq.n	800b244 <_printf_i+0x12c>
 800b30e:	3501      	adds	r5, #1
 800b310:	68e3      	ldr	r3, [r4, #12]
 800b312:	9a03      	ldr	r2, [sp, #12]
 800b314:	1a9b      	subs	r3, r3, r2
 800b316:	42ab      	cmp	r3, r5
 800b318:	dcf2      	bgt.n	800b300 <_printf_i+0x1e8>
 800b31a:	e7eb      	b.n	800b2f4 <_printf_i+0x1dc>
 800b31c:	2500      	movs	r5, #0
 800b31e:	f104 0919 	add.w	r9, r4, #25
 800b322:	e7f5      	b.n	800b310 <_printf_i+0x1f8>
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1ac      	bne.n	800b282 <_printf_i+0x16a>
 800b328:	7803      	ldrb	r3, [r0, #0]
 800b32a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b32e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b332:	e76c      	b.n	800b20e <_printf_i+0xf6>
 800b334:	0800cdfe 	.word	0x0800cdfe
 800b338:	0800ce0f 	.word	0x0800ce0f

0800b33c <siprintf>:
 800b33c:	b40e      	push	{r1, r2, r3}
 800b33e:	b500      	push	{lr}
 800b340:	b09c      	sub	sp, #112	; 0x70
 800b342:	ab1d      	add	r3, sp, #116	; 0x74
 800b344:	9002      	str	r0, [sp, #8]
 800b346:	9006      	str	r0, [sp, #24]
 800b348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b34c:	4809      	ldr	r0, [pc, #36]	; (800b374 <siprintf+0x38>)
 800b34e:	9107      	str	r1, [sp, #28]
 800b350:	9104      	str	r1, [sp, #16]
 800b352:	4909      	ldr	r1, [pc, #36]	; (800b378 <siprintf+0x3c>)
 800b354:	f853 2b04 	ldr.w	r2, [r3], #4
 800b358:	9105      	str	r1, [sp, #20]
 800b35a:	6800      	ldr	r0, [r0, #0]
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	a902      	add	r1, sp, #8
 800b360:	f001 fa54 	bl	800c80c <_svfiprintf_r>
 800b364:	9b02      	ldr	r3, [sp, #8]
 800b366:	2200      	movs	r2, #0
 800b368:	701a      	strb	r2, [r3, #0]
 800b36a:	b01c      	add	sp, #112	; 0x70
 800b36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b370:	b003      	add	sp, #12
 800b372:	4770      	bx	lr
 800b374:	20000010 	.word	0x20000010
 800b378:	ffff0208 	.word	0xffff0208

0800b37c <quorem>:
 800b37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b380:	6903      	ldr	r3, [r0, #16]
 800b382:	690c      	ldr	r4, [r1, #16]
 800b384:	42a3      	cmp	r3, r4
 800b386:	4680      	mov	r8, r0
 800b388:	f2c0 8082 	blt.w	800b490 <quorem+0x114>
 800b38c:	3c01      	subs	r4, #1
 800b38e:	f101 0714 	add.w	r7, r1, #20
 800b392:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b396:	f100 0614 	add.w	r6, r0, #20
 800b39a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b39e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b3a2:	eb06 030c 	add.w	r3, r6, ip
 800b3a6:	3501      	adds	r5, #1
 800b3a8:	eb07 090c 	add.w	r9, r7, ip
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	fbb0 f5f5 	udiv	r5, r0, r5
 800b3b2:	b395      	cbz	r5, 800b41a <quorem+0x9e>
 800b3b4:	f04f 0a00 	mov.w	sl, #0
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	46b6      	mov	lr, r6
 800b3bc:	46d3      	mov	fp, sl
 800b3be:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3c2:	b293      	uxth	r3, r2
 800b3c4:	fb05 a303 	mla	r3, r5, r3, sl
 800b3c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	ebab 0303 	sub.w	r3, fp, r3
 800b3d2:	0c12      	lsrs	r2, r2, #16
 800b3d4:	f8de b000 	ldr.w	fp, [lr]
 800b3d8:	fb05 a202 	mla	r2, r5, r2, sl
 800b3dc:	fa13 f38b 	uxtah	r3, r3, fp
 800b3e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b3e4:	fa1f fb82 	uxth.w	fp, r2
 800b3e8:	f8de 2000 	ldr.w	r2, [lr]
 800b3ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b3f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3fa:	4581      	cmp	r9, r0
 800b3fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b400:	f84e 3b04 	str.w	r3, [lr], #4
 800b404:	d2db      	bcs.n	800b3be <quorem+0x42>
 800b406:	f856 300c 	ldr.w	r3, [r6, ip]
 800b40a:	b933      	cbnz	r3, 800b41a <quorem+0x9e>
 800b40c:	9b01      	ldr	r3, [sp, #4]
 800b40e:	3b04      	subs	r3, #4
 800b410:	429e      	cmp	r6, r3
 800b412:	461a      	mov	r2, r3
 800b414:	d330      	bcc.n	800b478 <quorem+0xfc>
 800b416:	f8c8 4010 	str.w	r4, [r8, #16]
 800b41a:	4640      	mov	r0, r8
 800b41c:	f001 f820 	bl	800c460 <__mcmp>
 800b420:	2800      	cmp	r0, #0
 800b422:	db25      	blt.n	800b470 <quorem+0xf4>
 800b424:	3501      	adds	r5, #1
 800b426:	4630      	mov	r0, r6
 800b428:	f04f 0c00 	mov.w	ip, #0
 800b42c:	f857 2b04 	ldr.w	r2, [r7], #4
 800b430:	f8d0 e000 	ldr.w	lr, [r0]
 800b434:	b293      	uxth	r3, r2
 800b436:	ebac 0303 	sub.w	r3, ip, r3
 800b43a:	0c12      	lsrs	r2, r2, #16
 800b43c:	fa13 f38e 	uxtah	r3, r3, lr
 800b440:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b448:	b29b      	uxth	r3, r3
 800b44a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b44e:	45b9      	cmp	r9, r7
 800b450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b454:	f840 3b04 	str.w	r3, [r0], #4
 800b458:	d2e8      	bcs.n	800b42c <quorem+0xb0>
 800b45a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b45e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b462:	b92a      	cbnz	r2, 800b470 <quorem+0xf4>
 800b464:	3b04      	subs	r3, #4
 800b466:	429e      	cmp	r6, r3
 800b468:	461a      	mov	r2, r3
 800b46a:	d30b      	bcc.n	800b484 <quorem+0x108>
 800b46c:	f8c8 4010 	str.w	r4, [r8, #16]
 800b470:	4628      	mov	r0, r5
 800b472:	b003      	add	sp, #12
 800b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b478:	6812      	ldr	r2, [r2, #0]
 800b47a:	3b04      	subs	r3, #4
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	d1ca      	bne.n	800b416 <quorem+0x9a>
 800b480:	3c01      	subs	r4, #1
 800b482:	e7c5      	b.n	800b410 <quorem+0x94>
 800b484:	6812      	ldr	r2, [r2, #0]
 800b486:	3b04      	subs	r3, #4
 800b488:	2a00      	cmp	r2, #0
 800b48a:	d1ef      	bne.n	800b46c <quorem+0xf0>
 800b48c:	3c01      	subs	r4, #1
 800b48e:	e7ea      	b.n	800b466 <quorem+0xea>
 800b490:	2000      	movs	r0, #0
 800b492:	e7ee      	b.n	800b472 <quorem+0xf6>
 800b494:	0000      	movs	r0, r0
	...

0800b498 <_dtoa_r>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	ec57 6b10 	vmov	r6, r7, d0
 800b4a0:	b097      	sub	sp, #92	; 0x5c
 800b4a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4a4:	9106      	str	r1, [sp, #24]
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4aa:	9312      	str	r3, [sp, #72]	; 0x48
 800b4ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4b0:	e9cd 6700 	strd	r6, r7, [sp]
 800b4b4:	b93d      	cbnz	r5, 800b4c6 <_dtoa_r+0x2e>
 800b4b6:	2010      	movs	r0, #16
 800b4b8:	f000 fdb4 	bl	800c024 <malloc>
 800b4bc:	6260      	str	r0, [r4, #36]	; 0x24
 800b4be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4c2:	6005      	str	r5, [r0, #0]
 800b4c4:	60c5      	str	r5, [r0, #12]
 800b4c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c8:	6819      	ldr	r1, [r3, #0]
 800b4ca:	b151      	cbz	r1, 800b4e2 <_dtoa_r+0x4a>
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	604a      	str	r2, [r1, #4]
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	4093      	lsls	r3, r2
 800b4d4:	608b      	str	r3, [r1, #8]
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f000 fde0 	bl	800c09c <_Bfree>
 800b4dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	1e3b      	subs	r3, r7, #0
 800b4e4:	bfbb      	ittet	lt
 800b4e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b4ea:	9301      	strlt	r3, [sp, #4]
 800b4ec:	2300      	movge	r3, #0
 800b4ee:	2201      	movlt	r2, #1
 800b4f0:	bfac      	ite	ge
 800b4f2:	f8c8 3000 	strge.w	r3, [r8]
 800b4f6:	f8c8 2000 	strlt.w	r2, [r8]
 800b4fa:	4baf      	ldr	r3, [pc, #700]	; (800b7b8 <_dtoa_r+0x320>)
 800b4fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b500:	ea33 0308 	bics.w	r3, r3, r8
 800b504:	d114      	bne.n	800b530 <_dtoa_r+0x98>
 800b506:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b508:	f242 730f 	movw	r3, #9999	; 0x270f
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	9b00      	ldr	r3, [sp, #0]
 800b510:	b923      	cbnz	r3, 800b51c <_dtoa_r+0x84>
 800b512:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b516:	2800      	cmp	r0, #0
 800b518:	f000 8542 	beq.w	800bfa0 <_dtoa_r+0xb08>
 800b51c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b51e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b7cc <_dtoa_r+0x334>
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 8544 	beq.w	800bfb0 <_dtoa_r+0xb18>
 800b528:	f10b 0303 	add.w	r3, fp, #3
 800b52c:	f000 bd3e 	b.w	800bfac <_dtoa_r+0xb14>
 800b530:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b534:	2200      	movs	r2, #0
 800b536:	2300      	movs	r3, #0
 800b538:	4630      	mov	r0, r6
 800b53a:	4639      	mov	r1, r7
 800b53c:	f7f5 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b540:	4681      	mov	r9, r0
 800b542:	b168      	cbz	r0, 800b560 <_dtoa_r+0xc8>
 800b544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b546:	2301      	movs	r3, #1
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f000 8524 	beq.w	800bf9a <_dtoa_r+0xb02>
 800b552:	4b9a      	ldr	r3, [pc, #616]	; (800b7bc <_dtoa_r+0x324>)
 800b554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b556:	f103 3bff 	add.w	fp, r3, #4294967295
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	f000 bd28 	b.w	800bfb0 <_dtoa_r+0xb18>
 800b560:	aa14      	add	r2, sp, #80	; 0x50
 800b562:	a915      	add	r1, sp, #84	; 0x54
 800b564:	ec47 6b10 	vmov	d0, r6, r7
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fff0 	bl	800c54e <__d2b>
 800b56e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b572:	9004      	str	r0, [sp, #16]
 800b574:	2d00      	cmp	r5, #0
 800b576:	d07c      	beq.n	800b672 <_dtoa_r+0x1da>
 800b578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b57c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b580:	46b2      	mov	sl, r6
 800b582:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b586:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b58a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b58e:	2200      	movs	r2, #0
 800b590:	4b8b      	ldr	r3, [pc, #556]	; (800b7c0 <_dtoa_r+0x328>)
 800b592:	4650      	mov	r0, sl
 800b594:	4659      	mov	r1, fp
 800b596:	f7f4 fe77 	bl	8000288 <__aeabi_dsub>
 800b59a:	a381      	add	r3, pc, #516	; (adr r3, 800b7a0 <_dtoa_r+0x308>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	f7f5 f82a 	bl	80005f8 <__aeabi_dmul>
 800b5a4:	a380      	add	r3, pc, #512	; (adr r3, 800b7a8 <_dtoa_r+0x310>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f7f4 fe6f 	bl	800028c <__adddf3>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	460f      	mov	r7, r1
 800b5b4:	f7f4 ffb6 	bl	8000524 <__aeabi_i2d>
 800b5b8:	a37d      	add	r3, pc, #500	; (adr r3, 800b7b0 <_dtoa_r+0x318>)
 800b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5be:	f7f5 f81b 	bl	80005f8 <__aeabi_dmul>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f4 fe5f 	bl	800028c <__adddf3>
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460f      	mov	r7, r1
 800b5d2:	f7f5 fac1 	bl	8000b58 <__aeabi_d2iz>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4682      	mov	sl, r0
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4630      	mov	r0, r6
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f7f5 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800b5e4:	b148      	cbz	r0, 800b5fa <_dtoa_r+0x162>
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	f7f4 ff9c 	bl	8000524 <__aeabi_i2d>
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	463b      	mov	r3, r7
 800b5f0:	f7f5 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5f4:	b908      	cbnz	r0, 800b5fa <_dtoa_r+0x162>
 800b5f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5fa:	f1ba 0f16 	cmp.w	sl, #22
 800b5fe:	d859      	bhi.n	800b6b4 <_dtoa_r+0x21c>
 800b600:	4970      	ldr	r1, [pc, #448]	; (800b7c4 <_dtoa_r+0x32c>)
 800b602:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b60a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b60e:	f7f5 fa83 	bl	8000b18 <__aeabi_dcmpgt>
 800b612:	2800      	cmp	r0, #0
 800b614:	d050      	beq.n	800b6b8 <_dtoa_r+0x220>
 800b616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b61a:	2300      	movs	r3, #0
 800b61c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b61e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b620:	1b5d      	subs	r5, r3, r5
 800b622:	f1b5 0801 	subs.w	r8, r5, #1
 800b626:	bf49      	itett	mi
 800b628:	f1c5 0301 	rsbmi	r3, r5, #1
 800b62c:	2300      	movpl	r3, #0
 800b62e:	9305      	strmi	r3, [sp, #20]
 800b630:	f04f 0800 	movmi.w	r8, #0
 800b634:	bf58      	it	pl
 800b636:	9305      	strpl	r3, [sp, #20]
 800b638:	f1ba 0f00 	cmp.w	sl, #0
 800b63c:	db3e      	blt.n	800b6bc <_dtoa_r+0x224>
 800b63e:	2300      	movs	r3, #0
 800b640:	44d0      	add	r8, sl
 800b642:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b646:	9307      	str	r3, [sp, #28]
 800b648:	9b06      	ldr	r3, [sp, #24]
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	f200 8090 	bhi.w	800b770 <_dtoa_r+0x2d8>
 800b650:	2b05      	cmp	r3, #5
 800b652:	bfc4      	itt	gt
 800b654:	3b04      	subgt	r3, #4
 800b656:	9306      	strgt	r3, [sp, #24]
 800b658:	9b06      	ldr	r3, [sp, #24]
 800b65a:	f1a3 0302 	sub.w	r3, r3, #2
 800b65e:	bfcc      	ite	gt
 800b660:	2500      	movgt	r5, #0
 800b662:	2501      	movle	r5, #1
 800b664:	2b03      	cmp	r3, #3
 800b666:	f200 808f 	bhi.w	800b788 <_dtoa_r+0x2f0>
 800b66a:	e8df f003 	tbb	[pc, r3]
 800b66e:	7f7d      	.short	0x7f7d
 800b670:	7131      	.short	0x7131
 800b672:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b676:	441d      	add	r5, r3
 800b678:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b67c:	2820      	cmp	r0, #32
 800b67e:	dd13      	ble.n	800b6a8 <_dtoa_r+0x210>
 800b680:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b684:	9b00      	ldr	r3, [sp, #0]
 800b686:	fa08 f800 	lsl.w	r8, r8, r0
 800b68a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b68e:	fa23 f000 	lsr.w	r0, r3, r0
 800b692:	ea48 0000 	orr.w	r0, r8, r0
 800b696:	f7f4 ff35 	bl	8000504 <__aeabi_ui2d>
 800b69a:	2301      	movs	r3, #1
 800b69c:	4682      	mov	sl, r0
 800b69e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b6a2:	3d01      	subs	r5, #1
 800b6a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6a6:	e772      	b.n	800b58e <_dtoa_r+0xf6>
 800b6a8:	9b00      	ldr	r3, [sp, #0]
 800b6aa:	f1c0 0020 	rsb	r0, r0, #32
 800b6ae:	fa03 f000 	lsl.w	r0, r3, r0
 800b6b2:	e7f0      	b.n	800b696 <_dtoa_r+0x1fe>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e7b1      	b.n	800b61c <_dtoa_r+0x184>
 800b6b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b6ba:	e7b0      	b.n	800b61e <_dtoa_r+0x186>
 800b6bc:	9b05      	ldr	r3, [sp, #20]
 800b6be:	eba3 030a 	sub.w	r3, r3, sl
 800b6c2:	9305      	str	r3, [sp, #20]
 800b6c4:	f1ca 0300 	rsb	r3, sl, #0
 800b6c8:	9307      	str	r3, [sp, #28]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	930e      	str	r3, [sp, #56]	; 0x38
 800b6ce:	e7bb      	b.n	800b648 <_dtoa_r+0x1b0>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	dd59      	ble.n	800b78e <_dtoa_r+0x2f6>
 800b6da:	9302      	str	r3, [sp, #8]
 800b6dc:	4699      	mov	r9, r3
 800b6de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	6072      	str	r2, [r6, #4]
 800b6e4:	2204      	movs	r2, #4
 800b6e6:	f102 0014 	add.w	r0, r2, #20
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	6871      	ldr	r1, [r6, #4]
 800b6ee:	d953      	bls.n	800b798 <_dtoa_r+0x300>
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 fc9f 	bl	800c034 <_Balloc>
 800b6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f8:	6030      	str	r0, [r6, #0]
 800b6fa:	f1b9 0f0e 	cmp.w	r9, #14
 800b6fe:	f8d3 b000 	ldr.w	fp, [r3]
 800b702:	f200 80e6 	bhi.w	800b8d2 <_dtoa_r+0x43a>
 800b706:	2d00      	cmp	r5, #0
 800b708:	f000 80e3 	beq.w	800b8d2 <_dtoa_r+0x43a>
 800b70c:	ed9d 7b00 	vldr	d7, [sp]
 800b710:	f1ba 0f00 	cmp.w	sl, #0
 800b714:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b718:	dd74      	ble.n	800b804 <_dtoa_r+0x36c>
 800b71a:	4a2a      	ldr	r2, [pc, #168]	; (800b7c4 <_dtoa_r+0x32c>)
 800b71c:	f00a 030f 	and.w	r3, sl, #15
 800b720:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b724:	ed93 7b00 	vldr	d7, [r3]
 800b728:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b72c:	06f0      	lsls	r0, r6, #27
 800b72e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b732:	d565      	bpl.n	800b800 <_dtoa_r+0x368>
 800b734:	4b24      	ldr	r3, [pc, #144]	; (800b7c8 <_dtoa_r+0x330>)
 800b736:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b73a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b73e:	f7f5 f885 	bl	800084c <__aeabi_ddiv>
 800b742:	e9cd 0100 	strd	r0, r1, [sp]
 800b746:	f006 060f 	and.w	r6, r6, #15
 800b74a:	2503      	movs	r5, #3
 800b74c:	4f1e      	ldr	r7, [pc, #120]	; (800b7c8 <_dtoa_r+0x330>)
 800b74e:	e04c      	b.n	800b7ea <_dtoa_r+0x352>
 800b750:	2301      	movs	r3, #1
 800b752:	930a      	str	r3, [sp, #40]	; 0x28
 800b754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b756:	4453      	add	r3, sl
 800b758:	f103 0901 	add.w	r9, r3, #1
 800b75c:	9302      	str	r3, [sp, #8]
 800b75e:	464b      	mov	r3, r9
 800b760:	2b01      	cmp	r3, #1
 800b762:	bfb8      	it	lt
 800b764:	2301      	movlt	r3, #1
 800b766:	e7ba      	b.n	800b6de <_dtoa_r+0x246>
 800b768:	2300      	movs	r3, #0
 800b76a:	e7b2      	b.n	800b6d2 <_dtoa_r+0x23a>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e7f0      	b.n	800b752 <_dtoa_r+0x2ba>
 800b770:	2501      	movs	r5, #1
 800b772:	2300      	movs	r3, #0
 800b774:	9306      	str	r3, [sp, #24]
 800b776:	950a      	str	r5, [sp, #40]	; 0x28
 800b778:	f04f 33ff 	mov.w	r3, #4294967295
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	4699      	mov	r9, r3
 800b780:	2200      	movs	r2, #0
 800b782:	2312      	movs	r3, #18
 800b784:	920b      	str	r2, [sp, #44]	; 0x2c
 800b786:	e7aa      	b.n	800b6de <_dtoa_r+0x246>
 800b788:	2301      	movs	r3, #1
 800b78a:	930a      	str	r3, [sp, #40]	; 0x28
 800b78c:	e7f4      	b.n	800b778 <_dtoa_r+0x2e0>
 800b78e:	2301      	movs	r3, #1
 800b790:	9302      	str	r3, [sp, #8]
 800b792:	4699      	mov	r9, r3
 800b794:	461a      	mov	r2, r3
 800b796:	e7f5      	b.n	800b784 <_dtoa_r+0x2ec>
 800b798:	3101      	adds	r1, #1
 800b79a:	6071      	str	r1, [r6, #4]
 800b79c:	0052      	lsls	r2, r2, #1
 800b79e:	e7a2      	b.n	800b6e6 <_dtoa_r+0x24e>
 800b7a0:	636f4361 	.word	0x636f4361
 800b7a4:	3fd287a7 	.word	0x3fd287a7
 800b7a8:	8b60c8b3 	.word	0x8b60c8b3
 800b7ac:	3fc68a28 	.word	0x3fc68a28
 800b7b0:	509f79fb 	.word	0x509f79fb
 800b7b4:	3fd34413 	.word	0x3fd34413
 800b7b8:	7ff00000 	.word	0x7ff00000
 800b7bc:	0800cdfd 	.word	0x0800cdfd
 800b7c0:	3ff80000 	.word	0x3ff80000
 800b7c4:	0800ce58 	.word	0x0800ce58
 800b7c8:	0800ce30 	.word	0x0800ce30
 800b7cc:	0800ce29 	.word	0x0800ce29
 800b7d0:	07f1      	lsls	r1, r6, #31
 800b7d2:	d508      	bpl.n	800b7e6 <_dtoa_r+0x34e>
 800b7d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7dc:	f7f4 ff0c 	bl	80005f8 <__aeabi_dmul>
 800b7e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	1076      	asrs	r6, r6, #1
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	2e00      	cmp	r6, #0
 800b7ec:	d1f0      	bne.n	800b7d0 <_dtoa_r+0x338>
 800b7ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7f6:	f7f5 f829 	bl	800084c <__aeabi_ddiv>
 800b7fa:	e9cd 0100 	strd	r0, r1, [sp]
 800b7fe:	e01a      	b.n	800b836 <_dtoa_r+0x39e>
 800b800:	2502      	movs	r5, #2
 800b802:	e7a3      	b.n	800b74c <_dtoa_r+0x2b4>
 800b804:	f000 80a0 	beq.w	800b948 <_dtoa_r+0x4b0>
 800b808:	f1ca 0600 	rsb	r6, sl, #0
 800b80c:	4b9f      	ldr	r3, [pc, #636]	; (800ba8c <_dtoa_r+0x5f4>)
 800b80e:	4fa0      	ldr	r7, [pc, #640]	; (800ba90 <_dtoa_r+0x5f8>)
 800b810:	f006 020f 	and.w	r2, r6, #15
 800b814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b820:	f7f4 feea 	bl	80005f8 <__aeabi_dmul>
 800b824:	e9cd 0100 	strd	r0, r1, [sp]
 800b828:	1136      	asrs	r6, r6, #4
 800b82a:	2300      	movs	r3, #0
 800b82c:	2502      	movs	r5, #2
 800b82e:	2e00      	cmp	r6, #0
 800b830:	d17f      	bne.n	800b932 <_dtoa_r+0x49a>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1e1      	bne.n	800b7fa <_dtoa_r+0x362>
 800b836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 8087 	beq.w	800b94c <_dtoa_r+0x4b4>
 800b83e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b842:	2200      	movs	r2, #0
 800b844:	4b93      	ldr	r3, [pc, #588]	; (800ba94 <_dtoa_r+0x5fc>)
 800b846:	4630      	mov	r0, r6
 800b848:	4639      	mov	r1, r7
 800b84a:	f7f5 f947 	bl	8000adc <__aeabi_dcmplt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d07c      	beq.n	800b94c <_dtoa_r+0x4b4>
 800b852:	f1b9 0f00 	cmp.w	r9, #0
 800b856:	d079      	beq.n	800b94c <_dtoa_r+0x4b4>
 800b858:	9b02      	ldr	r3, [sp, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dd35      	ble.n	800b8ca <_dtoa_r+0x432>
 800b85e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b862:	9308      	str	r3, [sp, #32]
 800b864:	4639      	mov	r1, r7
 800b866:	2200      	movs	r2, #0
 800b868:	4b8b      	ldr	r3, [pc, #556]	; (800ba98 <_dtoa_r+0x600>)
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	e9cd 0100 	strd	r0, r1, [sp]
 800b874:	9f02      	ldr	r7, [sp, #8]
 800b876:	3501      	adds	r5, #1
 800b878:	4628      	mov	r0, r5
 800b87a:	f7f4 fe53 	bl	8000524 <__aeabi_i2d>
 800b87e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b882:	f7f4 feb9 	bl	80005f8 <__aeabi_dmul>
 800b886:	2200      	movs	r2, #0
 800b888:	4b84      	ldr	r3, [pc, #528]	; (800ba9c <_dtoa_r+0x604>)
 800b88a:	f7f4 fcff 	bl	800028c <__adddf3>
 800b88e:	4605      	mov	r5, r0
 800b890:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b894:	2f00      	cmp	r7, #0
 800b896:	d15d      	bne.n	800b954 <_dtoa_r+0x4bc>
 800b898:	2200      	movs	r2, #0
 800b89a:	4b81      	ldr	r3, [pc, #516]	; (800baa0 <_dtoa_r+0x608>)
 800b89c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8a0:	f7f4 fcf2 	bl	8000288 <__aeabi_dsub>
 800b8a4:	462a      	mov	r2, r5
 800b8a6:	4633      	mov	r3, r6
 800b8a8:	e9cd 0100 	strd	r0, r1, [sp]
 800b8ac:	f7f5 f934 	bl	8000b18 <__aeabi_dcmpgt>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	f040 8288 	bne.w	800bdc6 <_dtoa_r+0x92e>
 800b8b6:	462a      	mov	r2, r5
 800b8b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8c0:	f7f5 f90c 	bl	8000adc <__aeabi_dcmplt>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	f040 827c 	bne.w	800bdc2 <_dtoa_r+0x92a>
 800b8ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8ce:	e9cd 2300 	strd	r2, r3, [sp]
 800b8d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f2c0 8150 	blt.w	800bb7a <_dtoa_r+0x6e2>
 800b8da:	f1ba 0f0e 	cmp.w	sl, #14
 800b8de:	f300 814c 	bgt.w	800bb7a <_dtoa_r+0x6e2>
 800b8e2:	4b6a      	ldr	r3, [pc, #424]	; (800ba8c <_dtoa_r+0x5f4>)
 800b8e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b8e8:	ed93 7b00 	vldr	d7, [r3]
 800b8ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8f4:	f280 80d8 	bge.w	800baa8 <_dtoa_r+0x610>
 800b8f8:	f1b9 0f00 	cmp.w	r9, #0
 800b8fc:	f300 80d4 	bgt.w	800baa8 <_dtoa_r+0x610>
 800b900:	f040 825e 	bne.w	800bdc0 <_dtoa_r+0x928>
 800b904:	2200      	movs	r2, #0
 800b906:	4b66      	ldr	r3, [pc, #408]	; (800baa0 <_dtoa_r+0x608>)
 800b908:	ec51 0b17 	vmov	r0, r1, d7
 800b90c:	f7f4 fe74 	bl	80005f8 <__aeabi_dmul>
 800b910:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b914:	f7f5 f8f6 	bl	8000b04 <__aeabi_dcmpge>
 800b918:	464f      	mov	r7, r9
 800b91a:	464e      	mov	r6, r9
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f040 8234 	bne.w	800bd8a <_dtoa_r+0x8f2>
 800b922:	2331      	movs	r3, #49	; 0x31
 800b924:	f10b 0501 	add.w	r5, fp, #1
 800b928:	f88b 3000 	strb.w	r3, [fp]
 800b92c:	f10a 0a01 	add.w	sl, sl, #1
 800b930:	e22f      	b.n	800bd92 <_dtoa_r+0x8fa>
 800b932:	07f2      	lsls	r2, r6, #31
 800b934:	d505      	bpl.n	800b942 <_dtoa_r+0x4aa>
 800b936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b93a:	f7f4 fe5d 	bl	80005f8 <__aeabi_dmul>
 800b93e:	3501      	adds	r5, #1
 800b940:	2301      	movs	r3, #1
 800b942:	1076      	asrs	r6, r6, #1
 800b944:	3708      	adds	r7, #8
 800b946:	e772      	b.n	800b82e <_dtoa_r+0x396>
 800b948:	2502      	movs	r5, #2
 800b94a:	e774      	b.n	800b836 <_dtoa_r+0x39e>
 800b94c:	f8cd a020 	str.w	sl, [sp, #32]
 800b950:	464f      	mov	r7, r9
 800b952:	e791      	b.n	800b878 <_dtoa_r+0x3e0>
 800b954:	4b4d      	ldr	r3, [pc, #308]	; (800ba8c <_dtoa_r+0x5f4>)
 800b956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b95a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b960:	2b00      	cmp	r3, #0
 800b962:	d047      	beq.n	800b9f4 <_dtoa_r+0x55c>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	2000      	movs	r0, #0
 800b96a:	494e      	ldr	r1, [pc, #312]	; (800baa4 <_dtoa_r+0x60c>)
 800b96c:	f7f4 ff6e 	bl	800084c <__aeabi_ddiv>
 800b970:	462a      	mov	r2, r5
 800b972:	4633      	mov	r3, r6
 800b974:	f7f4 fc88 	bl	8000288 <__aeabi_dsub>
 800b978:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b97c:	465d      	mov	r5, fp
 800b97e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b982:	f7f5 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800b986:	4606      	mov	r6, r0
 800b988:	f7f4 fdcc 	bl	8000524 <__aeabi_i2d>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b994:	f7f4 fc78 	bl	8000288 <__aeabi_dsub>
 800b998:	3630      	adds	r6, #48	; 0x30
 800b99a:	f805 6b01 	strb.w	r6, [r5], #1
 800b99e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b9a2:	e9cd 0100 	strd	r0, r1, [sp]
 800b9a6:	f7f5 f899 	bl	8000adc <__aeabi_dcmplt>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d163      	bne.n	800ba76 <_dtoa_r+0x5de>
 800b9ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	4937      	ldr	r1, [pc, #220]	; (800ba94 <_dtoa_r+0x5fc>)
 800b9b6:	f7f4 fc67 	bl	8000288 <__aeabi_dsub>
 800b9ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b9be:	f7f5 f88d 	bl	8000adc <__aeabi_dcmplt>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	f040 80b7 	bne.w	800bb36 <_dtoa_r+0x69e>
 800b9c8:	eba5 030b 	sub.w	r3, r5, fp
 800b9cc:	429f      	cmp	r7, r3
 800b9ce:	f77f af7c 	ble.w	800b8ca <_dtoa_r+0x432>
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	4b30      	ldr	r3, [pc, #192]	; (800ba98 <_dtoa_r+0x600>)
 800b9d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9da:	f7f4 fe0d 	bl	80005f8 <__aeabi_dmul>
 800b9de:	2200      	movs	r2, #0
 800b9e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9e4:	4b2c      	ldr	r3, [pc, #176]	; (800ba98 <_dtoa_r+0x600>)
 800b9e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9ea:	f7f4 fe05 	bl	80005f8 <__aeabi_dmul>
 800b9ee:	e9cd 0100 	strd	r0, r1, [sp]
 800b9f2:	e7c4      	b.n	800b97e <_dtoa_r+0x4e6>
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4633      	mov	r3, r6
 800b9f8:	f7f4 fdfe 	bl	80005f8 <__aeabi_dmul>
 800b9fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ba00:	eb0b 0507 	add.w	r5, fp, r7
 800ba04:	465e      	mov	r6, fp
 800ba06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba0a:	f7f5 f8a5 	bl	8000b58 <__aeabi_d2iz>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	f7f4 fd88 	bl	8000524 <__aeabi_i2d>
 800ba14:	3730      	adds	r7, #48	; 0x30
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba1e:	f7f4 fc33 	bl	8000288 <__aeabi_dsub>
 800ba22:	f806 7b01 	strb.w	r7, [r6], #1
 800ba26:	42ae      	cmp	r6, r5
 800ba28:	e9cd 0100 	strd	r0, r1, [sp]
 800ba2c:	f04f 0200 	mov.w	r2, #0
 800ba30:	d126      	bne.n	800ba80 <_dtoa_r+0x5e8>
 800ba32:	4b1c      	ldr	r3, [pc, #112]	; (800baa4 <_dtoa_r+0x60c>)
 800ba34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba38:	f7f4 fc28 	bl	800028c <__adddf3>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba44:	f7f5 f868 	bl	8000b18 <__aeabi_dcmpgt>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d174      	bne.n	800bb36 <_dtoa_r+0x69e>
 800ba4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba50:	2000      	movs	r0, #0
 800ba52:	4914      	ldr	r1, [pc, #80]	; (800baa4 <_dtoa_r+0x60c>)
 800ba54:	f7f4 fc18 	bl	8000288 <__aeabi_dsub>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba60:	f7f5 f83c 	bl	8000adc <__aeabi_dcmplt>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	f43f af30 	beq.w	800b8ca <_dtoa_r+0x432>
 800ba6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba6e:	2b30      	cmp	r3, #48	; 0x30
 800ba70:	f105 32ff 	add.w	r2, r5, #4294967295
 800ba74:	d002      	beq.n	800ba7c <_dtoa_r+0x5e4>
 800ba76:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ba7a:	e04a      	b.n	800bb12 <_dtoa_r+0x67a>
 800ba7c:	4615      	mov	r5, r2
 800ba7e:	e7f4      	b.n	800ba6a <_dtoa_r+0x5d2>
 800ba80:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <_dtoa_r+0x600>)
 800ba82:	f7f4 fdb9 	bl	80005f8 <__aeabi_dmul>
 800ba86:	e9cd 0100 	strd	r0, r1, [sp]
 800ba8a:	e7bc      	b.n	800ba06 <_dtoa_r+0x56e>
 800ba8c:	0800ce58 	.word	0x0800ce58
 800ba90:	0800ce30 	.word	0x0800ce30
 800ba94:	3ff00000 	.word	0x3ff00000
 800ba98:	40240000 	.word	0x40240000
 800ba9c:	401c0000 	.word	0x401c0000
 800baa0:	40140000 	.word	0x40140000
 800baa4:	3fe00000 	.word	0x3fe00000
 800baa8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800baac:	465d      	mov	r5, fp
 800baae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f4 fec9 	bl	800084c <__aeabi_ddiv>
 800baba:	f7f5 f84d 	bl	8000b58 <__aeabi_d2iz>
 800babe:	4680      	mov	r8, r0
 800bac0:	f7f4 fd30 	bl	8000524 <__aeabi_i2d>
 800bac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bac8:	f7f4 fd96 	bl	80005f8 <__aeabi_dmul>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4630      	mov	r0, r6
 800bad2:	4639      	mov	r1, r7
 800bad4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bad8:	f7f4 fbd6 	bl	8000288 <__aeabi_dsub>
 800badc:	f805 6b01 	strb.w	r6, [r5], #1
 800bae0:	eba5 060b 	sub.w	r6, r5, fp
 800bae4:	45b1      	cmp	r9, r6
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	d139      	bne.n	800bb60 <_dtoa_r+0x6c8>
 800baec:	f7f4 fbce 	bl	800028c <__adddf3>
 800baf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baf4:	4606      	mov	r6, r0
 800baf6:	460f      	mov	r7, r1
 800baf8:	f7f5 f80e 	bl	8000b18 <__aeabi_dcmpgt>
 800bafc:	b9c8      	cbnz	r0, 800bb32 <_dtoa_r+0x69a>
 800bafe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb02:	4630      	mov	r0, r6
 800bb04:	4639      	mov	r1, r7
 800bb06:	f7f4 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb0a:	b110      	cbz	r0, 800bb12 <_dtoa_r+0x67a>
 800bb0c:	f018 0f01 	tst.w	r8, #1
 800bb10:	d10f      	bne.n	800bb32 <_dtoa_r+0x69a>
 800bb12:	9904      	ldr	r1, [sp, #16]
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fac1 	bl	800c09c <_Bfree>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb1e:	702b      	strb	r3, [r5, #0]
 800bb20:	f10a 0301 	add.w	r3, sl, #1
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 8241 	beq.w	800bfb0 <_dtoa_r+0xb18>
 800bb2e:	601d      	str	r5, [r3, #0]
 800bb30:	e23e      	b.n	800bfb0 <_dtoa_r+0xb18>
 800bb32:	f8cd a020 	str.w	sl, [sp, #32]
 800bb36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb3a:	2a39      	cmp	r2, #57	; 0x39
 800bb3c:	f105 33ff 	add.w	r3, r5, #4294967295
 800bb40:	d108      	bne.n	800bb54 <_dtoa_r+0x6bc>
 800bb42:	459b      	cmp	fp, r3
 800bb44:	d10a      	bne.n	800bb5c <_dtoa_r+0x6c4>
 800bb46:	9b08      	ldr	r3, [sp, #32]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	9308      	str	r3, [sp, #32]
 800bb4c:	2330      	movs	r3, #48	; 0x30
 800bb4e:	f88b 3000 	strb.w	r3, [fp]
 800bb52:	465b      	mov	r3, fp
 800bb54:	781a      	ldrb	r2, [r3, #0]
 800bb56:	3201      	adds	r2, #1
 800bb58:	701a      	strb	r2, [r3, #0]
 800bb5a:	e78c      	b.n	800ba76 <_dtoa_r+0x5de>
 800bb5c:	461d      	mov	r5, r3
 800bb5e:	e7ea      	b.n	800bb36 <_dtoa_r+0x69e>
 800bb60:	2200      	movs	r2, #0
 800bb62:	4b9b      	ldr	r3, [pc, #620]	; (800bdd0 <_dtoa_r+0x938>)
 800bb64:	f7f4 fd48 	bl	80005f8 <__aeabi_dmul>
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	f7f4 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d09a      	beq.n	800baae <_dtoa_r+0x616>
 800bb78:	e7cb      	b.n	800bb12 <_dtoa_r+0x67a>
 800bb7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb7c:	2a00      	cmp	r2, #0
 800bb7e:	f000 808b 	beq.w	800bc98 <_dtoa_r+0x800>
 800bb82:	9a06      	ldr	r2, [sp, #24]
 800bb84:	2a01      	cmp	r2, #1
 800bb86:	dc6e      	bgt.n	800bc66 <_dtoa_r+0x7ce>
 800bb88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb8a:	2a00      	cmp	r2, #0
 800bb8c:	d067      	beq.n	800bc5e <_dtoa_r+0x7c6>
 800bb8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb92:	9f07      	ldr	r7, [sp, #28]
 800bb94:	9d05      	ldr	r5, [sp, #20]
 800bb96:	9a05      	ldr	r2, [sp, #20]
 800bb98:	2101      	movs	r1, #1
 800bb9a:	441a      	add	r2, r3
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	9205      	str	r2, [sp, #20]
 800bba0:	4498      	add	r8, r3
 800bba2:	f000 fb1b 	bl	800c1dc <__i2b>
 800bba6:	4606      	mov	r6, r0
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	dd0c      	ble.n	800bbc6 <_dtoa_r+0x72e>
 800bbac:	f1b8 0f00 	cmp.w	r8, #0
 800bbb0:	dd09      	ble.n	800bbc6 <_dtoa_r+0x72e>
 800bbb2:	4545      	cmp	r5, r8
 800bbb4:	9a05      	ldr	r2, [sp, #20]
 800bbb6:	462b      	mov	r3, r5
 800bbb8:	bfa8      	it	ge
 800bbba:	4643      	movge	r3, r8
 800bbbc:	1ad2      	subs	r2, r2, r3
 800bbbe:	9205      	str	r2, [sp, #20]
 800bbc0:	1aed      	subs	r5, r5, r3
 800bbc2:	eba8 0803 	sub.w	r8, r8, r3
 800bbc6:	9b07      	ldr	r3, [sp, #28]
 800bbc8:	b1eb      	cbz	r3, 800bc06 <_dtoa_r+0x76e>
 800bbca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d067      	beq.n	800bca0 <_dtoa_r+0x808>
 800bbd0:	b18f      	cbz	r7, 800bbf6 <_dtoa_r+0x75e>
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	463a      	mov	r2, r7
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 fba0 	bl	800c31c <__pow5mult>
 800bbdc:	9a04      	ldr	r2, [sp, #16]
 800bbde:	4601      	mov	r1, r0
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 fb03 	bl	800c1ee <__multiply>
 800bbe8:	9904      	ldr	r1, [sp, #16]
 800bbea:	9008      	str	r0, [sp, #32]
 800bbec:	4620      	mov	r0, r4
 800bbee:	f000 fa55 	bl	800c09c <_Bfree>
 800bbf2:	9b08      	ldr	r3, [sp, #32]
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	9b07      	ldr	r3, [sp, #28]
 800bbf8:	1bda      	subs	r2, r3, r7
 800bbfa:	d004      	beq.n	800bc06 <_dtoa_r+0x76e>
 800bbfc:	9904      	ldr	r1, [sp, #16]
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 fb8c 	bl	800c31c <__pow5mult>
 800bc04:	9004      	str	r0, [sp, #16]
 800bc06:	2101      	movs	r1, #1
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f000 fae7 	bl	800c1dc <__i2b>
 800bc0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc10:	4607      	mov	r7, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 81d0 	beq.w	800bfb8 <_dtoa_r+0xb20>
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f000 fb7d 	bl	800c31c <__pow5mult>
 800bc22:	9b06      	ldr	r3, [sp, #24]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	4607      	mov	r7, r0
 800bc28:	dc40      	bgt.n	800bcac <_dtoa_r+0x814>
 800bc2a:	9b00      	ldr	r3, [sp, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d139      	bne.n	800bca4 <_dtoa_r+0x80c>
 800bc30:	9b01      	ldr	r3, [sp, #4]
 800bc32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d136      	bne.n	800bca8 <_dtoa_r+0x810>
 800bc3a:	9b01      	ldr	r3, [sp, #4]
 800bc3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc40:	0d1b      	lsrs	r3, r3, #20
 800bc42:	051b      	lsls	r3, r3, #20
 800bc44:	b12b      	cbz	r3, 800bc52 <_dtoa_r+0x7ba>
 800bc46:	9b05      	ldr	r3, [sp, #20]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	9305      	str	r3, [sp, #20]
 800bc4c:	f108 0801 	add.w	r8, r8, #1
 800bc50:	2301      	movs	r3, #1
 800bc52:	9307      	str	r3, [sp, #28]
 800bc54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d12a      	bne.n	800bcb0 <_dtoa_r+0x818>
 800bc5a:	2001      	movs	r0, #1
 800bc5c:	e030      	b.n	800bcc0 <_dtoa_r+0x828>
 800bc5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc64:	e795      	b.n	800bb92 <_dtoa_r+0x6fa>
 800bc66:	9b07      	ldr	r3, [sp, #28]
 800bc68:	f109 37ff 	add.w	r7, r9, #4294967295
 800bc6c:	42bb      	cmp	r3, r7
 800bc6e:	bfbf      	itttt	lt
 800bc70:	9b07      	ldrlt	r3, [sp, #28]
 800bc72:	9707      	strlt	r7, [sp, #28]
 800bc74:	1afa      	sublt	r2, r7, r3
 800bc76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bc78:	bfbb      	ittet	lt
 800bc7a:	189b      	addlt	r3, r3, r2
 800bc7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bc7e:	1bdf      	subge	r7, r3, r7
 800bc80:	2700      	movlt	r7, #0
 800bc82:	f1b9 0f00 	cmp.w	r9, #0
 800bc86:	bfb5      	itete	lt
 800bc88:	9b05      	ldrlt	r3, [sp, #20]
 800bc8a:	9d05      	ldrge	r5, [sp, #20]
 800bc8c:	eba3 0509 	sublt.w	r5, r3, r9
 800bc90:	464b      	movge	r3, r9
 800bc92:	bfb8      	it	lt
 800bc94:	2300      	movlt	r3, #0
 800bc96:	e77e      	b.n	800bb96 <_dtoa_r+0x6fe>
 800bc98:	9f07      	ldr	r7, [sp, #28]
 800bc9a:	9d05      	ldr	r5, [sp, #20]
 800bc9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bc9e:	e783      	b.n	800bba8 <_dtoa_r+0x710>
 800bca0:	9a07      	ldr	r2, [sp, #28]
 800bca2:	e7ab      	b.n	800bbfc <_dtoa_r+0x764>
 800bca4:	2300      	movs	r3, #0
 800bca6:	e7d4      	b.n	800bc52 <_dtoa_r+0x7ba>
 800bca8:	9b00      	ldr	r3, [sp, #0]
 800bcaa:	e7d2      	b.n	800bc52 <_dtoa_r+0x7ba>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9307      	str	r3, [sp, #28]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bcb6:	6918      	ldr	r0, [r3, #16]
 800bcb8:	f000 fa42 	bl	800c140 <__hi0bits>
 800bcbc:	f1c0 0020 	rsb	r0, r0, #32
 800bcc0:	4440      	add	r0, r8
 800bcc2:	f010 001f 	ands.w	r0, r0, #31
 800bcc6:	d047      	beq.n	800bd58 <_dtoa_r+0x8c0>
 800bcc8:	f1c0 0320 	rsb	r3, r0, #32
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	dd3b      	ble.n	800bd48 <_dtoa_r+0x8b0>
 800bcd0:	9b05      	ldr	r3, [sp, #20]
 800bcd2:	f1c0 001c 	rsb	r0, r0, #28
 800bcd6:	4403      	add	r3, r0
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	4405      	add	r5, r0
 800bcdc:	4480      	add	r8, r0
 800bcde:	9b05      	ldr	r3, [sp, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dd05      	ble.n	800bcf0 <_dtoa_r+0x858>
 800bce4:	461a      	mov	r2, r3
 800bce6:	9904      	ldr	r1, [sp, #16]
 800bce8:	4620      	mov	r0, r4
 800bcea:	f000 fb65 	bl	800c3b8 <__lshift>
 800bcee:	9004      	str	r0, [sp, #16]
 800bcf0:	f1b8 0f00 	cmp.w	r8, #0
 800bcf4:	dd05      	ble.n	800bd02 <_dtoa_r+0x86a>
 800bcf6:	4639      	mov	r1, r7
 800bcf8:	4642      	mov	r2, r8
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 fb5c 	bl	800c3b8 <__lshift>
 800bd00:	4607      	mov	r7, r0
 800bd02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd04:	b353      	cbz	r3, 800bd5c <_dtoa_r+0x8c4>
 800bd06:	4639      	mov	r1, r7
 800bd08:	9804      	ldr	r0, [sp, #16]
 800bd0a:	f000 fba9 	bl	800c460 <__mcmp>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	da24      	bge.n	800bd5c <_dtoa_r+0x8c4>
 800bd12:	2300      	movs	r3, #0
 800bd14:	220a      	movs	r2, #10
 800bd16:	9904      	ldr	r1, [sp, #16]
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 f9d6 	bl	800c0ca <__multadd>
 800bd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd20:	9004      	str	r0, [sp, #16]
 800bd22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 814d 	beq.w	800bfc6 <_dtoa_r+0xb2e>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4631      	mov	r1, r6
 800bd30:	220a      	movs	r2, #10
 800bd32:	4620      	mov	r0, r4
 800bd34:	f000 f9c9 	bl	800c0ca <__multadd>
 800bd38:	9b02      	ldr	r3, [sp, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	dc4f      	bgt.n	800bde0 <_dtoa_r+0x948>
 800bd40:	9b06      	ldr	r3, [sp, #24]
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	dd4c      	ble.n	800bde0 <_dtoa_r+0x948>
 800bd46:	e011      	b.n	800bd6c <_dtoa_r+0x8d4>
 800bd48:	d0c9      	beq.n	800bcde <_dtoa_r+0x846>
 800bd4a:	9a05      	ldr	r2, [sp, #20]
 800bd4c:	331c      	adds	r3, #28
 800bd4e:	441a      	add	r2, r3
 800bd50:	9205      	str	r2, [sp, #20]
 800bd52:	441d      	add	r5, r3
 800bd54:	4498      	add	r8, r3
 800bd56:	e7c2      	b.n	800bcde <_dtoa_r+0x846>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	e7f6      	b.n	800bd4a <_dtoa_r+0x8b2>
 800bd5c:	f1b9 0f00 	cmp.w	r9, #0
 800bd60:	dc38      	bgt.n	800bdd4 <_dtoa_r+0x93c>
 800bd62:	9b06      	ldr	r3, [sp, #24]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	dd35      	ble.n	800bdd4 <_dtoa_r+0x93c>
 800bd68:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd6c:	9b02      	ldr	r3, [sp, #8]
 800bd6e:	b963      	cbnz	r3, 800bd8a <_dtoa_r+0x8f2>
 800bd70:	4639      	mov	r1, r7
 800bd72:	2205      	movs	r2, #5
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 f9a8 	bl	800c0ca <__multadd>
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	9804      	ldr	r0, [sp, #16]
 800bd80:	f000 fb6e 	bl	800c460 <__mcmp>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	f73f adcc 	bgt.w	800b922 <_dtoa_r+0x48a>
 800bd8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd8c:	465d      	mov	r5, fp
 800bd8e:	ea6f 0a03 	mvn.w	sl, r3
 800bd92:	f04f 0900 	mov.w	r9, #0
 800bd96:	4639      	mov	r1, r7
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 f97f 	bl	800c09c <_Bfree>
 800bd9e:	2e00      	cmp	r6, #0
 800bda0:	f43f aeb7 	beq.w	800bb12 <_dtoa_r+0x67a>
 800bda4:	f1b9 0f00 	cmp.w	r9, #0
 800bda8:	d005      	beq.n	800bdb6 <_dtoa_r+0x91e>
 800bdaa:	45b1      	cmp	r9, r6
 800bdac:	d003      	beq.n	800bdb6 <_dtoa_r+0x91e>
 800bdae:	4649      	mov	r1, r9
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 f973 	bl	800c09c <_Bfree>
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 f96f 	bl	800c09c <_Bfree>
 800bdbe:	e6a8      	b.n	800bb12 <_dtoa_r+0x67a>
 800bdc0:	2700      	movs	r7, #0
 800bdc2:	463e      	mov	r6, r7
 800bdc4:	e7e1      	b.n	800bd8a <_dtoa_r+0x8f2>
 800bdc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bdca:	463e      	mov	r6, r7
 800bdcc:	e5a9      	b.n	800b922 <_dtoa_r+0x48a>
 800bdce:	bf00      	nop
 800bdd0:	40240000 	.word	0x40240000
 800bdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd6:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f000 80fa 	beq.w	800bfd4 <_dtoa_r+0xb3c>
 800bde0:	2d00      	cmp	r5, #0
 800bde2:	dd05      	ble.n	800bdf0 <_dtoa_r+0x958>
 800bde4:	4631      	mov	r1, r6
 800bde6:	462a      	mov	r2, r5
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 fae5 	bl	800c3b8 <__lshift>
 800bdee:	4606      	mov	r6, r0
 800bdf0:	9b07      	ldr	r3, [sp, #28]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d04c      	beq.n	800be90 <_dtoa_r+0x9f8>
 800bdf6:	6871      	ldr	r1, [r6, #4]
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f000 f91b 	bl	800c034 <_Balloc>
 800bdfe:	6932      	ldr	r2, [r6, #16]
 800be00:	3202      	adds	r2, #2
 800be02:	4605      	mov	r5, r0
 800be04:	0092      	lsls	r2, r2, #2
 800be06:	f106 010c 	add.w	r1, r6, #12
 800be0a:	300c      	adds	r0, #12
 800be0c:	f7fe fe26 	bl	800aa5c <memcpy>
 800be10:	2201      	movs	r2, #1
 800be12:	4629      	mov	r1, r5
 800be14:	4620      	mov	r0, r4
 800be16:	f000 facf 	bl	800c3b8 <__lshift>
 800be1a:	9b00      	ldr	r3, [sp, #0]
 800be1c:	f8cd b014 	str.w	fp, [sp, #20]
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	46b1      	mov	r9, r6
 800be26:	9307      	str	r3, [sp, #28]
 800be28:	4606      	mov	r6, r0
 800be2a:	4639      	mov	r1, r7
 800be2c:	9804      	ldr	r0, [sp, #16]
 800be2e:	f7ff faa5 	bl	800b37c <quorem>
 800be32:	4649      	mov	r1, r9
 800be34:	4605      	mov	r5, r0
 800be36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800be3a:	9804      	ldr	r0, [sp, #16]
 800be3c:	f000 fb10 	bl	800c460 <__mcmp>
 800be40:	4632      	mov	r2, r6
 800be42:	9000      	str	r0, [sp, #0]
 800be44:	4639      	mov	r1, r7
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fb24 	bl	800c494 <__mdiff>
 800be4c:	68c3      	ldr	r3, [r0, #12]
 800be4e:	4602      	mov	r2, r0
 800be50:	bb03      	cbnz	r3, 800be94 <_dtoa_r+0x9fc>
 800be52:	4601      	mov	r1, r0
 800be54:	9008      	str	r0, [sp, #32]
 800be56:	9804      	ldr	r0, [sp, #16]
 800be58:	f000 fb02 	bl	800c460 <__mcmp>
 800be5c:	9a08      	ldr	r2, [sp, #32]
 800be5e:	4603      	mov	r3, r0
 800be60:	4611      	mov	r1, r2
 800be62:	4620      	mov	r0, r4
 800be64:	9308      	str	r3, [sp, #32]
 800be66:	f000 f919 	bl	800c09c <_Bfree>
 800be6a:	9b08      	ldr	r3, [sp, #32]
 800be6c:	b9a3      	cbnz	r3, 800be98 <_dtoa_r+0xa00>
 800be6e:	9a06      	ldr	r2, [sp, #24]
 800be70:	b992      	cbnz	r2, 800be98 <_dtoa_r+0xa00>
 800be72:	9a07      	ldr	r2, [sp, #28]
 800be74:	b982      	cbnz	r2, 800be98 <_dtoa_r+0xa00>
 800be76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800be7a:	d029      	beq.n	800bed0 <_dtoa_r+0xa38>
 800be7c:	9b00      	ldr	r3, [sp, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	dd01      	ble.n	800be86 <_dtoa_r+0x9ee>
 800be82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800be86:	9b05      	ldr	r3, [sp, #20]
 800be88:	1c5d      	adds	r5, r3, #1
 800be8a:	f883 8000 	strb.w	r8, [r3]
 800be8e:	e782      	b.n	800bd96 <_dtoa_r+0x8fe>
 800be90:	4630      	mov	r0, r6
 800be92:	e7c2      	b.n	800be1a <_dtoa_r+0x982>
 800be94:	2301      	movs	r3, #1
 800be96:	e7e3      	b.n	800be60 <_dtoa_r+0x9c8>
 800be98:	9a00      	ldr	r2, [sp, #0]
 800be9a:	2a00      	cmp	r2, #0
 800be9c:	db04      	blt.n	800bea8 <_dtoa_r+0xa10>
 800be9e:	d125      	bne.n	800beec <_dtoa_r+0xa54>
 800bea0:	9a06      	ldr	r2, [sp, #24]
 800bea2:	bb1a      	cbnz	r2, 800beec <_dtoa_r+0xa54>
 800bea4:	9a07      	ldr	r2, [sp, #28]
 800bea6:	bb0a      	cbnz	r2, 800beec <_dtoa_r+0xa54>
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	ddec      	ble.n	800be86 <_dtoa_r+0x9ee>
 800beac:	2201      	movs	r2, #1
 800beae:	9904      	ldr	r1, [sp, #16]
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fa81 	bl	800c3b8 <__lshift>
 800beb6:	4639      	mov	r1, r7
 800beb8:	9004      	str	r0, [sp, #16]
 800beba:	f000 fad1 	bl	800c460 <__mcmp>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	dc03      	bgt.n	800beca <_dtoa_r+0xa32>
 800bec2:	d1e0      	bne.n	800be86 <_dtoa_r+0x9ee>
 800bec4:	f018 0f01 	tst.w	r8, #1
 800bec8:	d0dd      	beq.n	800be86 <_dtoa_r+0x9ee>
 800beca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bece:	d1d8      	bne.n	800be82 <_dtoa_r+0x9ea>
 800bed0:	9b05      	ldr	r3, [sp, #20]
 800bed2:	9a05      	ldr	r2, [sp, #20]
 800bed4:	1c5d      	adds	r5, r3, #1
 800bed6:	2339      	movs	r3, #57	; 0x39
 800bed8:	7013      	strb	r3, [r2, #0]
 800beda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bede:	2b39      	cmp	r3, #57	; 0x39
 800bee0:	f105 32ff 	add.w	r2, r5, #4294967295
 800bee4:	d04f      	beq.n	800bf86 <_dtoa_r+0xaee>
 800bee6:	3301      	adds	r3, #1
 800bee8:	7013      	strb	r3, [r2, #0]
 800beea:	e754      	b.n	800bd96 <_dtoa_r+0x8fe>
 800beec:	9a05      	ldr	r2, [sp, #20]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f102 0501 	add.w	r5, r2, #1
 800bef4:	dd06      	ble.n	800bf04 <_dtoa_r+0xa6c>
 800bef6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800befa:	d0e9      	beq.n	800bed0 <_dtoa_r+0xa38>
 800befc:	f108 0801 	add.w	r8, r8, #1
 800bf00:	9b05      	ldr	r3, [sp, #20]
 800bf02:	e7c2      	b.n	800be8a <_dtoa_r+0x9f2>
 800bf04:	9a02      	ldr	r2, [sp, #8]
 800bf06:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bf0a:	eba5 030b 	sub.w	r3, r5, fp
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d021      	beq.n	800bf56 <_dtoa_r+0xabe>
 800bf12:	2300      	movs	r3, #0
 800bf14:	220a      	movs	r2, #10
 800bf16:	9904      	ldr	r1, [sp, #16]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 f8d6 	bl	800c0ca <__multadd>
 800bf1e:	45b1      	cmp	r9, r6
 800bf20:	9004      	str	r0, [sp, #16]
 800bf22:	f04f 0300 	mov.w	r3, #0
 800bf26:	f04f 020a 	mov.w	r2, #10
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	d105      	bne.n	800bf3c <_dtoa_r+0xaa4>
 800bf30:	f000 f8cb 	bl	800c0ca <__multadd>
 800bf34:	4681      	mov	r9, r0
 800bf36:	4606      	mov	r6, r0
 800bf38:	9505      	str	r5, [sp, #20]
 800bf3a:	e776      	b.n	800be2a <_dtoa_r+0x992>
 800bf3c:	f000 f8c5 	bl	800c0ca <__multadd>
 800bf40:	4631      	mov	r1, r6
 800bf42:	4681      	mov	r9, r0
 800bf44:	2300      	movs	r3, #0
 800bf46:	220a      	movs	r2, #10
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 f8be 	bl	800c0ca <__multadd>
 800bf4e:	4606      	mov	r6, r0
 800bf50:	e7f2      	b.n	800bf38 <_dtoa_r+0xaa0>
 800bf52:	f04f 0900 	mov.w	r9, #0
 800bf56:	2201      	movs	r2, #1
 800bf58:	9904      	ldr	r1, [sp, #16]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 fa2c 	bl	800c3b8 <__lshift>
 800bf60:	4639      	mov	r1, r7
 800bf62:	9004      	str	r0, [sp, #16]
 800bf64:	f000 fa7c 	bl	800c460 <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	dcb6      	bgt.n	800beda <_dtoa_r+0xa42>
 800bf6c:	d102      	bne.n	800bf74 <_dtoa_r+0xadc>
 800bf6e:	f018 0f01 	tst.w	r8, #1
 800bf72:	d1b2      	bne.n	800beda <_dtoa_r+0xa42>
 800bf74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf78:	2b30      	cmp	r3, #48	; 0x30
 800bf7a:	f105 32ff 	add.w	r2, r5, #4294967295
 800bf7e:	f47f af0a 	bne.w	800bd96 <_dtoa_r+0x8fe>
 800bf82:	4615      	mov	r5, r2
 800bf84:	e7f6      	b.n	800bf74 <_dtoa_r+0xadc>
 800bf86:	4593      	cmp	fp, r2
 800bf88:	d105      	bne.n	800bf96 <_dtoa_r+0xafe>
 800bf8a:	2331      	movs	r3, #49	; 0x31
 800bf8c:	f10a 0a01 	add.w	sl, sl, #1
 800bf90:	f88b 3000 	strb.w	r3, [fp]
 800bf94:	e6ff      	b.n	800bd96 <_dtoa_r+0x8fe>
 800bf96:	4615      	mov	r5, r2
 800bf98:	e79f      	b.n	800beda <_dtoa_r+0xa42>
 800bf9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c000 <_dtoa_r+0xb68>
 800bf9e:	e007      	b.n	800bfb0 <_dtoa_r+0xb18>
 800bfa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfa2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c004 <_dtoa_r+0xb6c>
 800bfa6:	b11b      	cbz	r3, 800bfb0 <_dtoa_r+0xb18>
 800bfa8:	f10b 0308 	add.w	r3, fp, #8
 800bfac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	4658      	mov	r0, fp
 800bfb2:	b017      	add	sp, #92	; 0x5c
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	9b06      	ldr	r3, [sp, #24]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	f77f ae35 	ble.w	800bc2a <_dtoa_r+0x792>
 800bfc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	e649      	b.n	800bc5a <_dtoa_r+0x7c2>
 800bfc6:	9b02      	ldr	r3, [sp, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dc03      	bgt.n	800bfd4 <_dtoa_r+0xb3c>
 800bfcc:	9b06      	ldr	r3, [sp, #24]
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	f73f aecc 	bgt.w	800bd6c <_dtoa_r+0x8d4>
 800bfd4:	465d      	mov	r5, fp
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	9804      	ldr	r0, [sp, #16]
 800bfda:	f7ff f9cf 	bl	800b37c <quorem>
 800bfde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bfe2:	f805 8b01 	strb.w	r8, [r5], #1
 800bfe6:	9a02      	ldr	r2, [sp, #8]
 800bfe8:	eba5 030b 	sub.w	r3, r5, fp
 800bfec:	429a      	cmp	r2, r3
 800bfee:	ddb0      	ble.n	800bf52 <_dtoa_r+0xaba>
 800bff0:	2300      	movs	r3, #0
 800bff2:	220a      	movs	r2, #10
 800bff4:	9904      	ldr	r1, [sp, #16]
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 f867 	bl	800c0ca <__multadd>
 800bffc:	9004      	str	r0, [sp, #16]
 800bffe:	e7ea      	b.n	800bfd6 <_dtoa_r+0xb3e>
 800c000:	0800cdfc 	.word	0x0800cdfc
 800c004:	0800ce20 	.word	0x0800ce20

0800c008 <_localeconv_r>:
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <_localeconv_r+0x14>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6a18      	ldr	r0, [r3, #32]
 800c00e:	4b04      	ldr	r3, [pc, #16]	; (800c020 <_localeconv_r+0x18>)
 800c010:	2800      	cmp	r0, #0
 800c012:	bf08      	it	eq
 800c014:	4618      	moveq	r0, r3
 800c016:	30f0      	adds	r0, #240	; 0xf0
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	20000010 	.word	0x20000010
 800c020:	20000074 	.word	0x20000074

0800c024 <malloc>:
 800c024:	4b02      	ldr	r3, [pc, #8]	; (800c030 <malloc+0xc>)
 800c026:	4601      	mov	r1, r0
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	f000 bb3b 	b.w	800c6a4 <_malloc_r>
 800c02e:	bf00      	nop
 800c030:	20000010 	.word	0x20000010

0800c034 <_Balloc>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c038:	4604      	mov	r4, r0
 800c03a:	460e      	mov	r6, r1
 800c03c:	b93d      	cbnz	r5, 800c04e <_Balloc+0x1a>
 800c03e:	2010      	movs	r0, #16
 800c040:	f7ff fff0 	bl	800c024 <malloc>
 800c044:	6260      	str	r0, [r4, #36]	; 0x24
 800c046:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c04a:	6005      	str	r5, [r0, #0]
 800c04c:	60c5      	str	r5, [r0, #12]
 800c04e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c050:	68eb      	ldr	r3, [r5, #12]
 800c052:	b183      	cbz	r3, 800c076 <_Balloc+0x42>
 800c054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c05c:	b9b8      	cbnz	r0, 800c08e <_Balloc+0x5a>
 800c05e:	2101      	movs	r1, #1
 800c060:	fa01 f506 	lsl.w	r5, r1, r6
 800c064:	1d6a      	adds	r2, r5, #5
 800c066:	0092      	lsls	r2, r2, #2
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fabf 	bl	800c5ec <_calloc_r>
 800c06e:	b160      	cbz	r0, 800c08a <_Balloc+0x56>
 800c070:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c074:	e00e      	b.n	800c094 <_Balloc+0x60>
 800c076:	2221      	movs	r2, #33	; 0x21
 800c078:	2104      	movs	r1, #4
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fab6 	bl	800c5ec <_calloc_r>
 800c080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c082:	60e8      	str	r0, [r5, #12]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1e4      	bne.n	800c054 <_Balloc+0x20>
 800c08a:	2000      	movs	r0, #0
 800c08c:	bd70      	pop	{r4, r5, r6, pc}
 800c08e:	6802      	ldr	r2, [r0, #0]
 800c090:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c094:	2300      	movs	r3, #0
 800c096:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c09a:	e7f7      	b.n	800c08c <_Balloc+0x58>

0800c09c <_Bfree>:
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	b93c      	cbnz	r4, 800c0b6 <_Bfree+0x1a>
 800c0a6:	2010      	movs	r0, #16
 800c0a8:	f7ff ffbc 	bl	800c024 <malloc>
 800c0ac:	6270      	str	r0, [r6, #36]	; 0x24
 800c0ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0b2:	6004      	str	r4, [r0, #0]
 800c0b4:	60c4      	str	r4, [r0, #12]
 800c0b6:	b13d      	cbz	r5, 800c0c8 <_Bfree+0x2c>
 800c0b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c0ba:	686a      	ldr	r2, [r5, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0c2:	6029      	str	r1, [r5, #0]
 800c0c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c0c8:	bd70      	pop	{r4, r5, r6, pc}

0800c0ca <__multadd>:
 800c0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ce:	690d      	ldr	r5, [r1, #16]
 800c0d0:	461f      	mov	r7, r3
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	f101 0c14 	add.w	ip, r1, #20
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f8dc 0000 	ldr.w	r0, [ip]
 800c0e0:	b281      	uxth	r1, r0
 800c0e2:	fb02 7101 	mla	r1, r2, r1, r7
 800c0e6:	0c0f      	lsrs	r7, r1, #16
 800c0e8:	0c00      	lsrs	r0, r0, #16
 800c0ea:	fb02 7000 	mla	r0, r2, r0, r7
 800c0ee:	b289      	uxth	r1, r1
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c0f6:	429d      	cmp	r5, r3
 800c0f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c0fc:	f84c 1b04 	str.w	r1, [ip], #4
 800c100:	dcec      	bgt.n	800c0dc <__multadd+0x12>
 800c102:	b1d7      	cbz	r7, 800c13a <__multadd+0x70>
 800c104:	68a3      	ldr	r3, [r4, #8]
 800c106:	42ab      	cmp	r3, r5
 800c108:	dc12      	bgt.n	800c130 <__multadd+0x66>
 800c10a:	6861      	ldr	r1, [r4, #4]
 800c10c:	4630      	mov	r0, r6
 800c10e:	3101      	adds	r1, #1
 800c110:	f7ff ff90 	bl	800c034 <_Balloc>
 800c114:	6922      	ldr	r2, [r4, #16]
 800c116:	3202      	adds	r2, #2
 800c118:	f104 010c 	add.w	r1, r4, #12
 800c11c:	4680      	mov	r8, r0
 800c11e:	0092      	lsls	r2, r2, #2
 800c120:	300c      	adds	r0, #12
 800c122:	f7fe fc9b 	bl	800aa5c <memcpy>
 800c126:	4621      	mov	r1, r4
 800c128:	4630      	mov	r0, r6
 800c12a:	f7ff ffb7 	bl	800c09c <_Bfree>
 800c12e:	4644      	mov	r4, r8
 800c130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c134:	3501      	adds	r5, #1
 800c136:	615f      	str	r7, [r3, #20]
 800c138:	6125      	str	r5, [r4, #16]
 800c13a:	4620      	mov	r0, r4
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c140 <__hi0bits>:
 800c140:	0c02      	lsrs	r2, r0, #16
 800c142:	0412      	lsls	r2, r2, #16
 800c144:	4603      	mov	r3, r0
 800c146:	b9b2      	cbnz	r2, 800c176 <__hi0bits+0x36>
 800c148:	0403      	lsls	r3, r0, #16
 800c14a:	2010      	movs	r0, #16
 800c14c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c150:	bf04      	itt	eq
 800c152:	021b      	lsleq	r3, r3, #8
 800c154:	3008      	addeq	r0, #8
 800c156:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c15a:	bf04      	itt	eq
 800c15c:	011b      	lsleq	r3, r3, #4
 800c15e:	3004      	addeq	r0, #4
 800c160:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c164:	bf04      	itt	eq
 800c166:	009b      	lsleq	r3, r3, #2
 800c168:	3002      	addeq	r0, #2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	db06      	blt.n	800c17c <__hi0bits+0x3c>
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	d503      	bpl.n	800c17a <__hi0bits+0x3a>
 800c172:	3001      	adds	r0, #1
 800c174:	4770      	bx	lr
 800c176:	2000      	movs	r0, #0
 800c178:	e7e8      	b.n	800c14c <__hi0bits+0xc>
 800c17a:	2020      	movs	r0, #32
 800c17c:	4770      	bx	lr

0800c17e <__lo0bits>:
 800c17e:	6803      	ldr	r3, [r0, #0]
 800c180:	f013 0207 	ands.w	r2, r3, #7
 800c184:	4601      	mov	r1, r0
 800c186:	d00b      	beq.n	800c1a0 <__lo0bits+0x22>
 800c188:	07da      	lsls	r2, r3, #31
 800c18a:	d423      	bmi.n	800c1d4 <__lo0bits+0x56>
 800c18c:	0798      	lsls	r0, r3, #30
 800c18e:	bf49      	itett	mi
 800c190:	085b      	lsrmi	r3, r3, #1
 800c192:	089b      	lsrpl	r3, r3, #2
 800c194:	2001      	movmi	r0, #1
 800c196:	600b      	strmi	r3, [r1, #0]
 800c198:	bf5c      	itt	pl
 800c19a:	600b      	strpl	r3, [r1, #0]
 800c19c:	2002      	movpl	r0, #2
 800c19e:	4770      	bx	lr
 800c1a0:	b298      	uxth	r0, r3
 800c1a2:	b9a8      	cbnz	r0, 800c1d0 <__lo0bits+0x52>
 800c1a4:	0c1b      	lsrs	r3, r3, #16
 800c1a6:	2010      	movs	r0, #16
 800c1a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c1ac:	bf04      	itt	eq
 800c1ae:	0a1b      	lsreq	r3, r3, #8
 800c1b0:	3008      	addeq	r0, #8
 800c1b2:	071a      	lsls	r2, r3, #28
 800c1b4:	bf04      	itt	eq
 800c1b6:	091b      	lsreq	r3, r3, #4
 800c1b8:	3004      	addeq	r0, #4
 800c1ba:	079a      	lsls	r2, r3, #30
 800c1bc:	bf04      	itt	eq
 800c1be:	089b      	lsreq	r3, r3, #2
 800c1c0:	3002      	addeq	r0, #2
 800c1c2:	07da      	lsls	r2, r3, #31
 800c1c4:	d402      	bmi.n	800c1cc <__lo0bits+0x4e>
 800c1c6:	085b      	lsrs	r3, r3, #1
 800c1c8:	d006      	beq.n	800c1d8 <__lo0bits+0x5a>
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	600b      	str	r3, [r1, #0]
 800c1ce:	4770      	bx	lr
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	e7e9      	b.n	800c1a8 <__lo0bits+0x2a>
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	4770      	bx	lr
 800c1d8:	2020      	movs	r0, #32
 800c1da:	4770      	bx	lr

0800c1dc <__i2b>:
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	460c      	mov	r4, r1
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	f7ff ff27 	bl	800c034 <_Balloc>
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	6144      	str	r4, [r0, #20]
 800c1ea:	6102      	str	r2, [r0, #16]
 800c1ec:	bd10      	pop	{r4, pc}

0800c1ee <__multiply>:
 800c1ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f2:	4614      	mov	r4, r2
 800c1f4:	690a      	ldr	r2, [r1, #16]
 800c1f6:	6923      	ldr	r3, [r4, #16]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	bfb8      	it	lt
 800c1fc:	460b      	movlt	r3, r1
 800c1fe:	4688      	mov	r8, r1
 800c200:	bfbc      	itt	lt
 800c202:	46a0      	movlt	r8, r4
 800c204:	461c      	movlt	r4, r3
 800c206:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c20a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c20e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c212:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c216:	eb07 0609 	add.w	r6, r7, r9
 800c21a:	42b3      	cmp	r3, r6
 800c21c:	bfb8      	it	lt
 800c21e:	3101      	addlt	r1, #1
 800c220:	f7ff ff08 	bl	800c034 <_Balloc>
 800c224:	f100 0514 	add.w	r5, r0, #20
 800c228:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c22c:	462b      	mov	r3, r5
 800c22e:	2200      	movs	r2, #0
 800c230:	4573      	cmp	r3, lr
 800c232:	d316      	bcc.n	800c262 <__multiply+0x74>
 800c234:	f104 0214 	add.w	r2, r4, #20
 800c238:	f108 0114 	add.w	r1, r8, #20
 800c23c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c240:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	9201      	str	r2, [sp, #4]
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d80c      	bhi.n	800c268 <__multiply+0x7a>
 800c24e:	2e00      	cmp	r6, #0
 800c250:	dd03      	ble.n	800c25a <__multiply+0x6c>
 800c252:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c256:	2b00      	cmp	r3, #0
 800c258:	d05d      	beq.n	800c316 <__multiply+0x128>
 800c25a:	6106      	str	r6, [r0, #16]
 800c25c:	b003      	add	sp, #12
 800c25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c262:	f843 2b04 	str.w	r2, [r3], #4
 800c266:	e7e3      	b.n	800c230 <__multiply+0x42>
 800c268:	f8b2 b000 	ldrh.w	fp, [r2]
 800c26c:	f1bb 0f00 	cmp.w	fp, #0
 800c270:	d023      	beq.n	800c2ba <__multiply+0xcc>
 800c272:	4689      	mov	r9, r1
 800c274:	46ac      	mov	ip, r5
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	f859 4b04 	ldr.w	r4, [r9], #4
 800c27e:	f8dc a000 	ldr.w	sl, [ip]
 800c282:	b2a3      	uxth	r3, r4
 800c284:	fa1f fa8a 	uxth.w	sl, sl
 800c288:	fb0b a303 	mla	r3, fp, r3, sl
 800c28c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c290:	f8dc 4000 	ldr.w	r4, [ip]
 800c294:	4443      	add	r3, r8
 800c296:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c29a:	fb0b 840a 	mla	r4, fp, sl, r8
 800c29e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c2a2:	46e2      	mov	sl, ip
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c2aa:	454f      	cmp	r7, r9
 800c2ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c2b0:	f84a 3b04 	str.w	r3, [sl], #4
 800c2b4:	d82b      	bhi.n	800c30e <__multiply+0x120>
 800c2b6:	f8cc 8004 	str.w	r8, [ip, #4]
 800c2ba:	9b01      	ldr	r3, [sp, #4]
 800c2bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c2c0:	3204      	adds	r2, #4
 800c2c2:	f1ba 0f00 	cmp.w	sl, #0
 800c2c6:	d020      	beq.n	800c30a <__multiply+0x11c>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	4689      	mov	r9, r1
 800c2cc:	46a8      	mov	r8, r5
 800c2ce:	f04f 0b00 	mov.w	fp, #0
 800c2d2:	f8b9 c000 	ldrh.w	ip, [r9]
 800c2d6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c2da:	fb0a 440c 	mla	r4, sl, ip, r4
 800c2de:	445c      	add	r4, fp
 800c2e0:	46c4      	mov	ip, r8
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c2e8:	f84c 3b04 	str.w	r3, [ip], #4
 800c2ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2f0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c2f4:	0c1b      	lsrs	r3, r3, #16
 800c2f6:	fb0a b303 	mla	r3, sl, r3, fp
 800c2fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c2fe:	454f      	cmp	r7, r9
 800c300:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c304:	d805      	bhi.n	800c312 <__multiply+0x124>
 800c306:	f8c8 3004 	str.w	r3, [r8, #4]
 800c30a:	3504      	adds	r5, #4
 800c30c:	e79b      	b.n	800c246 <__multiply+0x58>
 800c30e:	46d4      	mov	ip, sl
 800c310:	e7b3      	b.n	800c27a <__multiply+0x8c>
 800c312:	46e0      	mov	r8, ip
 800c314:	e7dd      	b.n	800c2d2 <__multiply+0xe4>
 800c316:	3e01      	subs	r6, #1
 800c318:	e799      	b.n	800c24e <__multiply+0x60>
	...

0800c31c <__pow5mult>:
 800c31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c320:	4615      	mov	r5, r2
 800c322:	f012 0203 	ands.w	r2, r2, #3
 800c326:	4606      	mov	r6, r0
 800c328:	460f      	mov	r7, r1
 800c32a:	d007      	beq.n	800c33c <__pow5mult+0x20>
 800c32c:	3a01      	subs	r2, #1
 800c32e:	4c21      	ldr	r4, [pc, #132]	; (800c3b4 <__pow5mult+0x98>)
 800c330:	2300      	movs	r3, #0
 800c332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c336:	f7ff fec8 	bl	800c0ca <__multadd>
 800c33a:	4607      	mov	r7, r0
 800c33c:	10ad      	asrs	r5, r5, #2
 800c33e:	d035      	beq.n	800c3ac <__pow5mult+0x90>
 800c340:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c342:	b93c      	cbnz	r4, 800c354 <__pow5mult+0x38>
 800c344:	2010      	movs	r0, #16
 800c346:	f7ff fe6d 	bl	800c024 <malloc>
 800c34a:	6270      	str	r0, [r6, #36]	; 0x24
 800c34c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c350:	6004      	str	r4, [r0, #0]
 800c352:	60c4      	str	r4, [r0, #12]
 800c354:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c35c:	b94c      	cbnz	r4, 800c372 <__pow5mult+0x56>
 800c35e:	f240 2171 	movw	r1, #625	; 0x271
 800c362:	4630      	mov	r0, r6
 800c364:	f7ff ff3a 	bl	800c1dc <__i2b>
 800c368:	2300      	movs	r3, #0
 800c36a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c36e:	4604      	mov	r4, r0
 800c370:	6003      	str	r3, [r0, #0]
 800c372:	f04f 0800 	mov.w	r8, #0
 800c376:	07eb      	lsls	r3, r5, #31
 800c378:	d50a      	bpl.n	800c390 <__pow5mult+0x74>
 800c37a:	4639      	mov	r1, r7
 800c37c:	4622      	mov	r2, r4
 800c37e:	4630      	mov	r0, r6
 800c380:	f7ff ff35 	bl	800c1ee <__multiply>
 800c384:	4639      	mov	r1, r7
 800c386:	4681      	mov	r9, r0
 800c388:	4630      	mov	r0, r6
 800c38a:	f7ff fe87 	bl	800c09c <_Bfree>
 800c38e:	464f      	mov	r7, r9
 800c390:	106d      	asrs	r5, r5, #1
 800c392:	d00b      	beq.n	800c3ac <__pow5mult+0x90>
 800c394:	6820      	ldr	r0, [r4, #0]
 800c396:	b938      	cbnz	r0, 800c3a8 <__pow5mult+0x8c>
 800c398:	4622      	mov	r2, r4
 800c39a:	4621      	mov	r1, r4
 800c39c:	4630      	mov	r0, r6
 800c39e:	f7ff ff26 	bl	800c1ee <__multiply>
 800c3a2:	6020      	str	r0, [r4, #0]
 800c3a4:	f8c0 8000 	str.w	r8, [r0]
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	e7e4      	b.n	800c376 <__pow5mult+0x5a>
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b2:	bf00      	nop
 800c3b4:	0800cf20 	.word	0x0800cf20

0800c3b8 <__lshift>:
 800c3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3bc:	460c      	mov	r4, r1
 800c3be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3c2:	6923      	ldr	r3, [r4, #16]
 800c3c4:	6849      	ldr	r1, [r1, #4]
 800c3c6:	eb0a 0903 	add.w	r9, sl, r3
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	4616      	mov	r6, r2
 800c3d0:	f109 0501 	add.w	r5, r9, #1
 800c3d4:	42ab      	cmp	r3, r5
 800c3d6:	db32      	blt.n	800c43e <__lshift+0x86>
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f7ff fe2b 	bl	800c034 <_Balloc>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	4680      	mov	r8, r0
 800c3e2:	f100 0114 	add.w	r1, r0, #20
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	4553      	cmp	r3, sl
 800c3ea:	db2b      	blt.n	800c444 <__lshift+0x8c>
 800c3ec:	6920      	ldr	r0, [r4, #16]
 800c3ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f2:	f104 0314 	add.w	r3, r4, #20
 800c3f6:	f016 021f 	ands.w	r2, r6, #31
 800c3fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c402:	d025      	beq.n	800c450 <__lshift+0x98>
 800c404:	f1c2 0e20 	rsb	lr, r2, #32
 800c408:	2000      	movs	r0, #0
 800c40a:	681e      	ldr	r6, [r3, #0]
 800c40c:	468a      	mov	sl, r1
 800c40e:	4096      	lsls	r6, r2
 800c410:	4330      	orrs	r0, r6
 800c412:	f84a 0b04 	str.w	r0, [sl], #4
 800c416:	f853 0b04 	ldr.w	r0, [r3], #4
 800c41a:	459c      	cmp	ip, r3
 800c41c:	fa20 f00e 	lsr.w	r0, r0, lr
 800c420:	d814      	bhi.n	800c44c <__lshift+0x94>
 800c422:	6048      	str	r0, [r1, #4]
 800c424:	b108      	cbz	r0, 800c42a <__lshift+0x72>
 800c426:	f109 0502 	add.w	r5, r9, #2
 800c42a:	3d01      	subs	r5, #1
 800c42c:	4638      	mov	r0, r7
 800c42e:	f8c8 5010 	str.w	r5, [r8, #16]
 800c432:	4621      	mov	r1, r4
 800c434:	f7ff fe32 	bl	800c09c <_Bfree>
 800c438:	4640      	mov	r0, r8
 800c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43e:	3101      	adds	r1, #1
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	e7c7      	b.n	800c3d4 <__lshift+0x1c>
 800c444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c448:	3301      	adds	r3, #1
 800c44a:	e7cd      	b.n	800c3e8 <__lshift+0x30>
 800c44c:	4651      	mov	r1, sl
 800c44e:	e7dc      	b.n	800c40a <__lshift+0x52>
 800c450:	3904      	subs	r1, #4
 800c452:	f853 2b04 	ldr.w	r2, [r3], #4
 800c456:	f841 2f04 	str.w	r2, [r1, #4]!
 800c45a:	459c      	cmp	ip, r3
 800c45c:	d8f9      	bhi.n	800c452 <__lshift+0x9a>
 800c45e:	e7e4      	b.n	800c42a <__lshift+0x72>

0800c460 <__mcmp>:
 800c460:	6903      	ldr	r3, [r0, #16]
 800c462:	690a      	ldr	r2, [r1, #16]
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	b530      	push	{r4, r5, lr}
 800c468:	d10c      	bne.n	800c484 <__mcmp+0x24>
 800c46a:	0092      	lsls	r2, r2, #2
 800c46c:	3014      	adds	r0, #20
 800c46e:	3114      	adds	r1, #20
 800c470:	1884      	adds	r4, r0, r2
 800c472:	4411      	add	r1, r2
 800c474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c47c:	4295      	cmp	r5, r2
 800c47e:	d003      	beq.n	800c488 <__mcmp+0x28>
 800c480:	d305      	bcc.n	800c48e <__mcmp+0x2e>
 800c482:	2301      	movs	r3, #1
 800c484:	4618      	mov	r0, r3
 800c486:	bd30      	pop	{r4, r5, pc}
 800c488:	42a0      	cmp	r0, r4
 800c48a:	d3f3      	bcc.n	800c474 <__mcmp+0x14>
 800c48c:	e7fa      	b.n	800c484 <__mcmp+0x24>
 800c48e:	f04f 33ff 	mov.w	r3, #4294967295
 800c492:	e7f7      	b.n	800c484 <__mcmp+0x24>

0800c494 <__mdiff>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	460d      	mov	r5, r1
 800c49a:	4607      	mov	r7, r0
 800c49c:	4611      	mov	r1, r2
 800c49e:	4628      	mov	r0, r5
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	f7ff ffdd 	bl	800c460 <__mcmp>
 800c4a6:	1e06      	subs	r6, r0, #0
 800c4a8:	d108      	bne.n	800c4bc <__mdiff+0x28>
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	f7ff fdc1 	bl	800c034 <_Balloc>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4bc:	bfa4      	itt	ge
 800c4be:	4623      	movge	r3, r4
 800c4c0:	462c      	movge	r4, r5
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	6861      	ldr	r1, [r4, #4]
 800c4c6:	bfa6      	itte	ge
 800c4c8:	461d      	movge	r5, r3
 800c4ca:	2600      	movge	r6, #0
 800c4cc:	2601      	movlt	r6, #1
 800c4ce:	f7ff fdb1 	bl	800c034 <_Balloc>
 800c4d2:	692b      	ldr	r3, [r5, #16]
 800c4d4:	60c6      	str	r6, [r0, #12]
 800c4d6:	6926      	ldr	r6, [r4, #16]
 800c4d8:	f105 0914 	add.w	r9, r5, #20
 800c4dc:	f104 0214 	add.w	r2, r4, #20
 800c4e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c4e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c4e8:	f100 0514 	add.w	r5, r0, #20
 800c4ec:	f04f 0e00 	mov.w	lr, #0
 800c4f0:	f852 ab04 	ldr.w	sl, [r2], #4
 800c4f4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c4f8:	fa1e f18a 	uxtah	r1, lr, sl
 800c4fc:	b2a3      	uxth	r3, r4
 800c4fe:	1ac9      	subs	r1, r1, r3
 800c500:	0c23      	lsrs	r3, r4, #16
 800c502:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c506:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c50a:	b289      	uxth	r1, r1
 800c50c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c510:	45c8      	cmp	r8, r9
 800c512:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c516:	4694      	mov	ip, r2
 800c518:	f845 3b04 	str.w	r3, [r5], #4
 800c51c:	d8e8      	bhi.n	800c4f0 <__mdiff+0x5c>
 800c51e:	45bc      	cmp	ip, r7
 800c520:	d304      	bcc.n	800c52c <__mdiff+0x98>
 800c522:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c526:	b183      	cbz	r3, 800c54a <__mdiff+0xb6>
 800c528:	6106      	str	r6, [r0, #16]
 800c52a:	e7c5      	b.n	800c4b8 <__mdiff+0x24>
 800c52c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c530:	fa1e f381 	uxtah	r3, lr, r1
 800c534:	141a      	asrs	r2, r3, #16
 800c536:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c540:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c544:	f845 3b04 	str.w	r3, [r5], #4
 800c548:	e7e9      	b.n	800c51e <__mdiff+0x8a>
 800c54a:	3e01      	subs	r6, #1
 800c54c:	e7e9      	b.n	800c522 <__mdiff+0x8e>

0800c54e <__d2b>:
 800c54e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c552:	460e      	mov	r6, r1
 800c554:	2101      	movs	r1, #1
 800c556:	ec59 8b10 	vmov	r8, r9, d0
 800c55a:	4615      	mov	r5, r2
 800c55c:	f7ff fd6a 	bl	800c034 <_Balloc>
 800c560:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c564:	4607      	mov	r7, r0
 800c566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c56a:	bb34      	cbnz	r4, 800c5ba <__d2b+0x6c>
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	f1b8 0300 	subs.w	r3, r8, #0
 800c572:	d027      	beq.n	800c5c4 <__d2b+0x76>
 800c574:	a802      	add	r0, sp, #8
 800c576:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c57a:	f7ff fe00 	bl	800c17e <__lo0bits>
 800c57e:	9900      	ldr	r1, [sp, #0]
 800c580:	b1f0      	cbz	r0, 800c5c0 <__d2b+0x72>
 800c582:	9a01      	ldr	r2, [sp, #4]
 800c584:	f1c0 0320 	rsb	r3, r0, #32
 800c588:	fa02 f303 	lsl.w	r3, r2, r3
 800c58c:	430b      	orrs	r3, r1
 800c58e:	40c2      	lsrs	r2, r0
 800c590:	617b      	str	r3, [r7, #20]
 800c592:	9201      	str	r2, [sp, #4]
 800c594:	9b01      	ldr	r3, [sp, #4]
 800c596:	61bb      	str	r3, [r7, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bf14      	ite	ne
 800c59c:	2102      	movne	r1, #2
 800c59e:	2101      	moveq	r1, #1
 800c5a0:	6139      	str	r1, [r7, #16]
 800c5a2:	b1c4      	cbz	r4, 800c5d6 <__d2b+0x88>
 800c5a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c5a8:	4404      	add	r4, r0
 800c5aa:	6034      	str	r4, [r6, #0]
 800c5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5b0:	6028      	str	r0, [r5, #0]
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	b003      	add	sp, #12
 800c5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5be:	e7d5      	b.n	800c56c <__d2b+0x1e>
 800c5c0:	6179      	str	r1, [r7, #20]
 800c5c2:	e7e7      	b.n	800c594 <__d2b+0x46>
 800c5c4:	a801      	add	r0, sp, #4
 800c5c6:	f7ff fdda 	bl	800c17e <__lo0bits>
 800c5ca:	9b01      	ldr	r3, [sp, #4]
 800c5cc:	617b      	str	r3, [r7, #20]
 800c5ce:	2101      	movs	r1, #1
 800c5d0:	6139      	str	r1, [r7, #16]
 800c5d2:	3020      	adds	r0, #32
 800c5d4:	e7e5      	b.n	800c5a2 <__d2b+0x54>
 800c5d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c5da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5de:	6030      	str	r0, [r6, #0]
 800c5e0:	6918      	ldr	r0, [r3, #16]
 800c5e2:	f7ff fdad 	bl	800c140 <__hi0bits>
 800c5e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c5ea:	e7e1      	b.n	800c5b0 <__d2b+0x62>

0800c5ec <_calloc_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	fb02 f401 	mul.w	r4, r2, r1
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	f000 f856 	bl	800c6a4 <_malloc_r>
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	b118      	cbz	r0, 800c604 <_calloc_r+0x18>
 800c5fc:	4622      	mov	r2, r4
 800c5fe:	2100      	movs	r1, #0
 800c600:	f7fe fa37 	bl	800aa72 <memset>
 800c604:	4628      	mov	r0, r5
 800c606:	bd38      	pop	{r3, r4, r5, pc}

0800c608 <_free_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4605      	mov	r5, r0
 800c60c:	2900      	cmp	r1, #0
 800c60e:	d045      	beq.n	800c69c <_free_r+0x94>
 800c610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c614:	1f0c      	subs	r4, r1, #4
 800c616:	2b00      	cmp	r3, #0
 800c618:	bfb8      	it	lt
 800c61a:	18e4      	addlt	r4, r4, r3
 800c61c:	f000 fa29 	bl	800ca72 <__malloc_lock>
 800c620:	4a1f      	ldr	r2, [pc, #124]	; (800c6a0 <_free_r+0x98>)
 800c622:	6813      	ldr	r3, [r2, #0]
 800c624:	4610      	mov	r0, r2
 800c626:	b933      	cbnz	r3, 800c636 <_free_r+0x2e>
 800c628:	6063      	str	r3, [r4, #4]
 800c62a:	6014      	str	r4, [r2, #0]
 800c62c:	4628      	mov	r0, r5
 800c62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c632:	f000 ba1f 	b.w	800ca74 <__malloc_unlock>
 800c636:	42a3      	cmp	r3, r4
 800c638:	d90c      	bls.n	800c654 <_free_r+0x4c>
 800c63a:	6821      	ldr	r1, [r4, #0]
 800c63c:	1862      	adds	r2, r4, r1
 800c63e:	4293      	cmp	r3, r2
 800c640:	bf04      	itt	eq
 800c642:	681a      	ldreq	r2, [r3, #0]
 800c644:	685b      	ldreq	r3, [r3, #4]
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	bf04      	itt	eq
 800c64a:	1852      	addeq	r2, r2, r1
 800c64c:	6022      	streq	r2, [r4, #0]
 800c64e:	6004      	str	r4, [r0, #0]
 800c650:	e7ec      	b.n	800c62c <_free_r+0x24>
 800c652:	4613      	mov	r3, r2
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	b10a      	cbz	r2, 800c65c <_free_r+0x54>
 800c658:	42a2      	cmp	r2, r4
 800c65a:	d9fa      	bls.n	800c652 <_free_r+0x4a>
 800c65c:	6819      	ldr	r1, [r3, #0]
 800c65e:	1858      	adds	r0, r3, r1
 800c660:	42a0      	cmp	r0, r4
 800c662:	d10b      	bne.n	800c67c <_free_r+0x74>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	4401      	add	r1, r0
 800c668:	1858      	adds	r0, r3, r1
 800c66a:	4282      	cmp	r2, r0
 800c66c:	6019      	str	r1, [r3, #0]
 800c66e:	d1dd      	bne.n	800c62c <_free_r+0x24>
 800c670:	6810      	ldr	r0, [r2, #0]
 800c672:	6852      	ldr	r2, [r2, #4]
 800c674:	605a      	str	r2, [r3, #4]
 800c676:	4401      	add	r1, r0
 800c678:	6019      	str	r1, [r3, #0]
 800c67a:	e7d7      	b.n	800c62c <_free_r+0x24>
 800c67c:	d902      	bls.n	800c684 <_free_r+0x7c>
 800c67e:	230c      	movs	r3, #12
 800c680:	602b      	str	r3, [r5, #0]
 800c682:	e7d3      	b.n	800c62c <_free_r+0x24>
 800c684:	6820      	ldr	r0, [r4, #0]
 800c686:	1821      	adds	r1, r4, r0
 800c688:	428a      	cmp	r2, r1
 800c68a:	bf04      	itt	eq
 800c68c:	6811      	ldreq	r1, [r2, #0]
 800c68e:	6852      	ldreq	r2, [r2, #4]
 800c690:	6062      	str	r2, [r4, #4]
 800c692:	bf04      	itt	eq
 800c694:	1809      	addeq	r1, r1, r0
 800c696:	6021      	streq	r1, [r4, #0]
 800c698:	605c      	str	r4, [r3, #4]
 800c69a:	e7c7      	b.n	800c62c <_free_r+0x24>
 800c69c:	bd38      	pop	{r3, r4, r5, pc}
 800c69e:	bf00      	nop
 800c6a0:	200027e8 	.word	0x200027e8

0800c6a4 <_malloc_r>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	1ccd      	adds	r5, r1, #3
 800c6a8:	f025 0503 	bic.w	r5, r5, #3
 800c6ac:	3508      	adds	r5, #8
 800c6ae:	2d0c      	cmp	r5, #12
 800c6b0:	bf38      	it	cc
 800c6b2:	250c      	movcc	r5, #12
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	db01      	blt.n	800c6be <_malloc_r+0x1a>
 800c6ba:	42a9      	cmp	r1, r5
 800c6bc:	d903      	bls.n	800c6c6 <_malloc_r+0x22>
 800c6be:	230c      	movs	r3, #12
 800c6c0:	6033      	str	r3, [r6, #0]
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}
 800c6c6:	f000 f9d4 	bl	800ca72 <__malloc_lock>
 800c6ca:	4a21      	ldr	r2, [pc, #132]	; (800c750 <_malloc_r+0xac>)
 800c6cc:	6814      	ldr	r4, [r2, #0]
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	b991      	cbnz	r1, 800c6f8 <_malloc_r+0x54>
 800c6d2:	4c20      	ldr	r4, [pc, #128]	; (800c754 <_malloc_r+0xb0>)
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	b91b      	cbnz	r3, 800c6e0 <_malloc_r+0x3c>
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f000 f98f 	bl	800c9fc <_sbrk_r>
 800c6de:	6020      	str	r0, [r4, #0]
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f000 f98a 	bl	800c9fc <_sbrk_r>
 800c6e8:	1c43      	adds	r3, r0, #1
 800c6ea:	d124      	bne.n	800c736 <_malloc_r+0x92>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	6033      	str	r3, [r6, #0]
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f000 f9bf 	bl	800ca74 <__malloc_unlock>
 800c6f6:	e7e4      	b.n	800c6c2 <_malloc_r+0x1e>
 800c6f8:	680b      	ldr	r3, [r1, #0]
 800c6fa:	1b5b      	subs	r3, r3, r5
 800c6fc:	d418      	bmi.n	800c730 <_malloc_r+0x8c>
 800c6fe:	2b0b      	cmp	r3, #11
 800c700:	d90f      	bls.n	800c722 <_malloc_r+0x7e>
 800c702:	600b      	str	r3, [r1, #0]
 800c704:	50cd      	str	r5, [r1, r3]
 800c706:	18cc      	adds	r4, r1, r3
 800c708:	4630      	mov	r0, r6
 800c70a:	f000 f9b3 	bl	800ca74 <__malloc_unlock>
 800c70e:	f104 000b 	add.w	r0, r4, #11
 800c712:	1d23      	adds	r3, r4, #4
 800c714:	f020 0007 	bic.w	r0, r0, #7
 800c718:	1ac3      	subs	r3, r0, r3
 800c71a:	d0d3      	beq.n	800c6c4 <_malloc_r+0x20>
 800c71c:	425a      	negs	r2, r3
 800c71e:	50e2      	str	r2, [r4, r3]
 800c720:	e7d0      	b.n	800c6c4 <_malloc_r+0x20>
 800c722:	428c      	cmp	r4, r1
 800c724:	684b      	ldr	r3, [r1, #4]
 800c726:	bf16      	itet	ne
 800c728:	6063      	strne	r3, [r4, #4]
 800c72a:	6013      	streq	r3, [r2, #0]
 800c72c:	460c      	movne	r4, r1
 800c72e:	e7eb      	b.n	800c708 <_malloc_r+0x64>
 800c730:	460c      	mov	r4, r1
 800c732:	6849      	ldr	r1, [r1, #4]
 800c734:	e7cc      	b.n	800c6d0 <_malloc_r+0x2c>
 800c736:	1cc4      	adds	r4, r0, #3
 800c738:	f024 0403 	bic.w	r4, r4, #3
 800c73c:	42a0      	cmp	r0, r4
 800c73e:	d005      	beq.n	800c74c <_malloc_r+0xa8>
 800c740:	1a21      	subs	r1, r4, r0
 800c742:	4630      	mov	r0, r6
 800c744:	f000 f95a 	bl	800c9fc <_sbrk_r>
 800c748:	3001      	adds	r0, #1
 800c74a:	d0cf      	beq.n	800c6ec <_malloc_r+0x48>
 800c74c:	6025      	str	r5, [r4, #0]
 800c74e:	e7db      	b.n	800c708 <_malloc_r+0x64>
 800c750:	200027e8 	.word	0x200027e8
 800c754:	200027ec 	.word	0x200027ec

0800c758 <__ssputs_r>:
 800c758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c75c:	688e      	ldr	r6, [r1, #8]
 800c75e:	429e      	cmp	r6, r3
 800c760:	4682      	mov	sl, r0
 800c762:	460c      	mov	r4, r1
 800c764:	4690      	mov	r8, r2
 800c766:	4699      	mov	r9, r3
 800c768:	d837      	bhi.n	800c7da <__ssputs_r+0x82>
 800c76a:	898a      	ldrh	r2, [r1, #12]
 800c76c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c770:	d031      	beq.n	800c7d6 <__ssputs_r+0x7e>
 800c772:	6825      	ldr	r5, [r4, #0]
 800c774:	6909      	ldr	r1, [r1, #16]
 800c776:	1a6f      	subs	r7, r5, r1
 800c778:	6965      	ldr	r5, [r4, #20]
 800c77a:	2302      	movs	r3, #2
 800c77c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c780:	fb95 f5f3 	sdiv	r5, r5, r3
 800c784:	f109 0301 	add.w	r3, r9, #1
 800c788:	443b      	add	r3, r7
 800c78a:	429d      	cmp	r5, r3
 800c78c:	bf38      	it	cc
 800c78e:	461d      	movcc	r5, r3
 800c790:	0553      	lsls	r3, r2, #21
 800c792:	d530      	bpl.n	800c7f6 <__ssputs_r+0x9e>
 800c794:	4629      	mov	r1, r5
 800c796:	f7ff ff85 	bl	800c6a4 <_malloc_r>
 800c79a:	4606      	mov	r6, r0
 800c79c:	b950      	cbnz	r0, 800c7b4 <__ssputs_r+0x5c>
 800c79e:	230c      	movs	r3, #12
 800c7a0:	f8ca 3000 	str.w	r3, [sl]
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7aa:	81a3      	strh	r3, [r4, #12]
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b4:	463a      	mov	r2, r7
 800c7b6:	6921      	ldr	r1, [r4, #16]
 800c7b8:	f7fe f950 	bl	800aa5c <memcpy>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	6126      	str	r6, [r4, #16]
 800c7ca:	6165      	str	r5, [r4, #20]
 800c7cc:	443e      	add	r6, r7
 800c7ce:	1bed      	subs	r5, r5, r7
 800c7d0:	6026      	str	r6, [r4, #0]
 800c7d2:	60a5      	str	r5, [r4, #8]
 800c7d4:	464e      	mov	r6, r9
 800c7d6:	454e      	cmp	r6, r9
 800c7d8:	d900      	bls.n	800c7dc <__ssputs_r+0x84>
 800c7da:	464e      	mov	r6, r9
 800c7dc:	4632      	mov	r2, r6
 800c7de:	4641      	mov	r1, r8
 800c7e0:	6820      	ldr	r0, [r4, #0]
 800c7e2:	f000 f92d 	bl	800ca40 <memmove>
 800c7e6:	68a3      	ldr	r3, [r4, #8]
 800c7e8:	1b9b      	subs	r3, r3, r6
 800c7ea:	60a3      	str	r3, [r4, #8]
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	441e      	add	r6, r3
 800c7f0:	6026      	str	r6, [r4, #0]
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	e7dc      	b.n	800c7b0 <__ssputs_r+0x58>
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	f000 f93d 	bl	800ca76 <_realloc_r>
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d1e2      	bne.n	800c7c8 <__ssputs_r+0x70>
 800c802:	6921      	ldr	r1, [r4, #16]
 800c804:	4650      	mov	r0, sl
 800c806:	f7ff feff 	bl	800c608 <_free_r>
 800c80a:	e7c8      	b.n	800c79e <__ssputs_r+0x46>

0800c80c <_svfiprintf_r>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	461d      	mov	r5, r3
 800c812:	898b      	ldrh	r3, [r1, #12]
 800c814:	061f      	lsls	r7, r3, #24
 800c816:	b09d      	sub	sp, #116	; 0x74
 800c818:	4680      	mov	r8, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	4616      	mov	r6, r2
 800c81e:	d50f      	bpl.n	800c840 <_svfiprintf_r+0x34>
 800c820:	690b      	ldr	r3, [r1, #16]
 800c822:	b96b      	cbnz	r3, 800c840 <_svfiprintf_r+0x34>
 800c824:	2140      	movs	r1, #64	; 0x40
 800c826:	f7ff ff3d 	bl	800c6a4 <_malloc_r>
 800c82a:	6020      	str	r0, [r4, #0]
 800c82c:	6120      	str	r0, [r4, #16]
 800c82e:	b928      	cbnz	r0, 800c83c <_svfiprintf_r+0x30>
 800c830:	230c      	movs	r3, #12
 800c832:	f8c8 3000 	str.w	r3, [r8]
 800c836:	f04f 30ff 	mov.w	r0, #4294967295
 800c83a:	e0c8      	b.n	800c9ce <_svfiprintf_r+0x1c2>
 800c83c:	2340      	movs	r3, #64	; 0x40
 800c83e:	6163      	str	r3, [r4, #20]
 800c840:	2300      	movs	r3, #0
 800c842:	9309      	str	r3, [sp, #36]	; 0x24
 800c844:	2320      	movs	r3, #32
 800c846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c84a:	2330      	movs	r3, #48	; 0x30
 800c84c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c850:	9503      	str	r5, [sp, #12]
 800c852:	f04f 0b01 	mov.w	fp, #1
 800c856:	4637      	mov	r7, r6
 800c858:	463d      	mov	r5, r7
 800c85a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c85e:	b10b      	cbz	r3, 800c864 <_svfiprintf_r+0x58>
 800c860:	2b25      	cmp	r3, #37	; 0x25
 800c862:	d13e      	bne.n	800c8e2 <_svfiprintf_r+0xd6>
 800c864:	ebb7 0a06 	subs.w	sl, r7, r6
 800c868:	d00b      	beq.n	800c882 <_svfiprintf_r+0x76>
 800c86a:	4653      	mov	r3, sl
 800c86c:	4632      	mov	r2, r6
 800c86e:	4621      	mov	r1, r4
 800c870:	4640      	mov	r0, r8
 800c872:	f7ff ff71 	bl	800c758 <__ssputs_r>
 800c876:	3001      	adds	r0, #1
 800c878:	f000 80a4 	beq.w	800c9c4 <_svfiprintf_r+0x1b8>
 800c87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c87e:	4453      	add	r3, sl
 800c880:	9309      	str	r3, [sp, #36]	; 0x24
 800c882:	783b      	ldrb	r3, [r7, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 809d 	beq.w	800c9c4 <_svfiprintf_r+0x1b8>
 800c88a:	2300      	movs	r3, #0
 800c88c:	f04f 32ff 	mov.w	r2, #4294967295
 800c890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c894:	9304      	str	r3, [sp, #16]
 800c896:	9307      	str	r3, [sp, #28]
 800c898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c89c:	931a      	str	r3, [sp, #104]	; 0x68
 800c89e:	462f      	mov	r7, r5
 800c8a0:	2205      	movs	r2, #5
 800c8a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c8a6:	4850      	ldr	r0, [pc, #320]	; (800c9e8 <_svfiprintf_r+0x1dc>)
 800c8a8:	f7f3 fc9a 	bl	80001e0 <memchr>
 800c8ac:	9b04      	ldr	r3, [sp, #16]
 800c8ae:	b9d0      	cbnz	r0, 800c8e6 <_svfiprintf_r+0xda>
 800c8b0:	06d9      	lsls	r1, r3, #27
 800c8b2:	bf44      	itt	mi
 800c8b4:	2220      	movmi	r2, #32
 800c8b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8ba:	071a      	lsls	r2, r3, #28
 800c8bc:	bf44      	itt	mi
 800c8be:	222b      	movmi	r2, #43	; 0x2b
 800c8c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8c4:	782a      	ldrb	r2, [r5, #0]
 800c8c6:	2a2a      	cmp	r2, #42	; 0x2a
 800c8c8:	d015      	beq.n	800c8f6 <_svfiprintf_r+0xea>
 800c8ca:	9a07      	ldr	r2, [sp, #28]
 800c8cc:	462f      	mov	r7, r5
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	250a      	movs	r5, #10
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d8:	3b30      	subs	r3, #48	; 0x30
 800c8da:	2b09      	cmp	r3, #9
 800c8dc:	d94d      	bls.n	800c97a <_svfiprintf_r+0x16e>
 800c8de:	b1b8      	cbz	r0, 800c910 <_svfiprintf_r+0x104>
 800c8e0:	e00f      	b.n	800c902 <_svfiprintf_r+0xf6>
 800c8e2:	462f      	mov	r7, r5
 800c8e4:	e7b8      	b.n	800c858 <_svfiprintf_r+0x4c>
 800c8e6:	4a40      	ldr	r2, [pc, #256]	; (800c9e8 <_svfiprintf_r+0x1dc>)
 800c8e8:	1a80      	subs	r0, r0, r2
 800c8ea:	fa0b f000 	lsl.w	r0, fp, r0
 800c8ee:	4318      	orrs	r0, r3
 800c8f0:	9004      	str	r0, [sp, #16]
 800c8f2:	463d      	mov	r5, r7
 800c8f4:	e7d3      	b.n	800c89e <_svfiprintf_r+0x92>
 800c8f6:	9a03      	ldr	r2, [sp, #12]
 800c8f8:	1d11      	adds	r1, r2, #4
 800c8fa:	6812      	ldr	r2, [r2, #0]
 800c8fc:	9103      	str	r1, [sp, #12]
 800c8fe:	2a00      	cmp	r2, #0
 800c900:	db01      	blt.n	800c906 <_svfiprintf_r+0xfa>
 800c902:	9207      	str	r2, [sp, #28]
 800c904:	e004      	b.n	800c910 <_svfiprintf_r+0x104>
 800c906:	4252      	negs	r2, r2
 800c908:	f043 0302 	orr.w	r3, r3, #2
 800c90c:	9207      	str	r2, [sp, #28]
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	783b      	ldrb	r3, [r7, #0]
 800c912:	2b2e      	cmp	r3, #46	; 0x2e
 800c914:	d10c      	bne.n	800c930 <_svfiprintf_r+0x124>
 800c916:	787b      	ldrb	r3, [r7, #1]
 800c918:	2b2a      	cmp	r3, #42	; 0x2a
 800c91a:	d133      	bne.n	800c984 <_svfiprintf_r+0x178>
 800c91c:	9b03      	ldr	r3, [sp, #12]
 800c91e:	1d1a      	adds	r2, r3, #4
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	9203      	str	r2, [sp, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	bfb8      	it	lt
 800c928:	f04f 33ff 	movlt.w	r3, #4294967295
 800c92c:	3702      	adds	r7, #2
 800c92e:	9305      	str	r3, [sp, #20]
 800c930:	4d2e      	ldr	r5, [pc, #184]	; (800c9ec <_svfiprintf_r+0x1e0>)
 800c932:	7839      	ldrb	r1, [r7, #0]
 800c934:	2203      	movs	r2, #3
 800c936:	4628      	mov	r0, r5
 800c938:	f7f3 fc52 	bl	80001e0 <memchr>
 800c93c:	b138      	cbz	r0, 800c94e <_svfiprintf_r+0x142>
 800c93e:	2340      	movs	r3, #64	; 0x40
 800c940:	1b40      	subs	r0, r0, r5
 800c942:	fa03 f000 	lsl.w	r0, r3, r0
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	4303      	orrs	r3, r0
 800c94a:	3701      	adds	r7, #1
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	7839      	ldrb	r1, [r7, #0]
 800c950:	4827      	ldr	r0, [pc, #156]	; (800c9f0 <_svfiprintf_r+0x1e4>)
 800c952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c956:	2206      	movs	r2, #6
 800c958:	1c7e      	adds	r6, r7, #1
 800c95a:	f7f3 fc41 	bl	80001e0 <memchr>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d038      	beq.n	800c9d4 <_svfiprintf_r+0x1c8>
 800c962:	4b24      	ldr	r3, [pc, #144]	; (800c9f4 <_svfiprintf_r+0x1e8>)
 800c964:	bb13      	cbnz	r3, 800c9ac <_svfiprintf_r+0x1a0>
 800c966:	9b03      	ldr	r3, [sp, #12]
 800c968:	3307      	adds	r3, #7
 800c96a:	f023 0307 	bic.w	r3, r3, #7
 800c96e:	3308      	adds	r3, #8
 800c970:	9303      	str	r3, [sp, #12]
 800c972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c974:	444b      	add	r3, r9
 800c976:	9309      	str	r3, [sp, #36]	; 0x24
 800c978:	e76d      	b.n	800c856 <_svfiprintf_r+0x4a>
 800c97a:	fb05 3202 	mla	r2, r5, r2, r3
 800c97e:	2001      	movs	r0, #1
 800c980:	460f      	mov	r7, r1
 800c982:	e7a6      	b.n	800c8d2 <_svfiprintf_r+0xc6>
 800c984:	2300      	movs	r3, #0
 800c986:	3701      	adds	r7, #1
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	4619      	mov	r1, r3
 800c98c:	250a      	movs	r5, #10
 800c98e:	4638      	mov	r0, r7
 800c990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c994:	3a30      	subs	r2, #48	; 0x30
 800c996:	2a09      	cmp	r2, #9
 800c998:	d903      	bls.n	800c9a2 <_svfiprintf_r+0x196>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0c8      	beq.n	800c930 <_svfiprintf_r+0x124>
 800c99e:	9105      	str	r1, [sp, #20]
 800c9a0:	e7c6      	b.n	800c930 <_svfiprintf_r+0x124>
 800c9a2:	fb05 2101 	mla	r1, r5, r1, r2
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	e7f0      	b.n	800c98e <_svfiprintf_r+0x182>
 800c9ac:	ab03      	add	r3, sp, #12
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <_svfiprintf_r+0x1ec>)
 800c9b4:	a904      	add	r1, sp, #16
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	f7fe f8f8 	bl	800abac <_printf_float>
 800c9bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c9c0:	4681      	mov	r9, r0
 800c9c2:	d1d6      	bne.n	800c972 <_svfiprintf_r+0x166>
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	065b      	lsls	r3, r3, #25
 800c9c8:	f53f af35 	bmi.w	800c836 <_svfiprintf_r+0x2a>
 800c9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9ce:	b01d      	add	sp, #116	; 0x74
 800c9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d4:	ab03      	add	r3, sp, #12
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	4622      	mov	r2, r4
 800c9da:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <_svfiprintf_r+0x1ec>)
 800c9dc:	a904      	add	r1, sp, #16
 800c9de:	4640      	mov	r0, r8
 800c9e0:	f7fe fb9a 	bl	800b118 <_printf_i>
 800c9e4:	e7ea      	b.n	800c9bc <_svfiprintf_r+0x1b0>
 800c9e6:	bf00      	nop
 800c9e8:	0800cf2c 	.word	0x0800cf2c
 800c9ec:	0800cf32 	.word	0x0800cf32
 800c9f0:	0800cf36 	.word	0x0800cf36
 800c9f4:	0800abad 	.word	0x0800abad
 800c9f8:	0800c759 	.word	0x0800c759

0800c9fc <_sbrk_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4c06      	ldr	r4, [pc, #24]	; (800ca18 <_sbrk_r+0x1c>)
 800ca00:	2300      	movs	r3, #0
 800ca02:	4605      	mov	r5, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	f7f5 feda 	bl	80027c0 <_sbrk>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_sbrk_r+0x1a>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_sbrk_r+0x1a>
 800ca14:	602b      	str	r3, [r5, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	20008df0 	.word	0x20008df0

0800ca1c <__ascii_mbtowc>:
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	b901      	cbnz	r1, 800ca22 <__ascii_mbtowc+0x6>
 800ca20:	a901      	add	r1, sp, #4
 800ca22:	b142      	cbz	r2, 800ca36 <__ascii_mbtowc+0x1a>
 800ca24:	b14b      	cbz	r3, 800ca3a <__ascii_mbtowc+0x1e>
 800ca26:	7813      	ldrb	r3, [r2, #0]
 800ca28:	600b      	str	r3, [r1, #0]
 800ca2a:	7812      	ldrb	r2, [r2, #0]
 800ca2c:	1c10      	adds	r0, r2, #0
 800ca2e:	bf18      	it	ne
 800ca30:	2001      	movne	r0, #1
 800ca32:	b002      	add	sp, #8
 800ca34:	4770      	bx	lr
 800ca36:	4610      	mov	r0, r2
 800ca38:	e7fb      	b.n	800ca32 <__ascii_mbtowc+0x16>
 800ca3a:	f06f 0001 	mvn.w	r0, #1
 800ca3e:	e7f8      	b.n	800ca32 <__ascii_mbtowc+0x16>

0800ca40 <memmove>:
 800ca40:	4288      	cmp	r0, r1
 800ca42:	b510      	push	{r4, lr}
 800ca44:	eb01 0302 	add.w	r3, r1, r2
 800ca48:	d807      	bhi.n	800ca5a <memmove+0x1a>
 800ca4a:	1e42      	subs	r2, r0, #1
 800ca4c:	4299      	cmp	r1, r3
 800ca4e:	d00a      	beq.n	800ca66 <memmove+0x26>
 800ca50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca54:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ca58:	e7f8      	b.n	800ca4c <memmove+0xc>
 800ca5a:	4283      	cmp	r3, r0
 800ca5c:	d9f5      	bls.n	800ca4a <memmove+0xa>
 800ca5e:	1881      	adds	r1, r0, r2
 800ca60:	1ad2      	subs	r2, r2, r3
 800ca62:	42d3      	cmn	r3, r2
 800ca64:	d100      	bne.n	800ca68 <memmove+0x28>
 800ca66:	bd10      	pop	{r4, pc}
 800ca68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ca70:	e7f7      	b.n	800ca62 <memmove+0x22>

0800ca72 <__malloc_lock>:
 800ca72:	4770      	bx	lr

0800ca74 <__malloc_unlock>:
 800ca74:	4770      	bx	lr

0800ca76 <_realloc_r>:
 800ca76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca78:	4607      	mov	r7, r0
 800ca7a:	4614      	mov	r4, r2
 800ca7c:	460e      	mov	r6, r1
 800ca7e:	b921      	cbnz	r1, 800ca8a <_realloc_r+0x14>
 800ca80:	4611      	mov	r1, r2
 800ca82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca86:	f7ff be0d 	b.w	800c6a4 <_malloc_r>
 800ca8a:	b922      	cbnz	r2, 800ca96 <_realloc_r+0x20>
 800ca8c:	f7ff fdbc 	bl	800c608 <_free_r>
 800ca90:	4625      	mov	r5, r4
 800ca92:	4628      	mov	r0, r5
 800ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca96:	f000 f821 	bl	800cadc <_malloc_usable_size_r>
 800ca9a:	42a0      	cmp	r0, r4
 800ca9c:	d20f      	bcs.n	800cabe <_realloc_r+0x48>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4638      	mov	r0, r7
 800caa2:	f7ff fdff 	bl	800c6a4 <_malloc_r>
 800caa6:	4605      	mov	r5, r0
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d0f2      	beq.n	800ca92 <_realloc_r+0x1c>
 800caac:	4631      	mov	r1, r6
 800caae:	4622      	mov	r2, r4
 800cab0:	f7fd ffd4 	bl	800aa5c <memcpy>
 800cab4:	4631      	mov	r1, r6
 800cab6:	4638      	mov	r0, r7
 800cab8:	f7ff fda6 	bl	800c608 <_free_r>
 800cabc:	e7e9      	b.n	800ca92 <_realloc_r+0x1c>
 800cabe:	4635      	mov	r5, r6
 800cac0:	e7e7      	b.n	800ca92 <_realloc_r+0x1c>

0800cac2 <__ascii_wctomb>:
 800cac2:	b149      	cbz	r1, 800cad8 <__ascii_wctomb+0x16>
 800cac4:	2aff      	cmp	r2, #255	; 0xff
 800cac6:	bf85      	ittet	hi
 800cac8:	238a      	movhi	r3, #138	; 0x8a
 800caca:	6003      	strhi	r3, [r0, #0]
 800cacc:	700a      	strbls	r2, [r1, #0]
 800cace:	f04f 30ff 	movhi.w	r0, #4294967295
 800cad2:	bf98      	it	ls
 800cad4:	2001      	movls	r0, #1
 800cad6:	4770      	bx	lr
 800cad8:	4608      	mov	r0, r1
 800cada:	4770      	bx	lr

0800cadc <_malloc_usable_size_r>:
 800cadc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cae0:	1f18      	subs	r0, r3, #4
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	bfbc      	itt	lt
 800cae6:	580b      	ldrlt	r3, [r1, r0]
 800cae8:	18c0      	addlt	r0, r0, r3
 800caea:	4770      	bx	lr

0800caec <sqrtf>:
 800caec:	b510      	push	{r4, lr}
 800caee:	ed2d 8b02 	vpush	{d8}
 800caf2:	b08a      	sub	sp, #40	; 0x28
 800caf4:	eeb0 8a40 	vmov.f32	s16, s0
 800caf8:	f000 f848 	bl	800cb8c <__ieee754_sqrtf>
 800cafc:	4b21      	ldr	r3, [pc, #132]	; (800cb84 <sqrtf+0x98>)
 800cafe:	f993 4000 	ldrsb.w	r4, [r3]
 800cb02:	1c63      	adds	r3, r4, #1
 800cb04:	d02c      	beq.n	800cb60 <sqrtf+0x74>
 800cb06:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0e:	d627      	bvs.n	800cb60 <sqrtf+0x74>
 800cb10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb18:	d522      	bpl.n	800cb60 <sqrtf+0x74>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	4b1a      	ldr	r3, [pc, #104]	; (800cb88 <sqrtf+0x9c>)
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	ee18 0a10 	vmov	r0, s16
 800cb26:	2300      	movs	r3, #0
 800cb28:	9308      	str	r3, [sp, #32]
 800cb2a:	f7f3 fd0d 	bl	8000548 <__aeabi_f2d>
 800cb2e:	2200      	movs	r2, #0
 800cb30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	b9ac      	cbnz	r4, 800cb68 <sqrtf+0x7c>
 800cb3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb40:	4668      	mov	r0, sp
 800cb42:	f000 f826 	bl	800cb92 <matherr>
 800cb46:	b1b8      	cbz	r0, 800cb78 <sqrtf+0x8c>
 800cb48:	9b08      	ldr	r3, [sp, #32]
 800cb4a:	b11b      	cbz	r3, 800cb54 <sqrtf+0x68>
 800cb4c:	f7fd ff5c 	bl	800aa08 <__errno>
 800cb50:	9b08      	ldr	r3, [sp, #32]
 800cb52:	6003      	str	r3, [r0, #0]
 800cb54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb58:	f7f4 f826 	bl	8000ba8 <__aeabi_d2f>
 800cb5c:	ee00 0a10 	vmov	s0, r0
 800cb60:	b00a      	add	sp, #40	; 0x28
 800cb62:	ecbd 8b02 	vpop	{d8}
 800cb66:	bd10      	pop	{r4, pc}
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	f7f3 fe6e 	bl	800084c <__aeabi_ddiv>
 800cb70:	2c02      	cmp	r4, #2
 800cb72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cb76:	d1e3      	bne.n	800cb40 <sqrtf+0x54>
 800cb78:	f7fd ff46 	bl	800aa08 <__errno>
 800cb7c:	2321      	movs	r3, #33	; 0x21
 800cb7e:	6003      	str	r3, [r0, #0]
 800cb80:	e7e2      	b.n	800cb48 <sqrtf+0x5c>
 800cb82:	bf00      	nop
 800cb84:	200001e0 	.word	0x200001e0
 800cb88:	0800d048 	.word	0x0800d048

0800cb8c <__ieee754_sqrtf>:
 800cb8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cb90:	4770      	bx	lr

0800cb92 <matherr>:
 800cb92:	2000      	movs	r0, #0
 800cb94:	4770      	bx	lr
	...

0800cb98 <_init>:
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9a:	bf00      	nop
 800cb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9e:	bc08      	pop	{r3}
 800cba0:	469e      	mov	lr, r3
 800cba2:	4770      	bx	lr

0800cba4 <_fini>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	bf00      	nop
 800cba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbaa:	bc08      	pop	{r3}
 800cbac:	469e      	mov	lr, r3
 800cbae:	4770      	bx	lr
